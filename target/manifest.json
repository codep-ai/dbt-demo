{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.8", "generated_at": "2024-07-12T09:21:21.122428Z", "invocation_id": "e1d6f6ac-9a70-4244-9f16-730ba11a6bf6", "env": {}, "project_id": "e8cf80d4fcae64a2e63ed1fc4d39b650", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.datapai.events": {"database": "DATAPAI", "schema": "DATAPAI", "name": "events", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/events.sql", "original_file_path": "models/full-jaffle-shop/events.sql", "unique_id": "model.datapai.events", "fqn": ["datapai", "full-jaffle-shop", "events"], "alias": "events", "checksum": {"name": "sha256", "checksum": "1d3a5c14e13660adec8632a0237e770472a5f806e5bc91541edab43e1becbbad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"timestamp_tz": {"name": "timestamp_tz", "description": "", "meta": {"dimension": {"label": "Timestamp (with timezone)", "type": "timestamp", "time_intervals": ["RAW", "MILLISECOND", "SECOND", "MINUTE", "HOUR", "DAY", "DAY_OF_WEEK_INDEX", "DAY_OF_WEEK_NAME", "DAY_OF_MONTH_NUM", "DAY_OF_YEAR_NUM", "WEEK", "WEEK_NUM", "MONTH", "MONTH_NUM", "MONTH_NAME", "QUARTER", "QUARTER_NUM", "QUARTER_NAME", "YEAR", "YEAR_NUM", "HOUR_OF_DAY_NUM", "MINUTE_OF_HOUR_NUM"]}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp_ntz": {"name": "timestamp_ntz", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp_ltz": {"name": "timestamp_ltz", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {"dimension": {"type": "date", "urls": [{"label": "Open in Google Calendar", "url": "https://calendar.google.com/calendar/u/0/r/day/${ value.formatted |split: \"-\" |join: \"/\"}"}]}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "", "meta": {"dimension": {"type": "string", "group_label": "Events"}, "metrics": {"count": {"type": "count"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "", "meta": {"dimension": {"type": "number", "group_label": "Events"}, "metrics": {"in_gbp": {"type": "sum", "format": "gbp"}, "in_eur": {"type": "sum", "format": "eur"}, "in_eur_with_round_2": {"type": "sum", "format": "eur", "round": 2}, "in_eur_with_round_0": {"type": "sum", "format": "eur", "round": 0}, "with_round_2": {"type": "sum", "round": 2}, "in_thousands_of_eur": {"type": "sum", "format": "eur", "compact": "thousands"}, "in_thousands_of_eur_with_round_0": {"type": "sum", "format": "eur", "round": 0, "compact": "thousands"}, "in_mi": {"type": "sum", "format": "mi"}, "in_km": {"type": "sum", "format": "km"}, "in_percent": {"type": "sum", "format": "percent"}, "in_thousands": {"type": "sum", "compact": "thousands"}, "in_millions": {"type": "sum", "compact": "millions"}, "in_billions": {"type": "sum", "compact": "billions"}, "in_trillions": {"type": "sum", "compact": "trillions"}, "percentile_25": {"type": "percentile", "percentile": 25}, "percentile_50": {"type": "percentile", "percentile": 50}, "percentile_75": {"type": "percentile", "percentile": 75}, "median": {"type": "median"}, "with_filters": {"type": "sum", "filters": [{"event_id": "!null"}, {"event_id": ">5"}, {"event": "song_played"}]}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/events.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720749448.1545315, "relation_name": "DATAPAI.DATAPAI.events", "raw_code": "SELECT * FROM {{ ref('raw_events') }}", "language": "sql", "refs": [{"name": "raw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.raw_events"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/events.sql", "compiled": true, "compiled_code": "SELECT * FROM DATAPAI.DATAPAI.raw_events", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.generated_a": {"database": "DATAPAI", "schema": "DATAPAI", "name": "generated_a", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/generated_a.sql", "original_file_path": "models/full-jaffle-shop/generated_a.sql", "unique_id": "model.datapai.generated_a", "fqn": ["datapai", "full-jaffle-shop", "generated_a"], "alias": "generated_a", "checksum": {"name": "sha256", "checksum": "e8e752491800dc99f7eb161c2da643e6ed449519285f42ef302453616e4b63a3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_1.primary_key}", "alias": "join_1"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_2.primary_key}", "alias": "join_2"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_3.primary_key}", "alias": "join_3"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_4.primary_key}", "alias": "join_4"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_5.primary_key}", "alias": "join_5"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_6.primary_key}", "alias": "join_6"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_7.primary_key}", "alias": "join_7"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_8.primary_key}", "alias": "join_8"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_9.primary_key}", "alias": "join_9"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_10.primary_key}", "alias": "join_10"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_11.primary_key}", "alias": "join_11"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_12.primary_key}", "alias": "join_12"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_13.primary_key}", "alias": "join_13"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_14.primary_key}", "alias": "join_14"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_15.primary_key}", "alias": "join_15"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_16.primary_key}", "alias": "join_16"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_17.primary_key}", "alias": "join_17"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_18.primary_key}", "alias": "join_18"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_19.primary_key}", "alias": "join_19"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_20.primary_key}", "alias": "join_20"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"name": {"name": "name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone": {"name": "phone", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address": {"name": "address", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "postalzip": {"name": "postalzip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alphanumeric": {"name": "alphanumeric", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange": {"name": "numberrange", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "text": {"name": "text", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name1": {"name": "name1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email1": {"name": "email1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone1": {"name": "phone1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address1": {"name": "address1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "text1": {"name": "text1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange1": {"name": "numberrange1", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange2": {"name": "numberrange2", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange3": {"name": "numberrange3", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange4": {"name": "numberrange4", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange5": {"name": "numberrange5", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange6": {"name": "numberrange6", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange7": {"name": "numberrange7", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_key": {"name": "primary_key", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "foreign_key": {"name": "foreign_key", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track1": {"name": "track1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "autoincrement2": {"name": "autoincrement2", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange8": {"name": "numberrange8", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange9": {"name": "numberrange9", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange10": {"name": "numberrange10", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange11": {"name": "numberrange11", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "text2": {"name": "text2", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date1": {"name": "date1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time": {"name": "time", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date2": {"name": "date2", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date3": {"name": "date3", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date4": {"name": "date4", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date5": {"name": "date5", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date6": {"name": "date6", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date7": {"name": "date7", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date8": {"name": "date8", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange12": {"name": "numberrange12", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange13": {"name": "numberrange13", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date9": {"name": "date9", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date10": {"name": "date10", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange14": {"name": "numberrange14", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange15": {"name": "numberrange15", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date11": {"name": "date11", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_1.primary_key}", "alias": "join_1"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_2.primary_key}", "alias": "join_2"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_3.primary_key}", "alias": "join_3"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_4.primary_key}", "alias": "join_4"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_5.primary_key}", "alias": "join_5"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_6.primary_key}", "alias": "join_6"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_7.primary_key}", "alias": "join_7"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_8.primary_key}", "alias": "join_8"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_9.primary_key}", "alias": "join_9"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_10.primary_key}", "alias": "join_10"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_11.primary_key}", "alias": "join_11"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_12.primary_key}", "alias": "join_12"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_13.primary_key}", "alias": "join_13"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_14.primary_key}", "alias": "join_14"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_15.primary_key}", "alias": "join_15"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_16.primary_key}", "alias": "join_16"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_17.primary_key}", "alias": "join_17"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_18.primary_key}", "alias": "join_18"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_19.primary_key}", "alias": "join_19"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_20.primary_key}", "alias": "join_20"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/generated_a.yml", "build_path": null, "deferred": false, "unrendered_config": {"meta": {"joins": [{"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_1.primary_key}", "alias": "join_1"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_2.primary_key}", "alias": "join_2"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_3.primary_key}", "alias": "join_3"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_4.primary_key}", "alias": "join_4"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_5.primary_key}", "alias": "join_5"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_6.primary_key}", "alias": "join_6"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_7.primary_key}", "alias": "join_7"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_8.primary_key}", "alias": "join_8"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_9.primary_key}", "alias": "join_9"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_10.primary_key}", "alias": "join_10"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_11.primary_key}", "alias": "join_11"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_12.primary_key}", "alias": "join_12"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_13.primary_key}", "alias": "join_13"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_14.primary_key}", "alias": "join_14"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_15.primary_key}", "alias": "join_15"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_16.primary_key}", "alias": "join_16"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_17.primary_key}", "alias": "join_17"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_18.primary_key}", "alias": "join_18"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_19.primary_key}", "alias": "join_19"}, {"join": "generated_b", "sql_on": "${generated_a.foreign_key} = ${join_20.primary_key}", "alias": "join_20"}]}}, "created_at": 1720749448.338024, "relation_name": "DATAPAI.DATAPAI.generated_a", "raw_code": "select * from {{ ref('raw_generated') }}", "language": "sql", "refs": [{"name": "raw_generated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.raw_generated"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/generated_a.sql", "compiled": true, "compiled_code": "select * from DATAPAI.DATAPAI.raw_generated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.generated_b": {"database": "DATAPAI", "schema": "DATAPAI", "name": "generated_b", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/generated_b.sql", "original_file_path": "models/full-jaffle-shop/generated_b.sql", "unique_id": "model.datapai.generated_b", "fqn": ["datapai", "full-jaffle-shop", "generated_b"], "alias": "generated_b", "checksum": {"name": "sha256", "checksum": "e8e752491800dc99f7eb161c2da643e6ed449519285f42ef302453616e4b63a3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"hidden": true}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"name": {"name": "name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone": {"name": "phone", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address": {"name": "address", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "postalzip": {"name": "postalzip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alphanumeric": {"name": "alphanumeric", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange": {"name": "numberrange", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "text": {"name": "text", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name1": {"name": "name1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email1": {"name": "email1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone1": {"name": "phone1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address1": {"name": "address1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "text1": {"name": "text1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange1": {"name": "numberrange1", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange2": {"name": "numberrange2", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange3": {"name": "numberrange3", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange4": {"name": "numberrange4", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange5": {"name": "numberrange5", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange6": {"name": "numberrange6", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange7": {"name": "numberrange7", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "primary_key": {"name": "primary_key", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "foreign_key": {"name": "foreign_key", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track1": {"name": "track1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "autoincrement2": {"name": "autoincrement2", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange8": {"name": "numberrange8", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange9": {"name": "numberrange9", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange10": {"name": "numberrange10", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange11": {"name": "numberrange11", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "text2": {"name": "text2", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date1": {"name": "date1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "time": {"name": "time", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date2": {"name": "date2", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date3": {"name": "date3", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date4": {"name": "date4", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date5": {"name": "date5", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date6": {"name": "date6", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date7": {"name": "date7", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date8": {"name": "date8", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange12": {"name": "numberrange12", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange13": {"name": "numberrange13", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date9": {"name": "date9", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date10": {"name": "date10", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange14": {"name": "numberrange14", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numberrange15": {"name": "numberrange15", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date11": {"name": "date11", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"hidden": true}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/generated_b.yml", "build_path": null, "deferred": false, "unrendered_config": {"meta": {"hidden": true}}, "created_at": 1720749448.3995614, "relation_name": "DATAPAI.DATAPAI.generated_b", "raw_code": "select * from {{ ref('raw_generated') }}", "language": "sql", "refs": [{"name": "raw_generated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.raw_generated"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/generated_b.sql", "compiled": true, "compiled_code": "select * from DATAPAI.DATAPAI.raw_generated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.membership": {"database": "DATAPAI", "schema": "DATAPAI", "name": "membership", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/membership.sql", "original_file_path": "models/full-jaffle-shop/membership.sql", "unique_id": "model.datapai.membership", "fqn": ["datapai", "full-jaffle-shop", "membership"], "alias": "membership", "checksum": {"name": "sha256", "checksum": "d8e47ae9a85afe558c31d1fdb741bb73d12987a05e7326f4e443349aa1ab70c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"required_attributes": {"is_admin": "true"}, "joins": [{"join": "plan", "sql_on": "${membership.plan_id} = ${plan.id}"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"required_attributes": {"is_admin": "true"}, "joins": [{"join": "plan", "sql_on": "${membership.plan_id} = ${plan.id}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/membership.yml", "build_path": null, "deferred": false, "unrendered_config": {"meta": {"required_attributes": {"is_admin": "true"}, "joins": [{"join": "plan", "sql_on": "${membership.plan_id} = ${plan.id}"}]}}, "created_at": 1720749448.5008624, "relation_name": "DATAPAI.DATAPAI.membership", "raw_code": "SELECT * FROM {{ ref('raw_membership') }}", "language": "sql", "refs": [{"name": "raw_membership", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.raw_membership"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/membership.sql", "compiled": true, "compiled_code": "SELECT * FROM DATAPAI.DATAPAI.raw_membership", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.orders": {"database": "DATAPAI", "schema": "DATAPAI", "name": "orders", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/orders.sql", "original_file_path": "models/full-jaffle-shop/orders.sql", "unique_id": "model.datapai.orders", "fqn": ["datapai", "full-jaffle-shop", "orders"], "alias": "orders", "checksum": {"name": "sha256", "checksum": "b12be04a9ebe8b2a43ec0af9b6375587a0025a4d6e0550cd02035b77672f87c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "customers", "sql_on": "${customers.customer_id} = ${orders.customer_id}"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table has basic information about orders, as well as some derived\nfacts based on payments\n\n# Order Status\n\nOrders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |", "columns": {"order_id": {"name": "order_id", "description": "This is a unique identifier for an order", "meta": {"metrics": {"unique_order_count": {"type": "count_distinct"}, "completed_or_shipped_order_count": {"label": "Completed or Shipped Order Count", "type": "count_distinct", "filters": [{"status": ["completed", "shipped"]}]}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_completed": {"name": "is_completed", "description": "Boolean indicating if status is completed", "meta": {"metrics": {"fulfillment_rate": {"type": "average", "format": "percent", "round": 1, "sql": "CASE WHEN ${is_completed} THEN 1 ELSE 0 END", "show_underlying_values": ["amount", "customers.first_name"]}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to the customers table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "Date (UTC) that the order was placed", "meta": {"dimension": {"type": "date", "time_intervals": ["DAY", "WEEK", "MONTH", "YEAR"]}, "metrics": {"date_of_first_order": {"type": "min"}, "date_of_most_recent_order": {"type": "max"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "# Order Status\n\nOrders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total amount (USD) of the order", "meta": {"metrics": {"average_order_size": {"type": "average", "format": "usd", "round": 2}, "total_order_amount": {"type": "sum", "format": "usd", "round": 2}, "total_completed_order_amount": {"type": "sum", "format": "usd", "round": 2, "filters": [{"is_completed": "true"}]}, "total_completed_order_amount_eur": {"type": "sum", "format": "eur", "filters": [{"is_completed": "true"}]}, "total_non_completed_order_amount": {"type": "number", "format": "usd", "round": 2, "sql": "${total_order_amount}-${total_completed_order_amount}"}}, "dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_card_amount": {"name": "credit_card_amount", "description": "Amount of the order (AUD) paid for by credit card", "meta": {"dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coupon_amount": {"name": "coupon_amount", "description": "Amount of the order (AUD) paid for by coupon", "meta": {"dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bank_transfer_amount": {"name": "bank_transfer_amount", "description": "Amount of the order (AUD) paid for by bank transfer", "meta": {"dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gift_card_amount": {"name": "gift_card_amount", "description": "Amount of the order (AUD) paid for by gift card", "meta": {"dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "customers", "sql_on": "${customers.customer_id} = ${orders.customer_id}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"meta": {"joins": [{"join": "customers", "sql_on": "${customers.customer_id} = ${orders.customer_id}"}]}}, "created_at": 1720749448.5951276, "relation_name": "DATAPAI.DATAPAI.orders", "raw_code": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount,\n        {% endfor -%}\n\n        sum(amount) as total_amount\n\n    from payments\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n        case when status = 'completed' then TRUE else FALSE end AS is_completed,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{ payment_method }}_amount,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n    left join order_payments using (order_id)\n\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.stg_orders", "model.datapai.stg_payments"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/orders.sql", "compiled": true, "compiled_code": "\n\nwith orders as (\n\n    select * from DATAPAI.DATAPAI.stg_orders\n\n),\n\npayments as (\n\n    select * from DATAPAI.DATAPAI.stg_payments\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n        case when status = 'completed' then TRUE else FALSE end AS is_completed,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n    left join order_payments using (order_id)\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.payments": {"database": "DATAPAI", "schema": "DATAPAI", "name": "payments", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/payments.sql", "original_file_path": "models/full-jaffle-shop/payments.sql", "unique_id": "model.datapai.payments", "fqn": ["datapai", "full-jaffle-shop", "payments"], "alias": "payments", "checksum": {"name": "sha256", "checksum": "c10968678b2f62b9b11fe85a3d6ed5cdad06a24a913f950c9b43a10e9eabb440"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "orders", "sql_on": "${orders.order_id} = ${payments.order_id}"}, {"join": "customers", "sql_on": "${customers.customer_id} = ${orders.customer_id}"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table has information about individual payments", "columns": {"payment_id": {"name": "payment_id", "description": "This is a unique identifier for a payment", "meta": {"metrics": {"unique_payment_count": {"type": "count_distinct", "description": "count of all payments"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "Foreign key to the orders table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "Method of payment used, for example credit card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total amount (AUD) of the individual payment", "meta": {"metrics": {"total_revenue": {"type": "sum", "description": "Sum of all payments"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "orders", "sql_on": "${orders.order_id} = ${payments.order_id}"}, {"join": "customers", "sql_on": "${customers.customer_id} = ${orders.customer_id}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"meta": {"joins": [{"join": "orders", "sql_on": "${orders.order_id} = ${payments.order_id}"}, {"join": "customers", "sql_on": "${customers.customer_id} = ${orders.customer_id}"}]}}, "created_at": 1720749448.6047277, "relation_name": "DATAPAI.DATAPAI.payments", "raw_code": "select * from {{ ref('stg_payments') }}", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.stg_payments"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/payments.sql", "compiled": true, "compiled_code": "select * from DATAPAI.DATAPAI.stg_payments", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.plan": {"database": "DATAPAI", "schema": "DATAPAI", "name": "plan", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/plan.sql", "original_file_path": "models/full-jaffle-shop/plan.sql", "unique_id": "model.datapai.plan", "fqn": ["datapai", "full-jaffle-shop", "plan"], "alias": "plan", "checksum": {"name": "sha256", "checksum": "cf1cf8f86b198236c9dc844dca58c4e3b0d6919feea041878797008a0a243e41"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"required_attributes": {"is_admin": "true"}}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_name": {"name": "plan_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "", "meta": {"additional_dimensions": {"created_by": {"type": "string", "sql": "${plan.metadata}->>'created_by'"}, "created_by_first_name": {"type": "string", "sql": "SPLIT_PART(${created_by}, ' ', 1)"}, "created_by_last_name": {"type": "string", "sql": "SPLIT_PART(${created_by}, ' ', 2)"}}, "metrics": {"creator_count": {"type": "count", "sql": "${created_by}"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"required_attributes": {"is_admin": "true"}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/plan.yml", "build_path": null, "deferred": false, "unrendered_config": {"meta": {"required_attributes": {"is_admin": "true"}}}, "created_at": 1720749448.548156, "relation_name": "DATAPAI.DATAPAI.plan", "raw_code": "SELECT * FROM {{ ref('raw_plan') }}", "language": "sql", "refs": [{"name": "raw_plan", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.raw_plan"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/plan.sql", "compiled": true, "compiled_code": "SELECT * FROM DATAPAI.DATAPAI.raw_plan", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.tracks": {"database": "DATAPAI", "schema": "DATAPAI", "name": "tracks", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/tracks.sql", "original_file_path": "models/full-jaffle-shop/tracks.sql", "unique_id": "model.datapai.tracks", "fqn": ["datapai", "full-jaffle-shop", "tracks"], "alias": "tracks", "checksum": {"name": "sha256", "checksum": "d5809b291eb1570c908a007d726763ae3acd7c8847e6e83cca0453ecfbebd5cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"label": "Timestamp", "type": "timestamp", "time_intervals": ["RAW", "MILLISECOND", "SECOND", "MINUTE", "HOUR", "DAY", "DAY_OF_WEEK_INDEX", "DAY_OF_WEEK_NAME", "DAY_OF_MONTH_NUM", "DAY_OF_YEAR_NUM", "WEEK", "WEEK_NUM", "MONTH", "MONTH_NUM", "MONTH_NAME", "QUARTER", "QUARTER_NUM", "QUARTER_NAME", "YEAR", "YEAR_NUM", "HOUR_OF_DAY_NUM", "MINUTE_OF_HOUR_NUM"]}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "", "meta": {"dimension": {"type": "string"}, "metrics": {"unique_event_count": {"type": "count_distinct"}, "event_count": {"type": "count"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_text": {"name": "event_text", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "context_app_version": {"name": "context_app_version", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/tracks.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720749448.7352123, "relation_name": "DATAPAI.DATAPAI.tracks", "raw_code": "SELECT * FROM {{ ref('raw_tracks') }}", "language": "sql", "refs": [{"name": "raw_tracks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.raw_tracks"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/tracks.sql", "compiled": true, "compiled_code": "SELECT * FROM DATAPAI.DATAPAI.raw_tracks", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.users": {"database": "DATAPAI", "schema": "DATAPAI", "name": "users", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/users.sql", "original_file_path": "models/full-jaffle-shop/users.sql", "unique_id": "model.datapai.users", "fqn": ["datapai", "full-jaffle-shop", "users"], "alias": "users", "checksum": {"name": "sha256", "checksum": "226934ec399162669c7073b31cdbbecab0929a88b609784db0b395fc571e47ce"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"sql_filter": "customer_id = ${ld.attr.customer_id}"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"customer_id": {"name": "customer_id", "description": "This is a unique identifier for a customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "Customer's first name. PII.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Customer's last name. PII.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp (UTC) when customer was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"sql_filter": "customer_id = ${ld.attr.customer_id}"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/users.yml", "build_path": null, "deferred": false, "unrendered_config": {"meta": {"sql_filter": "customer_id = ${ld.attr.customer_id}"}}, "created_at": 1720749448.742114, "relation_name": "DATAPAI.DATAPAI.users", "raw_code": "SELECT * FROM {{ ref('stg_customers') }}", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.stg_customers"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/users.sql", "compiled": true, "compiled_code": "SELECT * FROM DATAPAI.DATAPAI.stg_customers", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.customers": {"database": "DATAPAI", "schema": "DATAPAI", "name": "customers", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/customers.sql", "original_file_path": "models/full-jaffle-shop/customers.sql", "unique_id": "model.datapai.customers", "fqn": ["datapai", "full-jaffle-shop", "customers"], "alias": "customers", "checksum": {"name": "sha256", "checksum": "d54b2f448066e567c090ec226408326650cf982c546ac8d0c2d76ef69cd27df4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "membership", "hidden": true, "sql_on": "${customers.customer_id} = ${membership.customer_id}"}, {"join": "plan", "sql_on": "${membership.plan_id} = ${plan.id}"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "# Customers\n\nThis table has basic information about a customer, as well as some derived\nfacts based on a customer's orders\n", "columns": {"customer_id": {"name": "customer_id", "description": "This is a unique identifier for a customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "Customer's first name. PII.", "meta": {"dimension": {"type": "string", "urls": [{"label": "URL from value", "url": "https://example.com/company/${value.formatted | url_encode }"}, {"label": "URL from row value", "url": "https://example.com/company/${row.customers.customer_id.raw | url_encode }"}, {"label": "Invalid URL with bad reference", "url": "https://example.com/company/${row.customer_id.raw | url_encode }"}]}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Customer's last name. PII.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "age": {"name": "age", "description": "Customer's age", "meta": {"dimension": {"type": "number", "required_attributes": {"is_admin": "true"}}, "metrics": {"average_age": {"type": "average", "description": "Average age of customers"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp (UTC) when customer was created", "meta": {"metrics": {"date_of_first_created_customer": {"type": "min"}, "date_of_most_recent_created_customer": {"type": "max"}}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_order": {"name": "first_order", "description": "Date of the customers first order", "meta": {"dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_order": {"name": "most_recent_order", "description": "Date of the customers most recent order", "meta": {"dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_since_last_order": {"name": "days_since_last_order", "description": "Number of days since the customers last order", "meta": {"dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_between_created_and_first_order": {"name": "days_between_created_and_first_order", "description": "Number of days between the customer being created and making their first order", "meta": {"dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_orders": {"name": "number_of_orders", "description": "", "meta": {"dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_lifetime_value": {"name": "customer_lifetime_value", "description": "", "meta": {"dimension": {"hidden": true}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "membership", "hidden": true, "sql_on": "${customers.customer_id} = ${membership.customer_id}"}, {"join": "plan", "sql_on": "${membership.plan_id} = ${plan.id}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"meta": {"joins": [{"join": "membership", "hidden": true, "sql_on": "${customers.customer_id} = ${membership.customer_id}"}, {"join": "plan", "sql_on": "${membership.plan_id} = ${plan.id}"}]}}, "created_at": 1720749448.5676699, "relation_name": "DATAPAI.DATAPAI.customers", "raw_code": "with customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\ncustomer_orders as (\n\n    select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by 1\n\n),\n\ncustomer_orders_latest AS (\n  SELECT\n  customer_id,\n  MAX(most_recent_order) OVER(PARTITION BY NULL) AS latest_order -- getting the latest order date from all customers\n\n  FROM customer_orders\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders using (order_id)\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        30 as age, -- fixed age is filtered using required_attributes on schema.yml\n        customers.created,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value,\n        customer_orders.first_order::date - customers.created::date AS days_between_created_and_first_order,\n        --EXTRACT(day FROM customer_orders.most_recent_order::timestamp - customer_orders_latest.latest_order::timestamp) AS days_since_last_order\n        customer_orders.most_recent_order::date - customer_orders_latest.latest_order::date AS days_since_last_order\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n    left join customer_payments using (customer_id)\n\n    LEFT JOIN customer_orders_latest USING(customer_id)\n\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}, {"name": "stg_orders", "package": null, "version": null}, {"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.stg_customers", "model.datapai.stg_orders", "model.datapai.stg_payments"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/customers.sql", "compiled": true, "compiled_code": "with customers as (\n\n    select * from DATAPAI.DATAPAI.stg_customers\n\n),\n\norders as (\n\n    select * from DATAPAI.DATAPAI.stg_orders\n\n),\n\npayments as (\n\n    select * from DATAPAI.DATAPAI.stg_payments\n\n),\n\ncustomer_orders as (\n\n    select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by 1\n\n),\n\ncustomer_orders_latest AS (\n  SELECT\n  customer_id,\n  MAX(most_recent_order) OVER(PARTITION BY NULL) AS latest_order -- getting the latest order date from all customers\n\n  FROM customer_orders\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders using (order_id)\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        30 as age, -- fixed age is filtered using required_attributes on schema.yml\n        customers.created,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value,\n        customer_orders.first_order::date - customers.created::date AS days_between_created_and_first_order,\n        --EXTRACT(day FROM customer_orders.most_recent_order::timestamp - customer_orders_latest.latest_order::timestamp) AS days_since_last_order\n        customer_orders.most_recent_order::date - customer_orders_latest.latest_order::date AS days_since_last_order\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n    left join customer_payments using (customer_id)\n\n    LEFT JOIN customer_orders_latest USING(customer_id)\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_customers": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_customers", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/staging/stg_customers.sql", "original_file_path": "models/full-jaffle-shop/staging/stg_customers.sql", "unique_id": "model.datapai.stg_customers", "fqn": ["datapai", "full-jaffle-shop", "staging", "stg_customers"], "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "fa1d9b94f34b736385e77bc2c92fe2391a8d16134a67d34cc62717031fb5b79c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/staging/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720749448.7459674, "relation_name": "DATAPAI.DATAPAI.stg_customers", "raw_code": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name,\n        created\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [{"name": "raw_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.raw_customers"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/stg_customers.sql", "compiled": true, "compiled_code": "with source as (\n    select * from DATAPAI.DATAPAI.raw_customers\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name,\n        created\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_orders": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_orders", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/staging/stg_orders.sql", "original_file_path": "models/full-jaffle-shop/staging/stg_orders.sql", "unique_id": "model.datapai.stg_orders", "fqn": ["datapai", "full-jaffle-shop", "staging", "stg_orders"], "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "f4f881cb09d2c4162200fc331d7401df6d1abd4fed492554a7db70dede347108"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/staging/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720749448.7497842, "relation_name": "DATAPAI.DATAPAI.stg_orders", "raw_code": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.raw_orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/stg_orders.sql", "compiled": true, "compiled_code": "with source as (\n    select * from DATAPAI.DATAPAI.raw_orders\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_payments": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_payments", "resource_type": "model", "package_name": "datapai", "path": "full-jaffle-shop/staging/stg_payments.sql", "original_file_path": "models/full-jaffle-shop/staging/stg_payments.sql", "unique_id": "model.datapai.stg_payments", "fqn": ["datapai", "full-jaffle-shop", "staging", "stg_payments"], "alias": "stg_payments", "checksum": {"name": "sha256", "checksum": "c9b3d02246340a02ea81f268e5ca43187ab23d25f79aa8b47de253331f5c7297"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/full-jaffle-shop/staging/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720749448.7536914, "relation_name": "DATAPAI.DATAPAI.stg_payments", "raw_code": "with source as (\n    \n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        --`amount` is currently stored in cents, so we convert it to dollars\n        amount::decimal  / 100 as amount \n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [{"name": "raw_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.raw_payments"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/stg_payments.sql", "compiled": true, "compiled_code": "with source as (\n    select * from DATAPAI.DATAPAI.raw_payments\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        --`amount` is currently stored in cents, so we convert it to dollars\n        amount::decimal  / 100 as amount \n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.dim_customer": {"database": "DATAPAI", "schema": "DATAPAI", "name": "dim_customer", "resource_type": "model", "package_name": "datapai", "path": "chinook/intermediate/dim_customer.sql", "original_file_path": "models/chinook/intermediate/dim_customer.sql", "unique_id": "model.datapai.dim_customer", "fqn": ["datapai", "chinook", "intermediate", "dim_customer"], "alias": "dim_customer", "checksum": {"name": "sha256", "checksum": "7f30d2146e48836a81eaa50cb5d58c8a3d5c05b076c0bdee109cf8d2d31aa55e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dim"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["dim"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "dim"}, "created_at": 1720749446.5534182, "relation_name": "DATAPAI.DATAPAI.dim_customer", "raw_code": "{{ config(materialized=\"table\", tags=\"dim\") }}\n\n     WITH customer AS (\n        SELECT customer.*,\n               employee.employee_first_name AS support_rep_first_name,\n               employee.employee_last_name AS support_rep_last_name\n          FROM {{ ref('stg_customer') }} customer\n     LEFT JOIN {{ ref('stg_employee') }} employee USING (employee_id)\n     )\n\n     SELECT * FROM customer", "language": "sql", "refs": [{"name": "stg_customer", "package": null, "version": null}, {"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.stg_customer", "model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/intermediate/dim_customer.sql", "compiled": true, "compiled_code": "\n\n     WITH customer AS (\n        SELECT customer.*,\n               employee.employee_first_name AS support_rep_first_name,\n               employee.employee_last_name AS support_rep_last_name\n          FROM DATAPAI.DATAPAI.stg_customer customer\n     LEFT JOIN DATAPAI.DATAPAI.stg_employee employee USING (employee_id)\n     )\n\n     SELECT * FROM customer", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.fct_invoice": {"database": "DATAPAI", "schema": "DATAPAI", "name": "fct_invoice", "resource_type": "model", "package_name": "datapai", "path": "chinook/intermediate/fct_invoice.sql", "original_file_path": "models/chinook/intermediate/fct_invoice.sql", "unique_id": "model.datapai.fct_invoice", "fqn": ["datapai", "chinook", "intermediate", "fct_invoice"], "alias": "fct_invoice", "checksum": {"name": "sha256", "checksum": "8118f52dfdfa78321666bf44ceea195424c6e5db7e15f7690dc793a3627332fa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["fact"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["fact"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "fact"}, "created_at": 1720749446.56896, "relation_name": "DATAPAI.DATAPAI.fct_invoice", "raw_code": "{{ config(materialized=\"table\", tags=\"fact\") }}\n\n    SELECT * FROM {{ ref('stg_invoice') }}", "language": "sql", "refs": [{"name": "stg_invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.stg_invoice"]}, "compiled_path": "target/compiled/datapai/models/chinook/intermediate/fct_invoice.sql", "compiled": true, "compiled_code": "\n\n    SELECT * FROM DATAPAI.DATAPAI.stg_invoice", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "seed.datapai.raw_customers": {"database": "DATAPAI", "schema": "DATAPAI", "name": "raw_customers", "resource_type": "seed", "package_name": "datapai", "path": "raw_customers.csv", "original_file_path": "seeds/raw_customers.csv", "unique_id": "seed.datapai.raw_customers", "fqn": ["datapai", "raw_customers"], "alias": "raw_customers", "checksum": {"name": "sha256", "checksum": "be3ff2b6a70462fe21349f0d22c4cf0f08df60712a5854b77e519dc00f701aa4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720749446.7044003, "relation_name": "DATAPAI.DATAPAI.raw_customers", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.raw_events": {"database": "DATAPAI", "schema": "DATAPAI", "name": "raw_events", "resource_type": "seed", "package_name": "datapai", "path": "raw_events.csv", "original_file_path": "seeds/raw_events.csv", "unique_id": "seed.datapai.raw_events", "fqn": ["datapai", "raw_events"], "alias": "raw_events", "checksum": {"name": "sha256", "checksum": "2eaf4f001d77e16c181761d2227d1ea0b3949d38f9e2ed292b2b95b6487887fc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"timestamp_tz": "timestamp_tz", "timestamp_ltz": "timestamp_ltz", "timestamp_ntz": "timestamp_ntz"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://seeds/seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "column_types": {"timestamp_tz": "timestamp_tz", "timestamp_ltz": "timestamp_ltz", "timestamp_ntz": "timestamp_ntz"}}, "created_at": 1720749449.152092, "relation_name": "DATAPAI.DATAPAI.raw_events", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.raw_generated": {"database": "DATAPAI", "schema": "DATAPAI", "name": "raw_generated", "resource_type": "seed", "package_name": "datapai", "path": "raw_generated.csv", "original_file_path": "seeds/raw_generated.csv", "unique_id": "seed.datapai.raw_generated", "fqn": ["datapai", "raw_generated"], "alias": "raw_generated", "checksum": {"name": "sha256", "checksum": "ef4b6acea360b30d3b6382d0e63f3dcd0abda7ece55a3c8912571d23d6480544"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"autoincrement2": "integer", "date": "VARCHAR(16777216)", "date1": "VARCHAR(16777216)", "date2": "VARCHAR(16777216)", "date3": "VARCHAR(16777216)", "date4": "VARCHAR(16777216)", "date5": "VARCHAR(16777216)", "date6": "VARCHAR(16777216)", "date7": "VARCHAR(16777216)", "date8": "VARCHAR(16777216)", "date9": "VARCHAR(16777216)", "date10": "VARCHAR(16777216)", "date11": "VARCHAR(16777216)", "foreign_key": "integer", "numberrange": "integer", "numberrange1": "integer", "numberrange2": "integer", "numberrange3": "integer", "numberrange4": "integer", "numberrange5": "integer", "numberrange6": "integer", "numberrange7": "integer", "numberrange8": "integer", "numberrange9": "integer", "numberrange10": "integer", "numberrange11": "integer", "numberrange12": "integer", "numberrange13": "integer", "numberrange14": "integer", "numberrange15": "integer", "primary_key": "integer", "time": "time"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://seeds/seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false, "column_types": {"autoincrement2": "integer", "date": "VARCHAR(16777216)", "date1": "VARCHAR(16777216)", "date2": "VARCHAR(16777216)", "date3": "VARCHAR(16777216)", "date4": "VARCHAR(16777216)", "date5": "VARCHAR(16777216)", "date6": "VARCHAR(16777216)", "date7": "VARCHAR(16777216)", "date8": "VARCHAR(16777216)", "date9": "VARCHAR(16777216)", "date10": "VARCHAR(16777216)", "date11": "VARCHAR(16777216)", "foreign_key": "integer", "numberrange": "integer", "numberrange1": "integer", "numberrange2": "integer", "numberrange3": "integer", "numberrange4": "integer", "numberrange5": "integer", "numberrange6": "integer", "numberrange7": "integer", "numberrange8": "integer", "numberrange9": "integer", "numberrange10": "integer", "numberrange11": "integer", "numberrange12": "integer", "numberrange13": "integer", "numberrange14": "integer", "numberrange15": "integer", "primary_key": "integer", "time": "time"}}, "created_at": 1720749449.1732624, "relation_name": "DATAPAI.DATAPAI.raw_generated", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.raw_membership": {"database": "DATAPAI", "schema": "DATAPAI", "name": "raw_membership", "resource_type": "seed", "package_name": "datapai", "path": "raw_membership.csv", "original_file_path": "seeds/raw_membership.csv", "unique_id": "seed.datapai.raw_membership", "fqn": ["datapai", "raw_membership"], "alias": "raw_membership", "checksum": {"name": "sha256", "checksum": "d4578980400fda703f6652fcb77f2c49a132dbb1815d8ebe9a744a1269124c18"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720749446.717672, "relation_name": "DATAPAI.DATAPAI.raw_membership", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.raw_orders": {"database": "DATAPAI", "schema": "DATAPAI", "name": "raw_orders", "resource_type": "seed", "package_name": "datapai", "path": "raw_orders.csv", "original_file_path": "seeds/raw_orders.csv", "unique_id": "seed.datapai.raw_orders", "fqn": ["datapai", "raw_orders"], "alias": "raw_orders", "checksum": {"name": "sha256", "checksum": "ddecd7adf70a07a88b9c302aec2a03fce615b925c2c06f2d5ef99a5c97b41250"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720749446.721905, "relation_name": "DATAPAI.DATAPAI.raw_orders", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.raw_payments": {"database": "DATAPAI", "schema": "DATAPAI", "name": "raw_payments", "resource_type": "seed", "package_name": "datapai", "path": "raw_payments.csv", "original_file_path": "seeds/raw_payments.csv", "unique_id": "seed.datapai.raw_payments", "fqn": ["datapai", "raw_payments"], "alias": "raw_payments", "checksum": {"name": "sha256", "checksum": "26c742f6409296bbddf0bbaa1da129241b25b0cffc00da36cc103da3ddf3547a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720749446.7272139, "relation_name": "DATAPAI.DATAPAI.raw_payments", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.raw_plan": {"database": "DATAPAI", "schema": "DATAPAI", "name": "raw_plan", "resource_type": "seed", "package_name": "datapai", "path": "raw_plan.csv", "original_file_path": "seeds/raw_plan.csv", "unique_id": "seed.datapai.raw_plan", "fqn": ["datapai", "raw_plan"], "alias": "raw_plan", "checksum": {"name": "sha256", "checksum": "01ea92e08ae3dc0ef40504e31a5589449cbd1dcb4f0730b4c487d8063e3de8d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720749446.7316089, "relation_name": "DATAPAI.DATAPAI.raw_plan", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.raw_tracks": {"database": "DATAPAI", "schema": "DATAPAI", "name": "raw_tracks", "resource_type": "seed", "package_name": "datapai", "path": "raw_tracks.csv", "original_file_path": "seeds/raw_tracks.csv", "unique_id": "seed.datapai.raw_tracks", "fqn": ["datapai", "raw_tracks"], "alias": "raw_tracks", "checksum": {"name": "path", "checksum": "seeds/raw_tracks.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720749446.7361841, "relation_name": "DATAPAI.DATAPAI.raw_tracks", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "model.elementary.alerts_anomaly_detection": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "alerts_anomaly_detection", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_anomaly_detection.sql", "original_file_path": "models/edr/alerts/alerts_anomaly_detection.sql", "unique_id": "model.elementary.alerts_anomaly_detection", "fqn": ["elementary", "edr", "alerts", "alerts_anomaly_detection"], "alias": "alerts_anomaly_detection", "checksum": {"name": "sha256", "checksum": "0d2bb9c33ded81e6501643abeeacde1b21695f406b861f748923e4bd9ce0c4c8"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A view that is used by the Elementary CLI to generate alerts on data anomalies detected using the elementary anomaly detection tests. The view filters alerts according to configuration.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/alerts_views.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749449.2800748, "relation_name": "DATAPAI.DATAPAI_audit.alerts_anomaly_detection", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind =False\n  )\n}}\n\nwith elementary_test_results as (\n    select * from {{ ref('elementary_test_results') }}\n),\n\nalerts_anomaly_detection as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where {{ not elementary.get_config_var('disable_test_alerts') }} and lower(status) != 'pass' {%- if elementary.get_config_var('disable_warn_alerts') -%} and lower(status) != 'warn' {%- endif -%} {%- if elementary.get_config_var('disable_skipped_test_alerts') -%} and lower(status) != 'skipped' {%- endif -%} and test_type = 'anomaly_detection'\n)\n\nselect * from alerts_anomaly_detection", "language": "sql", "refs": [{"name": "elementary_test_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var"], "nodes": ["model.elementary.elementary_test_results"]}, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_anomaly_detection.sql", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from DATAPAI.DATAPAI_audit.elementary_test_results\n),\n\nalerts_anomaly_detection as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'anomaly_detection'\n)\n\nselect * from alerts_anomaly_detection", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.alerts_dbt_models": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "alerts_dbt_models", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_dbt_models.sql", "original_file_path": "models/edr/alerts/alerts_dbt_models.sql", "unique_id": "model.elementary.alerts_dbt_models", "fqn": ["elementary", "edr", "alerts", "alerts_dbt_models"], "alias": "alerts_dbt_models", "checksum": {"name": "sha256", "checksum": "d039f6459f8b9cb0d6f1e4cf653de020cc90eb035e31107860dfbaea302304f9"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A view that is used by the Elementary CLI to generate models alerts, including all the fields the alert will include such as owner, tags, error message, etc. It joins data about models and snapshots run results, and filters alerts according to configuration.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/alerts_views.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749449.2784684, "relation_name": "DATAPAI.DATAPAI_audit.alerts_dbt_models", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith error_models as (\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias \n    from {{ ref('model_run_results') }}\n  \n    union all\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias  \n  from {{ ref('snapshot_run_results') }}\n)\n\n\nselect model_execution_id as alert_id,\n       unique_id,\n       generated_at as detected_at,\n       database_name,\n       materialization,\n       path,\n       original_path,\n       schema_name,\n       message,\n       owner as owners,\n       tags,\n       alias,\n       status,\n       full_refresh\nfrom error_models\nwhere {{ not elementary.get_config_var('disable_model_alerts') }} and lower(status) != 'success' {%- if elementary.get_config_var('disable_skipped_model_alerts') -%} and lower(status) != 'skipped' {%- endif -%}", "language": "sql", "refs": [{"name": "model_run_results", "package": null, "version": null}, {"name": "snapshot_run_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var"], "nodes": ["model.elementary.model_run_results", "model.elementary.snapshot_run_results"]}, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_dbt_models.sql", "compiled": true, "compiled_code": "\n\nwith error_models as (\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias \n    from DATAPAI.DATAPAI_audit.model_run_results\n  \n    union all\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias  \n  from DATAPAI.DATAPAI_audit.snapshot_run_results\n)\n\n\nselect model_execution_id as alert_id,\n       unique_id,\n       generated_at as detected_at,\n       database_name,\n       materialization,\n       path,\n       original_path,\n       schema_name,\n       message,\n       owner as owners,\n       tags,\n       alias,\n       status,\n       full_refresh\nfrom error_models\nwhere True and lower(status) != 'success'and lower(status) != 'skipped'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.alerts_dbt_source_freshness": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "alerts_dbt_source_freshness", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_dbt_source_freshness.sql", "original_file_path": "models/edr/alerts/alerts_dbt_source_freshness.sql", "unique_id": "model.elementary.alerts_dbt_source_freshness", "fqn": ["elementary", "edr", "alerts", "alerts_dbt_source_freshness"], "alias": "alerts_dbt_source_freshness", "checksum": {"name": "sha256", "checksum": "ca4eca45129d0e51d368c4c9cc6818a1258290ac531146f3e8a4a61871ff71df"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749447.016154, "relation_name": "DATAPAI.DATAPAI_audit.alerts_dbt_source_freshness", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith results as (\n  select * from {{ ref('dbt_source_freshness_results') }}\n),\n\nsources as (\n  select * from {{ ref('dbt_sources') }}\n)\n\nselect\n  results.source_freshness_execution_id as alert_id,\n  results.max_loaded_at,\n  results.snapshotted_at,\n  results.generated_at as detected_at,\n  results.max_loaded_at_time_ago_in_s,\n  results.status,\n  results.error,\n  sources.unique_id,\n  sources.database_name,\n  sources.schema_name,\n  sources.source_name,\n  sources.identifier,\n  sources.freshness_error_after,\n  sources.freshness_warn_after,\n  sources.freshness_filter,\n  sources.tags,\n  sources.meta,\n  sources.owner,\n  sources.package_name,\n  sources.path\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere {{ not elementary.get_config_var('disable_source_freshness_alerts') }} and lower(status) != 'pass'", "language": "sql", "refs": [{"name": "dbt_source_freshness_results", "package": null, "version": null}, {"name": "dbt_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var"], "nodes": ["model.elementary.dbt_source_freshness_results", "model.elementary.dbt_sources"]}, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_dbt_source_freshness.sql", "compiled": true, "compiled_code": "\n\nwith results as (\n  select * from DATAPAI.DATAPAI_audit.dbt_source_freshness_results\n),\n\nsources as (\n  select * from DATAPAI.DATAPAI_audit.dbt_sources\n)\n\nselect\n  results.source_freshness_execution_id as alert_id,\n  results.max_loaded_at,\n  results.snapshotted_at,\n  results.generated_at as detected_at,\n  results.max_loaded_at_time_ago_in_s,\n  results.status,\n  results.error,\n  sources.unique_id,\n  sources.database_name,\n  sources.schema_name,\n  sources.source_name,\n  sources.identifier,\n  sources.freshness_error_after,\n  sources.freshness_warn_after,\n  sources.freshness_filter,\n  sources.tags,\n  sources.meta,\n  sources.owner,\n  sources.package_name,\n  sources.path\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere True and lower(status) != 'pass'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.alerts_dbt_tests": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "alerts_dbt_tests", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_dbt_tests.sql", "original_file_path": "models/edr/alerts/alerts_dbt_tests.sql", "unique_id": "model.elementary.alerts_dbt_tests", "fqn": ["elementary", "edr", "alerts", "alerts_dbt_tests"], "alias": "alerts_dbt_tests", "checksum": {"name": "sha256", "checksum": "b8545517eaa84c583a0d86a65b6d5881a6de9b7f104329bfbd8e467f4072bca9"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A view that is used by the Elementary CLI to generate dbt tests alerts, including all the fields the alert will include such as owner, tags, error message, etc. This view includes data about all dbt tests except elementary tests. It filters alerts according to configuration.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/alerts_views.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749449.2792802, "relation_name": "DATAPAI.DATAPAI_audit.alerts_dbt_tests", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith elementary_test_results as (\n    select * from {{ ref('elementary_test_results') }}\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where {{ not elementary.get_config_var('disable_test_alerts') }} and lower(status) != 'pass' {%- if elementary.get_config_var('disable_warn_alerts') -%} and lower(status) != 'warn' {%- endif -%} {%- if elementary.get_config_var('disable_skipped_test_alerts') -%} and lower(status) != 'skipped' {%- endif -%} and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests", "language": "sql", "refs": [{"name": "elementary_test_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var"], "nodes": ["model.elementary.elementary_test_results"]}, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_dbt_tests.sql", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from DATAPAI.DATAPAI_audit.elementary_test_results\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.alerts_schema_changes": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "alerts_schema_changes", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_schema_changes.sql", "original_file_path": "models/edr/alerts/alerts_schema_changes.sql", "unique_id": "model.elementary.alerts_schema_changes", "fqn": ["elementary", "edr", "alerts", "alerts_schema_changes"], "alias": "alerts_schema_changes", "checksum": {"name": "sha256", "checksum": "96c9a42ca06d726bff66c903a314b13c6beb1641347aba54d93710161d2391e1"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A view that is used by the Elementary CLI to generate alerts on schema changes detected using elementary tests. The view filters alerts according to configuration.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/alerts_views.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "enabled": true, "schema": "audit"}, "created_at": 1720749449.280893, "relation_name": "DATAPAI.DATAPAI_audit.alerts_schema_changes", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False,\n    enabled = target.type != 'databricks' and target.type != 'spark' | as_bool()\n  )\n}}\n\n\nwith elementary_test_results as (\n    select * from {{ ref('elementary_test_results') }}\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where {{ not elementary.get_config_var('disable_test_alerts') }} and lower(status) != 'pass' {%- if elementary.get_config_var('disable_warn_alerts') -%} and lower(status) != 'warn' {%- endif -%} {%- if elementary.get_config_var('disable_skipped_test_alerts') -%} and lower(status) != 'skipped' {%- endif -%} and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes", "language": "sql", "refs": [{"name": "elementary_test_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var"], "nodes": ["model.elementary.elementary_test_results"]}, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_schema_changes.sql", "compiled": true, "compiled_code": "\n\n\nwith elementary_test_results as (\n    select * from DATAPAI.DATAPAI_audit.elementary_test_results\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.anomaly_threshold_sensitivity": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "anomaly_threshold_sensitivity", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "original_file_path": "models/edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "unique_id": "model.elementary.anomaly_threshold_sensitivity", "fqn": ["elementary", "edr", "data_monitoring", "anomaly_detection", "anomaly_threshold_sensitivity"], "alias": "anomaly_threshold_sensitivity", "checksum": {"name": "sha256", "checksum": "b0e4310abc62902b98a6ad6fd465713d5aeb5e884b52594e8a1b2ff6429b1b2d"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a view on `metrics_anomaly_score` that calculates if values of metrics from latest runs would have been considered anomalies in different anomaly scores. This can help you decide if there is a need to adjust the `anomaly_score_threshold`.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749449.4252818, "relation_name": "DATAPAI.DATAPAI_audit.anomaly_threshold_sensitivity", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith metrics_anomaly_score as (\n\n    select * from {{ ref('metrics_anomaly_score') }}\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        training_stddev as metric_stddev,\n        anomaly_score,\n        case when abs(anomaly_score) >= 1.5 then true else false end as {{ elementary.edr_quote_column('is_anomaly_1_5') }},\n        case when abs(anomaly_score) >= 2 then true else false end as {{ elementary.edr_quote_column('is_anomaly_2') }},\n        case when abs(anomaly_score) >= 2.5 then true else false end as {{ elementary.edr_quote_column('is_anomaly_2_5') }},\n        case when abs(anomaly_score) >= 3 then true else false end as {{ elementary.edr_quote_column('is_anomaly_3') }},\n        case when abs(anomaly_score) >= 3.5 then true else false end as {{ elementary.edr_quote_column('is_anomaly_3_5') }},\n        case when abs(anomaly_score) >= 4 then true else false end as {{ elementary.edr_quote_column('is_anomaly_4') }},\n        case when abs(anomaly_score) >= 4.5 then true else false end as {{ elementary.edr_quote_column('is_anomaly_4_5') }}\n    from metrics_anomaly_score\n    where abs(anomaly_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "language": "sql", "refs": [{"name": "metrics_anomaly_score", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.edr_quote_column"], "nodes": ["model.elementary.metrics_anomaly_score"]}, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "compiled": true, "compiled_code": "\n\nwith metrics_anomaly_score as (\n\n    select * from DATAPAI.DATAPAI_audit.metrics_anomaly_score\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        training_stddev as metric_stddev,\n        anomaly_score,\n        case when abs(anomaly_score) >= 1.5 then true else false end as \"is_anomaly_1_5\",\n        case when abs(anomaly_score) >= 2 then true else false end as \"is_anomaly_2\",\n        case when abs(anomaly_score) >= 2.5 then true else false end as \"is_anomaly_2_5\",\n        case when abs(anomaly_score) >= 3 then true else false end as \"is_anomaly_3\",\n        case when abs(anomaly_score) >= 3.5 then true else false end as \"is_anomaly_3_5\",\n        case when abs(anomaly_score) >= 4 then true else false end as \"is_anomaly_4\",\n        case when abs(anomaly_score) >= 4.5 then true else false end as \"is_anomaly_4_5\"\n    from metrics_anomaly_score\n    where abs(anomaly_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.metrics_anomaly_score": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "metrics_anomaly_score", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "original_file_path": "models/edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "unique_id": "model.elementary.metrics_anomaly_score", "fqn": ["elementary", "edr", "data_monitoring", "anomaly_detection", "metrics_anomaly_score"], "alias": "metrics_anomaly_score", "checksum": {"name": "sha256", "checksum": "abfd27ad29f3a4da67885dfd0c82ed98c043958f705c4258175db6c306d0795e"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a view on `data_monitoring_metrics` that runs the same query the anomaly detection tests run to calculate anomaly scores. The purpose of this view is to provide visibility to the results of anomaly detection tests.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749449.424472, "relation_name": "DATAPAI.DATAPAI_audit.metrics_anomaly_score", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith data_monitoring_metrics as (\n\n    select * from {{ ref('data_monitoring_metrics') }}\n\n),\n\ntime_window_aggregation as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        updated_at,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n    from data_monitoring_metrics\n    {{ dbt_utils.group_by(12) }}\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        case\n            when training_stddev is null then null\n            when training_stddev = 0 then 0\n            else (metric_value - training_avg) / (training_stddev)\n        end as anomaly_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and training_set_size >= {{ elementary.get_config_var('min_training_set_size') }}\n            and bucket_end >= {{ elementary.edr_timeadd('day', '-7', elementary.edr_date_trunc('day', elementary.edr_current_timestamp())) }}\n    {{ dbt_utils.group_by(15) }}\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        anomaly_score,\n        latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        updated_at,\n        case\n            when abs(anomaly_score) > {{ elementary.get_config_var('anomaly_sensitivity') }} then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "data_monitoring_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.elementary.get_config_var", "macro.elementary.edr_current_timestamp", "macro.elementary.edr_date_trunc", "macro.elementary.edr_timeadd"], "nodes": ["model.elementary.data_monitoring_metrics"]}, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from DATAPAI.DATAPAI_audit.data_monitoring_metrics\n\n),\n\ntime_window_aggregation as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        updated_at,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n    from data_monitoring_metrics\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        case\n            when training_stddev is null then null\n            when training_stddev = 0 then 0\n            else (metric_value - training_avg) / (training_stddev)\n        end as anomaly_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and training_set_size >= 14\n            and bucket_end >= \n    dateadd(day, cast(-7 as INT), cast(date_trunc('day', \n  current_timestamp::TIMESTAMP\n) as TIMESTAMP))\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        anomaly_score,\n        latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        updated_at,\n        case\n            when abs(anomaly_score) > 3 then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.data_monitoring_metrics": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "data_monitoring_metrics", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "original_file_path": "models/edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "unique_id": "model.elementary.data_monitoring_metrics", "fqn": ["elementary", "edr", "data_monitoring", "data_monitoring", "data_monitoring_metrics"], "alias": "data_monitoring_metrics", "checksum": {"name": "sha256", "checksum": "4654d1519d81eca2b622d05e7fd6a0c85fea9126025078173a6b99ff3418bbd2"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {"timestamp_column": "updated_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Elementary anomaly detection tests monitor metrics such as volume, freshness and data quality metrics. This incremental table is used to store the metrics over time. On each anomaly detection test, the test queries this table for historical metrics, and compares to the latest values. The table is updated with new metrics on the on-run-end named handle_test_results that is executed at the end of dbt test invocations.\n", "columns": {}, "meta": {"timestamp_column": "updated_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "updated_at"}, "schema": "audit"}, "created_at": 1720749449.42361, "relation_name": "DATAPAI.DATAPAI_audit.data_monitoring_metrics", "raw_code": "{{\n  config(\n    materialized='incremental',\n    unique_key='id',\n    on_schema_change='append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"updated_at\"}\n  )\n}}\n\n{{ elementary.empty_data_monitoring_metrics() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.empty_data_monitoring_metrics"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "compiled": true, "compiled_code": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as id\n\n,\n                \n        cast('dummy_string' as varchar) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar) as column_name\n\n,\n                \n        cast('dummy_string' as varchar) as metric_name\n\n,\n                \n        cast(123456789.99 as FLOAT) as metric_value\n\n,\n                \n        cast('dummy_string' as varchar) as source_value\n\n,\n                cast('2091-02-17' as TIMESTAMP) as bucket_start\n\n,\n                cast('2091-02-17' as TIMESTAMP) as bucket_end\n\n,\n                \n        cast(123456789 as INT) as bucket_duration_hours\n\n,\n                cast('2091-02-17' as TIMESTAMP) as updated_at\n\n,\n                \n        cast('dummy_string' as varchar) as dimension\n\n,\n                \n        cast('dummy_string' as varchar) as dimension_value\n\n,\n                \n        cast('dummy_string' as varchar) as metric_properties\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.schema_columns_snapshot": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "schema_columns_snapshot", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "unique_id": "model.elementary.schema_columns_snapshot", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "schema_columns_snapshot"], "alias": "schema_columns_snapshot", "checksum": {"name": "sha256", "checksum": "4026dd4e8a55d4d5811bdb27cd4214398607ed24bc5b3940ee40dbb4b42a4f2f"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {"timestamp_column": "detected_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "column_state_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Stores the schema details for tables that are monitored with elementary schema changes test. In order to compare current schema to previous state, we must store the previous state. The data is from a view that queries the data warehouse information schema. This is an incremental table.\n", "columns": {}, "meta": {"timestamp_column": "detected_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "column_state_id", "enabled": true, "full_refresh": false, "meta": {"timestamp_column": "detected_at"}, "schema": "audit"}, "created_at": 1720749449.4268305, "relation_name": "DATAPAI.DATAPAI_audit.schema_columns_snapshot", "raw_code": "{{\n  config(\n    materialized='incremental',\n    unique_key = 'column_state_id',\n    enabled = target.type != 'databricks' and target.type != 'spark' | as_bool(),\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"detected_at\"}\n  )\n}}\n\n{{ elementary.empty_schema_columns_snapshot() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.empty_schema_columns_snapshot"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "compiled": true, "compiled_code": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as column_state_id\n\n,\n                \n        cast('dummy_string' as varchar) as full_column_name\n\n,\n                \n        cast('dummy_string' as varchar) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar) as column_name\n\n,\n                \n        cast('dummy_string' as varchar) as data_type\n\n,\n                \n        cast (True as boolean) as is_new\n\n,\n                cast('2091-02-17' as TIMESTAMP) as detected_at\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_artifacts_hashes": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_artifacts_hashes", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_artifacts_hashes.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_artifacts_hashes.sql", "unique_id": "model.elementary.dbt_artifacts_hashes", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_artifacts_hashes"], "alias": "dbt_artifacts_hashes", "checksum": {"name": "sha256", "checksum": "3291a913ae78e1f04e276f308683bcc28ce096edc9441ea92f35c6e18727aefb"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749447.2364867, "relation_name": "DATAPAI.DATAPAI_audit.dbt_artifacts_hashes", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\n{% set artifact_models = [\n  \"dbt_models\",\n  \"dbt_tests\",\n  \"dbt_sources\",\n  \"dbt_snapshots\",\n  \"dbt_metrics\",\n  \"dbt_exposures\",\n  \"dbt_seeds\",\n] %}\n\n{% for artifact_model in artifact_models %}\nselect\n  '{{ artifact_model }}' as artifacts_model,\n   metadata_hash\nfrom {{ ref(artifact_model) }}\n{% if not loop.last %} union all {% endif %}\n{% endfor %}\norder by metadata_hash", "language": "sql", "refs": [{"name": "dbt_models", "package": null, "version": null}, {"name": "dbt_tests", "package": null, "version": null}, {"name": "dbt_sources", "package": null, "version": null}, {"name": "dbt_snapshots", "package": null, "version": null}, {"name": "dbt_metrics", "package": null, "version": null}, {"name": "dbt_exposures", "package": null, "version": null}, {"name": "dbt_seeds", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.elementary.dbt_models", "model.elementary.dbt_tests", "model.elementary.dbt_sources", "model.elementary.dbt_snapshots", "model.elementary.dbt_metrics", "model.elementary.dbt_exposures", "model.elementary.dbt_seeds"]}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_artifacts_hashes.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n  'dbt_models' as artifacts_model,\n   metadata_hash\nfrom DATAPAI.DATAPAI_audit.dbt_models\n union all \n\nselect\n  'dbt_tests' as artifacts_model,\n   metadata_hash\nfrom DATAPAI.DATAPAI_audit.dbt_tests\n union all \n\nselect\n  'dbt_sources' as artifacts_model,\n   metadata_hash\nfrom DATAPAI.DATAPAI_audit.dbt_sources\n union all \n\nselect\n  'dbt_snapshots' as artifacts_model,\n   metadata_hash\nfrom DATAPAI.DATAPAI_audit.dbt_snapshots\n union all \n\nselect\n  'dbt_metrics' as artifacts_model,\n   metadata_hash\nfrom DATAPAI.DATAPAI_audit.dbt_metrics\n union all \n\nselect\n  'dbt_exposures' as artifacts_model,\n   metadata_hash\nfrom DATAPAI.DATAPAI_audit.dbt_exposures\n union all \n\nselect\n  'dbt_seeds' as artifacts_model,\n   metadata_hash\nfrom DATAPAI.DATAPAI_audit.dbt_seeds\n\n\norder by metadata_hash", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_exposures": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_exposures", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_exposures.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_exposures.sql", "unique_id": "model.elementary.dbt_exposures", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_exposures"], "alias": "dbt_exposures", "checksum": {"name": "sha256", "checksum": "8a682af36a6af01c41098c007da5b2fbe040cc282350e2817269b1b20b0f0e36"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_exposures() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about exposures in the project, including configuration and properties from the dbt graph. Each row contains information about a single exposure. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "owner_email": {"name": "owner_email", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "owner_name": {"name": "owner_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_exposures() }}"], "schema": "audit"}, "created_at": 1720749449.4224334, "relation_name": "DATAPAI.DATAPAI_audit.dbt_exposures", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_exposures() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n    )\n}}\n\n{{ elementary.get_dbt_exposures_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_exposures_empty_table_query", "macro.elementary.upload_dbt_exposures"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_exposures.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as maturity\n\n,\n                \n        cast('dummy_string' as varchar) as type\n\n,\n                \n        cast('dummy_string' as varchar) as owner_email\n\n,\n                \n        cast('dummy_string' as varchar) as owner_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as url\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_invocations": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_invocations", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_invocations.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_invocations.sql", "unique_id": "model.elementary.dbt_invocations", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_invocations"], "alias": "dbt_invocations", "checksum": {"name": "sha256", "checksum": "f9b0e2b7cd5f3578d0feade2a08578c5b2d1804a70dd41f2f214f3ed9adfe45e"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {"timestamp_column": "generated_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "invocation_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Attributes associated with each dbt invocation. Inserted at the end of each invocation.\n", "columns": {"invocation_id": {"name": "invocation_id", "description": "Primary key of this table.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "Timestamp the invocation was started.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "run_completed_at": {"name": "run_completed_at", "description": "Timestamp the invocation was completed", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "The time this invocation was uploaded to the database.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "command": {"name": "command", "description": "dbt command that was used. For example, run.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Version of dbt that was used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "elementary_version": {"name": "elementary_version", "description": "Version of the elementary package that was used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "full_refresh": {"name": "full_refresh", "description": "Whether or not this invocation was executed as a full-refresh.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "invocation_vars": {"name": "invocation_vars", "description": "Dictionary of the variables (and values) that were declared in the invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "vars": {"name": "vars", "description": "Dictionary of all variables (and values) in the dbt project. If none were declared at runtime, these are the variables declared in dbt_project yml", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "Name of the target used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "target_database": {"name": "target_database", "description": "Name of the target database that was used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "Name of the target schema that was used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "Name of the dbt profile that was used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "threads": {"name": "threads", "description": "Number of threads that were used to run this dbt invocation. (This number could impact the performance of a dbt invocation).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "selected": {"name": "selected", "description": "The selected resources in the dbt command. While this is a string in the database, this can easily be converted to an array.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "yaml_selector": {"name": "yaml_selector", "description": "The yaml selector that was passed in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "The ID of a job, defined in the `DBT_JOB_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "job_name": {"name": "job_name", "description": "The name of a job, defined in the `DBT_JOB_NAME` env var.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "job_run_id": {"name": "job_run_id", "description": "The run ID of a job, defined in the `DBT_JOB_RUN_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "env": {"name": "env", "description": "The environment's name, defined in the `DBT_ENV` env var.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "env_id": {"name": "env_id", "description": "The ID of an environment, defined in the `DBT_ENV_ID` env var.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "The ID of a project, defined in the `DBT_PROJECT_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "cause_category": {"name": "cause_category", "description": "The category of the cause of the invocation. For example, if the invocation was triggered by a schedule, the cause category would be schedule.\nDefined in the `DBT_CAUSE_CATEGORY` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).\n", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "cause": {"name": "cause", "description": "The cause of the invocation. For example, if the invocation was triggered by a manual run, the cause would be _\"Kicked off by Joe.\"_.\nDefined in the `DBT_CAUSE` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).\n", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "pull_request_id": {"name": "pull_request_id", "description": "The ID of a pull request, defined in the `DBT_PULL_REQUEST_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "git_sha": {"name": "git_sha", "description": "The git SHA of the commit that was used in this invocation, defined in the `DBT_GIT_SHA` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "orchestrator": {"name": "orchestrator", "description": "The orchestrator that was used to run this invocation. For example, dbt Cloud, GitHub Actions, etc.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {"timestamp_column": "generated_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "invocation_id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "generated_at"}, "schema": "audit"}, "created_at": 1720749449.463185, "relation_name": "DATAPAI.DATAPAI_audit.dbt_invocations", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    transient=False,\n    unique_key = 'invocation_id',\n    on_schema_change = 'append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"generated_at\"},\n  )\n}}\n\n{{ elementary.get_dbt_invocations_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_invocations_empty_table_query"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_invocations.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as invocation_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as job_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as job_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as job_run_id\n\n,\n                \n        cast('dummy_string' as varchar) as run_started_at\n\n,\n                \n        cast('dummy_string' as varchar) as run_completed_at\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as command\n\n,\n                \n        cast('dummy_string' as varchar) as dbt_version\n\n,\n                \n        cast('dummy_string' as varchar) as elementary_version\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as invocation_vars\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as vars\n\n,\n                \n        cast('dummy_string' as varchar) as target_name\n\n,\n                \n        cast('dummy_string' as varchar) as target_database\n\n,\n                \n        cast('dummy_string' as varchar) as target_schema\n\n,\n                \n        cast('dummy_string' as varchar) as target_profile_name\n\n,\n                \n        cast(123456789 as INT) as threads\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as selected\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as yaml_selector\n\n,\n                \n        cast('dummy_string' as varchar) as project_id\n\n,\n                \n        cast('dummy_string' as varchar) as project_name\n\n,\n                \n        cast('dummy_string' as varchar) as env\n\n,\n                \n        cast('dummy_string' as varchar) as env_id\n\n,\n                \n        cast('dummy_string' as varchar) as cause_category\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as cause\n\n,\n                \n        cast('dummy_string' as varchar) as pull_request_id\n\n,\n                \n        cast('dummy_string' as varchar) as git_sha\n\n,\n                \n        cast('dummy_string' as varchar) as orchestrator\n\n,\n                \n        cast('dummy_string' as varchar) as dbt_user\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_metrics": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_metrics", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_metrics.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_metrics.sql", "unique_id": "model.elementary.dbt_metrics", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_metrics"], "alias": "dbt_metrics", "checksum": {"name": "sha256", "checksum": "346d0ae98ddf568e9102387d30aa7d9ee4c8c3c3ea58cd254e5e57fcb800f7e9"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_metrics() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about metics in the project, including configuration and properties from the dbt graph. Each row contains information about a single metric. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "model": {"name": "model", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "sql": {"name": "sql", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "filters": {"name": "filters", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "time_grains": {"name": "time_grains", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "dimensions": {"name": "dimensions", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_metrics() }}"], "schema": "audit"}, "created_at": 1720749449.4025624, "relation_name": "DATAPAI.DATAPAI_audit.dbt_metrics", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_metrics() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n    )\n}}\n\n{{ elementary.get_dbt_metrics_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_metrics_empty_table_query", "macro.elementary.upload_dbt_metrics"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_metrics.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as label\n\n,\n                \n        cast('dummy_string' as varchar) as model\n\n,\n                \n        cast('dummy_string' as varchar) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as sql\n\n,\n                \n        cast('dummy_string' as varchar) as timestamp\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as filters\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as time_grains\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as dimensions\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_models": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_models", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_models.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_models.sql", "unique_id": "model.elementary.dbt_models", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_models"], "alias": "dbt_models", "checksum": {"name": "sha256", "checksum": "593b000e1d5ce7b219e4de4086c067491fb0333274ab375e793ccb2fb9fd3759"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_models() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about models in the project, including configuration and properties from the dbt graph. Each row contains information about a single model. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "The unique id of the model.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Model file checksum.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The model materialization config.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Model tags property.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The content of 'meta' property key.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Model owner property (configured under 'meta' key).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "The model database name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "The model schema name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "The macros the model directly depends on.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "The nodes the model directly depends on.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Model description.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Model name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Package name of the model.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "Full path of the model file.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Short path of the model file.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "Update time of the table.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_models() }}"], "schema": "audit"}, "created_at": 1720749449.3025897, "relation_name": "DATAPAI.DATAPAI_audit.dbt_models", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_models() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n  )\n}}\n\n{{ elementary.get_dbt_models_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_models_empty_table_query", "macro.elementary.upload_dbt_models"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_models.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as alias\n\n,\n                \n        cast('dummy_string' as varchar) as checksum\n\n,\n                \n        cast('dummy_string' as varchar) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as owner\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_run_results": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_run_results.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_run_results.sql", "unique_id": "model.elementary.dbt_run_results", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_run_results"], "alias": "dbt_run_results", "checksum": {"name": "sha256", "checksum": "ecee798e20623bd3fe0d1822356a14c63f8a99e251ccf1aff743b0b3759c548d"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {"timestamp_column": "generated_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "model_execution_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Run results of dbt invocations, inserted at the end of each invocation. Each row is the invocation result of a single resource (model, test, snapshot, etc). New data is loaded to this model on an on-run-end hook named 'elementary.upload_run_results' from each invocation that produces a result object. This is an incremental model.\n", "columns": {"model_execution_id": {"name": "model_execution_id", "description": "Execution id generated by joining the unique_id of the resource and the invocation_id. This is the unique key of each row in this model.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "The unique id of the resource (would be similar for all executions of the same resource).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "invocation_id": {"name": "invocation_id", "description": "The unique id of the invocation (would be similar for all resources executed on the same invocation). FK to dbt_invocations.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Resource name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Execution results message returned by dbt.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Execution result status (success, error, pass, fail)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "resource_type": {"name": "resource_type", "description": "Resource type (model, test, snapshot, seed, etc)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "execution_time": {"name": "execution_time", "description": "Resource execution duration in seconds.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "execute_started_at": {"name": "execute_started_at", "description": "Start time of the execution.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "execute_completed_at": {"name": "execute_completed_at", "description": "End time of the execution.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Start time of resource compile action.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "compile_completed_at": {"name": "compile_completed_at", "description": "End time of resource compile action.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "full_refresh": {"name": "full_refresh", "description": "Was this a full refresh execution.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "compiled_code": {"name": "compiled_code", "description": "The compiled code (SQL / Python) executed against the database.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "compiled_sql": {"name": "compiled_sql", "description": "The compiled SQL executed against the database.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "deprecated": true}, "failures": {"name": "failures", "description": "Number of failures in this run.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "query_id": {"name": "query_id", "description": "Query ID in the data warehouse, if returned by the adapter (currently only supported in Snowflake, is null for any other adapter).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Id of the thread of this resource run.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {"timestamp_column": "generated_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "model_execution_id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "generated_at"}, "schema": "audit"}, "created_at": 1720749449.4888756, "relation_name": "DATAPAI.DATAPAI_audit.dbt_run_results", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    transient=False,\n    unique_key = 'model_execution_id',\n    on_schema_change = 'append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"generated_at\"},\n  )\n}}\n\n{{ elementary.get_dbt_run_results_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_run_results_empty_table_query"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_run_results.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as model_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as invocation_id\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as message\n\n,\n                \n        cast('dummy_string' as varchar) as status\n\n,\n                \n        cast('dummy_string' as varchar) as resource_type\n\n,\n                \n        cast(123456789.99 as FLOAT) as execution_time\n\n,\n                \n        cast('dummy_string' as varchar) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar) as compile_completed_at\n\n,\n                \n        cast(31474836478 as bigint) as rows_affected\n\n,\n                \n        cast (True as boolean) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as compiled_code\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar) as query_id\n\n,\n                \n        cast('dummy_string' as varchar) as thread_id\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_seeds": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_seeds", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_seeds.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_seeds.sql", "unique_id": "model.elementary.dbt_seeds", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_seeds"], "alias": "dbt_seeds", "checksum": {"name": "sha256", "checksum": "8daecb4cb68c55a0ad53ba73468d4537965acf2ccdc5c4343b9e1f4e3ae6f197"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_seeds() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_seeds() }}"], "schema": "audit"}, "created_at": 1720749447.5780296, "relation_name": "DATAPAI.DATAPAI_audit.dbt_seeds", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_seeds() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n  )\n}}\n\n{{ elementary.get_dbt_seeds_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_seeds_empty_table_query", "macro.elementary.upload_dbt_seeds"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_seeds.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as alias\n\n,\n                \n        cast('dummy_string' as varchar) as checksum\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as owner\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_snapshots": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_snapshots", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_snapshots.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_snapshots.sql", "unique_id": "model.elementary.dbt_snapshots", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_snapshots"], "alias": "dbt_snapshots", "checksum": {"name": "sha256", "checksum": "e9a4dd4bf0b0a9ec362d517a263768f9c09d319b49297618b0e68201241db006"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_snapshots() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about snapshots in the project, including configuration and properties from the dbt graph. Each row contains information about a single snapshot. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_snapshots() }}"], "schema": "audit"}, "created_at": 1720749449.3793306, "relation_name": "DATAPAI.DATAPAI_audit.dbt_snapshots", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_snapshots() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n  )\n}}\n\n{{ elementary.get_dbt_models_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_models_empty_table_query", "macro.elementary.upload_dbt_snapshots"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_snapshots.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as alias\n\n,\n                \n        cast('dummy_string' as varchar) as checksum\n\n,\n                \n        cast('dummy_string' as varchar) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as owner\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_sources": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_sources", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_sources.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_sources.sql", "unique_id": "model.elementary.dbt_sources", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_sources"], "alias": "dbt_sources", "checksum": {"name": "sha256", "checksum": "d8a8439c596b52172075bc5b4106ba6c38d6dbfddbb83677b08815ea400bc712"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_sources() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about sources in the project, including configuration and properties from the dbt graph. Each row contains information about a single source. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "freshness_warn_after": {"name": "freshness_warn_after", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "freshness_error_after": {"name": "freshness_error_after", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "freshness_filter": {"name": "freshness_filter", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "relation_name": {"name": "relation_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "source_description": {"name": "source_description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_sources() }}"], "schema": "audit"}, "created_at": 1720749449.3586075, "relation_name": "DATAPAI.DATAPAI_audit.dbt_sources", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_sources() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n    )\n}}\n\n{{ elementary.get_dbt_sources_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_sources_empty_table_query", "macro.elementary.upload_dbt_sources"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_sources.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar) as source_name\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as identifier\n\n,\n                \n        cast('dummy_string' as varchar) as loaded_at_field\n\n,\n                \n        cast('dummy_string' as varchar) as freshness_warn_after\n\n,\n                \n        cast('dummy_string' as varchar) as freshness_error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as freshness_filter\n\n,\n                \n        cast('dummy_string' as varchar) as relation_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('dummy_string' as varchar) as owner\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as source_description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_tests": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_tests", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_tests.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_tests.sql", "unique_id": "model.elementary.dbt_tests", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_tests"], "alias": "dbt_tests", "checksum": {"name": "sha256", "checksum": "741409041141e4601052d37da988d545419809fd0c630fa7cfee31d75e66a5c2"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_tests() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about tests in the project, including configuration and properties from the dbt graph. Each row contains information about a single test. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "The unique id of the test.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "The tested model database name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "The tested model schema name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The test name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "short_name": {"name": "short_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "test_column_name": {"name": "test_column_name", "description": "The name of the tested column.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "severity": {"name": "severity", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "warn_if": {"name": "warn_if", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "error_if": {"name": "error_if", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "test_params": {"name": "test_params", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "test_namespace": {"name": "test_namespace", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "model_tags": {"name": "model_tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "model_owners": {"name": "model_owners", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "parent_model_unique_id": {"name": "parent_model_unique_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_tests() }}"], "schema": "audit"}, "created_at": 1720749449.3342106, "relation_name": "DATAPAI.DATAPAI_audit.dbt_tests", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_tests() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n  )\n}}\n\n{{ elementary.get_dbt_tests_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_tests_empty_table_query", "macro.elementary.upload_dbt_tests"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_tests.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar) as name\n\n,\n                \n        cast('dummy_string' as varchar) as short_name\n\n,\n                \n        cast('dummy_string' as varchar) as alias\n\n,\n                \n        cast('dummy_string' as varchar) as test_column_name\n\n,\n                \n        cast('dummy_string' as varchar) as severity\n\n,\n                \n        cast('dummy_string' as varchar) as warn_if\n\n,\n                \n        cast('dummy_string' as varchar) as error_if\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_params\n\n,\n                \n        cast('dummy_string' as varchar) as test_namespace\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as model_tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as model_owners\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as meta\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as depends_on_nodes\n\n,\n                \n        cast('dummy_string' as varchar) as parent_model_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as description\n\n,\n                \n        cast('dummy_string' as varchar) as package_name\n\n,\n                \n        cast('dummy_string' as varchar) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as original_path\n\n,\n                \n        cast('dummy_string' as varchar) as path\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast('dummy_string' as varchar) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.filtered_information_schema_columns": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "filtered_information_schema_columns", "resource_type": "model", "package_name": "elementary", "path": "edr/metadata_store/filtered_information_schema_columns.sql", "original_file_path": "models/edr/metadata_store/filtered_information_schema_columns.sql", "unique_id": "model.elementary.filtered_information_schema_columns", "fqn": ["elementary", "edr", "metadata_store", "filtered_information_schema_columns"], "alias": "filtered_information_schema_columns", "checksum": {"name": "sha256", "checksum": "8b0602cbf990730afd02271c018d6843414aaff35c5d6e191c8711e570178d7b"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Queries the columns view from the information schema of the schemas in the project. This view is generated using an adapter specific macro, as information schema is different between platforms. This is a view to make the work with the information schema more convinient.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true, "schema": "audit"}, "created_at": 1720749449.4276323, "relation_name": "DATAPAI.DATAPAI_audit.filtered_information_schema_columns", "raw_code": "{{\n  config(\n    materialized = 'view',\n    enabled = target.type != 'databricks' and target.type != 'spark' | as_bool()\n  )\n}}\n\n{% set configured_schemas = elementary.get_configured_schemas_from_graph() %}\n\nwith filtered_information_schema_columns as (\n\n    {%- if configured_schemas | length > 0 -%}\n        {{ elementary.union_macro_queries(configured_schemas, elementary.get_columns_from_information_schema) }}\n    {%- else %}\n        {{ elementary.empty_table([('full_table_name', 'string'), ('database_name', 'string'), ('schema_name', 'string'), ('table_name', 'string'), ('column_name', 'string'), ('data_type', 'string')]) }}\n    {%- endif %}\n\n)\n\nselect *\nfrom filtered_information_schema_columns\nwhere full_table_name is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.empty_table"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/metadata_store/filtered_information_schema_columns.sql", "compiled": true, "compiled_code": "\n\n\n\nwith filtered_information_schema_columns as (\n        with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar) as table_name\n\n,\n                \n        cast('dummy_string' as varchar) as column_name\n\n,\n                \n        cast('dummy_string' as varchar) as data_type\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n\n)\n\nselect *\nfrom filtered_information_schema_columns\nwhere full_table_name is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.filtered_information_schema_tables": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "filtered_information_schema_tables", "resource_type": "model", "package_name": "elementary", "path": "edr/metadata_store/filtered_information_schema_tables.sql", "original_file_path": "models/edr/metadata_store/filtered_information_schema_tables.sql", "unique_id": "model.elementary.filtered_information_schema_tables", "fqn": ["elementary", "edr", "metadata_store", "filtered_information_schema_tables"], "alias": "filtered_information_schema_tables", "checksum": {"name": "sha256", "checksum": "1a3258f05108afa595c79c53308305e9369b46902d2d8c6f28c5fb0bfa75561a"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Queries the tables and schemas views from the information schema of the schemas in the project. This view is generated using an adapter specific macro, as information schema is different between platforms. This is a view to make the work with the information schema more convinient.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true, "schema": "audit"}, "created_at": 1720749449.4284089, "relation_name": "DATAPAI.DATAPAI_audit.filtered_information_schema_tables", "raw_code": "{{\n  config(\n    materialized = 'view',\n    enabled = target.type != 'databricks' and target.type != 'spark' | as_bool()\n  )\n}}\n\n{% set configured_schemas = elementary.get_configured_schemas_from_graph() %}\n\nwith filtered_information_schema_tables as (\n\n    {%- if configured_schemas | length > 0 -%}\n        {{ elementary.union_macro_queries(configured_schemas, elementary.get_tables_from_information_schema) }}\n    {%- else %}\n        {{ elementary.empty_table([('full_table_name', 'string'), ('full_schema_name', 'string'), ('database_name', 'string'), ('schema_name', 'string'), ('table_name', 'string')]) }}\n    {%- endif %}\n\n)\n\nselect *\nfrom filtered_information_schema_tables\nwhere schema_name is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.empty_table"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/metadata_store/filtered_information_schema_tables.sql", "compiled": true, "compiled_code": "\n\n\n\nwith filtered_information_schema_tables as (\n        with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as full_table_name\n\n,\n                \n        cast('dummy_string' as varchar) as full_schema_name\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar) as table_name\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n\n)\n\nselect *\nfrom filtered_information_schema_tables\nwhere schema_name is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_source_freshness_results": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "dbt_source_freshness_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/dbt_source_freshness_results.sql", "original_file_path": "models/edr/run_results/dbt_source_freshness_results.sql", "unique_id": "model.elementary.dbt_source_freshness_results", "fqn": ["elementary", "edr", "run_results", "dbt_source_freshness_results"], "alias": "dbt_source_freshness_results", "checksum": {"name": "sha256", "checksum": "5094d2b16dbb3fb48b78d75ed56090a81221d0e1bc5016148cfbb55e08f48ec8"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {"timestamp_column": "generated_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "source_freshness_execution_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"timestamp_column": "generated_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "source_freshness_execution_id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "generated_at"}, "schema": "audit"}, "created_at": 1720749447.8079655, "relation_name": "DATAPAI.DATAPAI_audit.dbt_source_freshness_results", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'source_freshness_execution_id',\n    on_schema_change = 'append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"generated_at\"}\n  )\n}}\n\n{{ elementary.empty_dbt_source_freshness_results() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.empty_dbt_source_freshness_results"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/run_results/dbt_source_freshness_results.sql", "compiled": true, "compiled_code": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as varchar) as source_freshness_execution_id\n\n,\n                \n        cast('dummy_string' as varchar) as unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as max_loaded_at\n\n,\n                \n        cast('dummy_string' as varchar) as snapshotted_at\n\n,\n                \n        cast('dummy_string' as varchar) as generated_at\n\n,\n                \n        cast(123456789.99 as FLOAT) as max_loaded_at_time_ago_in_s\n\n,\n                \n        cast('dummy_string' as varchar) as status\n\n,\n                \n        cast('dummy_string' as varchar) as error\n\n,\n                \n        cast('dummy_string' as varchar) as compile_started_at\n\n,\n                \n        cast('dummy_string' as varchar) as compile_completed_at\n\n,\n                \n        cast('dummy_string' as varchar) as execute_started_at\n\n,\n                \n        cast('dummy_string' as varchar) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as varchar) as invocation_id\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.elementary_test_results": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "elementary_test_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/elementary_test_results.sql", "original_file_path": "models/edr/run_results/elementary_test_results.sql", "unique_id": "model.elementary.elementary_test_results", "fqn": ["elementary", "edr", "run_results", "elementary_test_results"], "alias": "elementary_test_results", "checksum": {"name": "sha256", "checksum": "7b92ed7eb8aa32dd1af920bc70ab408480f469992371aaa6e2fa9722927beb08"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {"timestamp_column": "detected_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Run results of all dbt tests, with fields and metadata needed to produce the Elementary report UI. Each row is the result of a single test, including native dbt tests, packages tests and elementary tests. New data is loaded to this model on an on-run-end hook named `elementary.handle_tests_results`.\n", "columns": {}, "meta": {"timestamp_column": "detected_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "detected_at"}, "schema": "audit"}, "created_at": 1720749449.4897554, "relation_name": "DATAPAI.DATAPAI_audit.elementary_test_results", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'id',\n    on_schema_change = 'append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"detected_at\"},\n  )\n}}\n\n{{ elementary.empty_elementary_test_results() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.empty_elementary_test_results"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/run_results/elementary_test_results.sql", "compiled": true, "compiled_code": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as id\n\n,\n                \n        cast('dummy_string' as varchar) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as model_unique_id\n\n,\n                \n        cast('dummy_string' as varchar) as invocation_id\n\n,\n                cast('2091-02-17' as TIMESTAMP) as detected_at\n\n,\n                \n        cast('dummy_string' as varchar) as database_name\n\n,\n                \n        cast('dummy_string' as varchar) as schema_name\n\n,\n                \n        cast('dummy_string' as varchar) as table_name\n\n,\n                \n        cast('dummy_string' as varchar) as column_name\n\n,\n                \n        cast('dummy_string' as varchar) as test_type\n\n,\n                \n        cast('dummy_string' as varchar) as test_sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_results_description\n\n,\n                \n        cast('dummy_string' as varchar) as owners\n\n,\n                \n        cast('dummy_string' as varchar) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_results_query\n\n,\n                \n        cast('dummy_string' as varchar) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as test_params\n\n,\n                \n        cast('dummy_string' as varchar) as severity\n\n,\n                \n        cast('dummy_string' as varchar) as status\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as varchar) as test_short_name\n\n,\n                \n        cast('dummy_string' as varchar) as test_alias\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as result_rows\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.job_run_results": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "job_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/job_run_results.sql", "original_file_path": "models/edr/run_results/job_run_results.sql", "unique_id": "model.elementary.job_run_results", "fqn": ["elementary", "edr", "run_results", "job_run_results"], "alias": "job_run_results", "checksum": {"name": "sha256", "checksum": "70fa0f75184f074237575d1146a8caf3048d0d0300a5da5013b7a88f137bc810"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Run results of dbt invocations, enriched with jobs metadata. Each row is the result of a single job. This is a view on `dbt_invocations`.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749449.4921608, "relation_name": "DATAPAI.DATAPAI_audit.job_run_results", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\n{% set job_run_started_at %}\nmin({{ elementary.edr_cast_as_timestamp(\"run_started_at\") }})\n{% endset %}\n\n{% set job_run_completed_at %}\nmax({{ elementary.edr_cast_as_timestamp(\"run_completed_at\") }})\n{% endset %}\n\nwith jobs as (\n  select\n    job_name,\n    job_id,\n    job_run_id,\n    {{ job_run_started_at }} as job_run_started_at,\n    {{ job_run_completed_at }} as job_run_completed_at,\n    {{ elementary.timediff(\"second\", job_run_started_at, job_run_completed_at) }} as job_run_execution_time\n  from {{ ref('dbt_invocations') }}\n  where job_id is not null\n  group by job_name, job_id, job_run_id\n)\n\nselect\n  job_name as name,\n  job_id as id,\n  job_run_id as run_id,\n  job_run_started_at as run_started_at,\n  job_run_completed_at as run_completed_at,\n  job_run_execution_time as run_execution_time\nfrom jobs", "language": "sql", "refs": [{"name": "dbt_invocations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp", "macro.elementary.timediff"], "nodes": ["model.elementary.dbt_invocations"]}, "compiled_path": "target/compiled/elementary/models/edr/run_results/job_run_results.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith jobs as (\n  select\n    job_name,\n    job_id,\n    job_run_id,\n    \nmin(cast(run_started_at as TIMESTAMP))\n as job_run_started_at,\n    \nmax(cast(run_completed_at as TIMESTAMP))\n as job_run_completed_at,\n    \n    datediff(\n        second,\n        \nmin(cast(run_started_at as TIMESTAMP))\n,\n        \nmax(cast(run_completed_at as TIMESTAMP))\n\n        )\n as job_run_execution_time\n  from DATAPAI.DATAPAI_audit.dbt_invocations\n  where job_id is not null\n  group by job_name, job_id, job_run_id\n)\n\nselect\n  job_name as name,\n  job_id as id,\n  job_run_id as run_id,\n  job_run_started_at as run_started_at,\n  job_run_completed_at as run_completed_at,\n  job_run_execution_time as run_execution_time\nfrom jobs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.model_run_results": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "model_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/model_run_results.sql", "original_file_path": "models/edr/run_results/model_run_results.sql", "unique_id": "model.elementary.model_run_results", "fqn": ["elementary", "edr", "run_results", "model_run_results"], "alias": "model_run_results", "checksum": {"name": "sha256", "checksum": "c88027ee6b582f74578216a52ff0b4a5ee20d3ec5c1af2361d6f601c79841dc0"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Run results of dbt models, enriched with models metadata. Each row is the result of a single model. This is a view that joins data from `dbt_run_results` and `dbt_models`.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749449.4905493, "relation_name": "DATAPAI.DATAPAI_audit.model_run_results", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith dbt_run_results as (\n    select * from {{ ref('dbt_run_results') }}\n),\n\ndbt_models as (\n    select * from {{ ref('dbt_models') }}\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.thread_id,\n    models.database_name,\n    models.schema_name,\n    models.materialization,\n    models.tags,\n    models.package_name,\n    models.path,\n    models.original_path,\n    models.owner,\n    models.alias,\n    ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n    CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY {{ elementary.edr_time_trunc('day', 'run_results.generated_at') }} ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_first_invocation_of_the_day,\n    CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY {{ elementary.edr_time_trunc('day', 'run_results.generated_at') }} ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_last_invocation_of_the_day\n    \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "language": "sql", "refs": [{"name": "dbt_run_results", "package": null, "version": null}, {"name": "dbt_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.edr_time_trunc"], "nodes": ["model.elementary.dbt_run_results", "model.elementary.dbt_models"]}, "compiled_path": "target/compiled/elementary/models/edr/run_results/model_run_results.sql", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from DATAPAI.DATAPAI_audit.dbt_run_results\n),\n\ndbt_models as (\n    select * from DATAPAI.DATAPAI_audit.dbt_models\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.thread_id,\n    models.database_name,\n    models.schema_name,\n    models.materialization,\n    models.tags,\n    models.package_name,\n    models.path,\n    models.original_path,\n    models.owner,\n    models.alias,\n    ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n    CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as TIMESTAMP))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_first_invocation_of_the_day,\n    CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY \n    date_trunc('day', cast(run_results.generated_at as TIMESTAMP))\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_last_invocation_of_the_day\n    \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.snapshot_run_results": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "snapshot_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/snapshot_run_results.sql", "original_file_path": "models/edr/run_results/snapshot_run_results.sql", "unique_id": "model.elementary.snapshot_run_results", "fqn": ["elementary", "edr", "run_results", "snapshot_run_results"], "alias": "snapshot_run_results", "checksum": {"name": "sha256", "checksum": "e0866c2902da876a5efce28c6ba0a8181330f01b5a2a04abcafd5bf4e46e7b64"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Run results of dbt snapshots, enriched with snapshots metadata. Each row is the result of a single snapshot. This is a view that joins data from `dbt_run_results` and `dbt_snapshots`.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749449.4913561, "relation_name": "DATAPAI.DATAPAI_audit.snapshot_run_results", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith dbt_run_results as (\n    select * from {{ ref('dbt_run_results') }}\n),\n\ndbt_snapshots as (\n    select * from {{ ref('dbt_snapshots') }}\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.thread_id,\n    snapshots.database_name,\n    snapshots.schema_name,\n    snapshots.materialization,\n    snapshots.tags,\n    snapshots.package_name,\n    snapshots.path,\n    snapshots.original_path,\n    snapshots.owner,\n    snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "language": "sql", "refs": [{"name": "dbt_run_results", "package": null, "version": null}, {"name": "dbt_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.elementary.dbt_run_results", "model.elementary.dbt_snapshots"]}, "compiled_path": "target/compiled/elementary/models/edr/run_results/snapshot_run_results.sql", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from DATAPAI.DATAPAI_audit.dbt_run_results\n),\n\ndbt_snapshots as (\n    select * from DATAPAI.DATAPAI_audit.dbt_snapshots\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.thread_id,\n    snapshots.database_name,\n    snapshots.schema_name,\n    snapshots.materialization,\n    snapshots.tags,\n    snapshots.package_name,\n    snapshots.path,\n    snapshots.original_path,\n    snapshots.owner,\n    snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.test_result_rows": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "test_result_rows", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/test_result_rows.sql", "original_file_path": "models/edr/run_results/test_result_rows.sql", "unique_id": "model.elementary.test_result_rows", "fqn": ["elementary", "edr", "run_results", "test_result_rows"], "alias": "test_result_rows", "checksum": {"name": "sha256", "checksum": "87791b8556fe93f1b6be7537eddcd1570b720121fd4f53421c740d93387cd96e"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {"timestamp_column": "detected_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "elementary_test_results_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [{"sql": "{{ elementary.backfill_result_rows() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"timestamp_column": "detected_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "elementary_test_results_id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "detected_at"}, "post-hook": ["{{ elementary.backfill_result_rows() }}"], "schema": "audit"}, "created_at": 1720749447.9387116, "relation_name": "DATAPAI.DATAPAI_audit.test_result_rows", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'elementary_test_results_id',\n    on_schema_change = 'append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    post_hook='{{ elementary.backfill_result_rows() }}',\n    meta={\"timestamp_column\": \"detected_at\"}\n  )\n}}\n\n-- depends_on: {{ ref('elementary_test_results') }}\n{{ elementary.empty_table([\n    ('elementary_test_results_id', 'long_string'),\n    ('result_row', 'long_string'),\n    ('detected_at','timestamp'),\n]) }}", "language": "sql", "refs": [{"name": "elementary_test_results", "package": null, "version": null}, {"name": "elementary_test_results", "package": null, "version": null}, {"name": "elementary_test_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.empty_table", "macro.elementary.backfill_result_rows"], "nodes": ["model.elementary.elementary_test_results", "model.elementary.elementary_test_results", "model.elementary.elementary_test_results"]}, "compiled_path": "target/compiled/elementary/models/edr/run_results/test_result_rows.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: DATAPAI.DATAPAI_audit.elementary_test_results\nwith empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as elementary_test_results_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as varchar) as result_row\n\n,\n                cast('2091-02-17' as TIMESTAMP) as detected_at\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.metadata": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "metadata", "resource_type": "model", "package_name": "elementary", "path": "edr/system/metadata.sql", "original_file_path": "models/edr/system/metadata.sql", "unique_id": "model.elementary.metadata", "fqn": ["elementary", "edr", "system", "metadata"], "alias": "metadata", "checksum": {"name": "sha256", "checksum": "7d06c726499b330d51c340d2dc2774ac95f958fd6824c09711b3881b39b76a84"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "audit"}, "created_at": 1720749447.9834292, "relation_name": "DATAPAI.DATAPAI_audit.metadata", "raw_code": "{{ config(materialized='table') }}\n\nSELECT\n    '{{ elementary.get_elementary_package_version() }}' as dbt_pkg_version", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_elementary_package_version"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/system/metadata.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    '0.7.5' as dbt_pkg_version", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.monitors_runs": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "monitors_runs", "resource_type": "model", "package_name": "elementary", "path": "edr/system/monitors_runs.sql", "original_file_path": "models/edr/system/monitors_runs.sql", "unique_id": "model.elementary.monitors_runs", "fqn": ["elementary", "edr", "system", "monitors_runs"], "alias": "monitors_runs", "checksum": {"name": "sha256", "checksum": "3720e206635d4f2f95c193835727b0d533ec1a5fa56e5dec79331418d07e934f"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a view on `data_monitoring_metrics` that is used to determine when a specific anomaly detection test was last executed. Each anomaly detection test queries this view to decide on a start time for collecting metrics.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "audit"}, "created_at": 1720749449.4260583, "relation_name": "DATAPAI.DATAPAI_audit.monitors_runs", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith data_monitoring_metrics as (\n\n    select * from {{ ref('data_monitoring_metrics') }}\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           metric_properties,\n           max(bucket_end) as last_bucket_end,\n           min(bucket_end) as first_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3,4\n\n)\n\nselect * from max_bucket_end", "language": "sql", "refs": [{"name": "data_monitoring_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.elementary.data_monitoring_metrics"]}, "compiled_path": "target/compiled/elementary/models/edr/system/monitors_runs.sql", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from DATAPAI.DATAPAI_audit.data_monitoring_metrics\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           metric_properties,\n           max(bucket_end) as last_bucket_end,\n           min(bucket_end) as first_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3,4\n\n)\n\nselect * from max_bucket_end", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "operation.elementary.elementary-on-run-start-0": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "elementary-on-run-start-0", "resource_type": "operation", "package_name": "elementary", "path": "hooks/elementary-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.elementary.elementary-on-run-start-0", "fqn": ["elementary", "hooks", "elementary-on-run-start-0"], "alias": "elementary-on-run-start-0", "checksum": {"name": "sha256", "checksum": "f0a03707102c608047dff580feb047bedf7fe77250eb468b0a7b7293e28a26ac"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit"}, "created_at": 1720749448.0463243, "relation_name": null, "raw_code": "{{ elementary.on_run_start() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.on_run_start"], "nodes": []}, "compiled_path": "target/compiled/elementary/./dbt_project.yml/hooks/elementary-on-run-start-0.sql", "compiled": true, "compiled_code": "\n  \n  \n\n  \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "index": 0}, "operation.elementary.elementary-on-run-end-0": {"database": "DATAPAI", "schema": "DATAPAI_audit", "name": "elementary-on-run-end-0", "resource_type": "operation", "package_name": "elementary", "path": "hooks/elementary-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.elementary.elementary-on-run-end-0", "fqn": ["elementary", "hooks", "elementary-on-run-end-0"], "alias": "elementary-on-run-end-0", "checksum": {"name": "sha256", "checksum": "f0a03707102c608047dff580feb047bedf7fe77250eb468b0a7b7293e28a26ac"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit"}, "created_at": 1720749448.063586, "relation_name": null, "raw_code": "{{ elementary.on_run_end() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.on_run_end"], "nodes": []}, "compiled_path": "target/compiled/elementary/./dbt_project.yml/hooks/elementary-on-run-end-0.sql", "compiled": true, "compiled_code": "\n  \n  \n\n  \n    \n  \n\n  \n\n  \n    \n  \n\n  \n\n  \n    \n  \n  \n\n  \n  \n  \n  \n  \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "index": 0}, "test.datapai.unique_customers_customer_id.c5af1ff4b1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_customers_customer_id", "resource_type": "test", "package_name": "datapai", "path": "unique_customers_customer_id.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.unique_customers_customer_id.c5af1ff4b1", "fqn": ["datapai", "full-jaffle-shop", "unique_customers_customer_id"], "alias": "unique_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.6445158, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_customers_customer_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.customers"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/unique_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.customers\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.customers", "attached_node": "model.datapai.customers"}, "test.datapai.not_null_customers_customer_id.5c9bf9911d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_customers_customer_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_customers_customer_id.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.not_null_customers_customer_id.5c9bf9911d", "fqn": ["datapai", "full-jaffle-shop", "not_null_customers_customer_id"], "alias": "not_null_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.648455, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_customers_customer_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.customers"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/not_null_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.customers\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.customers", "attached_node": "model.datapai.customers"}, "test.datapai.unique_orders_order_id.fed79b3a6e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_orders_order_id", "resource_type": "test", "package_name": "datapai", "path": "unique_orders_order_id.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.unique_orders_order_id.fed79b3a6e", "fqn": ["datapai", "full-jaffle-shop", "unique_orders_order_id"], "alias": "unique_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.651944, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_orders_order_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/unique_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.orders\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.orders", "attached_node": "model.datapai.orders"}, "test.datapai.not_null_orders_order_id.cf6c17daed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_orders_order_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_orders_order_id.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.not_null_orders_order_id.cf6c17daed", "fqn": ["datapai", "full-jaffle-shop", "not_null_orders_order_id"], "alias": "not_null_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.6554875, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_orders_order_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/not_null_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.orders\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.orders", "attached_node": "model.datapai.orders"}, "test.datapai.not_null_orders_customer_id.c5f02694af": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_orders_customer_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_orders_customer_id.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.not_null_orders_customer_id.c5f02694af", "fqn": ["datapai", "full-jaffle-shop", "not_null_orders_customer_id"], "alias": "not_null_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.6592765, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_orders_customer_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/not_null_orders_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.orders\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.orders", "attached_node": "model.datapai.orders"}, "test.datapai.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "relationships_orders_customer_id__customer_id__ref_customers_", "resource_type": "test", "package_name": "datapai", "path": "relationships_orders_customer_id__customer_id__ref_customers_.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "fqn": ["datapai", "full-jaffle-shop", "relationships_orders_customer_id__customer_id__ref_customers_"], "alias": "relationships_orders_customer_id__customer_id__ref_customers_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.6628613, "relation_name": "DATAPAI.DATAPAI_test_audit.relationships_orders_customer_id__customer_id__ref_customers_", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.customers", "model.datapai.orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/relationships_orders_customer_id__customer_id__ref_customers_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from DATAPAI.DATAPAI.orders\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from DATAPAI.DATAPAI.customers\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.orders", "attached_node": "model.datapai.orders"}, "test.datapai.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "accepted_values_orders_status__placed__shipped__completed__return_pending__returned", "resource_type": "test", "package_name": "datapai", "path": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3", "fqn": ["datapai", "full-jaffle-shop", "accepted_values_orders_status__placed__shipped__completed__return_pending__returned"], "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758", "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000, "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758"}, "created_at": 1720749448.6813715, "relation_name": "DATAPAI.DATAPAI_test_audit.accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758\") }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from DATAPAI.DATAPAI.orders\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "status", "file_key_name": "models.orders", "attached_node": "model.datapai.orders"}, "test.datapai.not_null_orders_amount.106140f9fd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_orders_amount", "resource_type": "test", "package_name": "datapai", "path": "not_null_orders_amount.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.not_null_orders_amount.106140f9fd", "fqn": ["datapai", "full-jaffle-shop", "not_null_orders_amount"], "alias": "not_null_orders_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.6976, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_orders_amount", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/not_null_orders_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.orders\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "amount", "file_key_name": "models.orders", "attached_node": "model.datapai.orders"}, "test.datapai.not_null_orders_credit_card_amount.d3ca593b59": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_orders_credit_card_amount", "resource_type": "test", "package_name": "datapai", "path": "not_null_orders_credit_card_amount.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.not_null_orders_credit_card_amount.d3ca593b59", "fqn": ["datapai", "full-jaffle-shop", "not_null_orders_credit_card_amount"], "alias": "not_null_orders_credit_card_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.7010992, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_orders_credit_card_amount", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/not_null_orders_credit_card_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.orders\nwhere credit_card_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "credit_card_amount", "file_key_name": "models.orders", "attached_node": "model.datapai.orders"}, "test.datapai.not_null_orders_coupon_amount.ab90c90625": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "coupon_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_orders_coupon_amount", "resource_type": "test", "package_name": "datapai", "path": "not_null_orders_coupon_amount.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.not_null_orders_coupon_amount.ab90c90625", "fqn": ["datapai", "full-jaffle-shop", "not_null_orders_coupon_amount"], "alias": "not_null_orders_coupon_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.7045567, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_orders_coupon_amount", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/not_null_orders_coupon_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.orders\nwhere coupon_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "coupon_amount", "file_key_name": "models.orders", "attached_node": "model.datapai.orders"}, "test.datapai.not_null_orders_bank_transfer_amount.7743500c49": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bank_transfer_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_orders_bank_transfer_amount", "resource_type": "test", "package_name": "datapai", "path": "not_null_orders_bank_transfer_amount.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.not_null_orders_bank_transfer_amount.7743500c49", "fqn": ["datapai", "full-jaffle-shop", "not_null_orders_bank_transfer_amount"], "alias": "not_null_orders_bank_transfer_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.7081044, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_orders_bank_transfer_amount", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/not_null_orders_bank_transfer_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.orders\nwhere bank_transfer_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "bank_transfer_amount", "file_key_name": "models.orders", "attached_node": "model.datapai.orders"}, "test.datapai.not_null_orders_gift_card_amount.413a0d2d7a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "gift_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_orders_gift_card_amount", "resource_type": "test", "package_name": "datapai", "path": "not_null_orders_gift_card_amount.sql", "original_file_path": "models/full-jaffle-shop/schema.yml", "unique_id": "test.datapai.not_null_orders_gift_card_amount.413a0d2d7a", "fqn": ["datapai", "full-jaffle-shop", "not_null_orders_gift_card_amount"], "alias": "not_null_orders_gift_card_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.7121081, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_orders_gift_card_amount", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/schema.yml/not_null_orders_gift_card_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.orders\nwhere gift_card_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "gift_card_amount", "file_key_name": "models.orders", "attached_node": "model.datapai.orders"}, "test.datapai.unique_stg_customers_customer_id.c7614daada": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_customers_customer_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_customers_customer_id.sql", "original_file_path": "models/full-jaffle-shop/staging/schema.yml", "unique_id": "test.datapai.unique_stg_customers_customer_id.c7614daada", "fqn": ["datapai", "full-jaffle-shop", "staging", "unique_stg_customers_customer_id"], "alias": "unique_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.7558334, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_customers_customer_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customers"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/schema.yml/unique_stg_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_customers\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customers", "attached_node": "model.datapai.stg_customers"}, "test.datapai.not_null_stg_customers_customer_id.e2cfb1f9aa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_customers_customer_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_customers_customer_id.sql", "original_file_path": "models/full-jaffle-shop/staging/schema.yml", "unique_id": "test.datapai.not_null_stg_customers_customer_id.e2cfb1f9aa", "fqn": ["datapai", "full-jaffle-shop", "staging", "not_null_stg_customers_customer_id"], "alias": "not_null_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.7594743, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_customers_customer_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customers"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/schema.yml/not_null_stg_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_customers\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customers", "attached_node": "model.datapai.stg_customers"}, "test.datapai.unique_stg_orders_order_id.e3b841c71a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_orders_order_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_orders_order_id.sql", "original_file_path": "models/full-jaffle-shop/staging/schema.yml", "unique_id": "test.datapai.unique_stg_orders_order_id.e3b841c71a", "fqn": ["datapai", "full-jaffle-shop", "staging", "unique_stg_orders_order_id"], "alias": "unique_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.7631273, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_orders_order_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/schema.yml/unique_stg_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_orders\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_orders", "attached_node": "model.datapai.stg_orders"}, "test.datapai.not_null_stg_orders_order_id.81cfe2fe64": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_orders_order_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_orders_order_id.sql", "original_file_path": "models/full-jaffle-shop/staging/schema.yml", "unique_id": "test.datapai.not_null_stg_orders_order_id.81cfe2fe64", "fqn": ["datapai", "full-jaffle-shop", "staging", "not_null_stg_orders_order_id"], "alias": "not_null_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.7666829, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_orders_order_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/schema.yml/not_null_stg_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_orders\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_orders", "attached_node": "model.datapai.stg_orders"}, "test.datapai.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned", "resource_type": "test", "package_name": "datapai", "path": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "original_file_path": "models/full-jaffle-shop/staging/schema.yml", "unique_id": "test.datapai.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "fqn": ["datapai", "full-jaffle-shop", "staging", "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"], "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000, "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"}, "created_at": 1720749448.7702575, "relation_name": "DATAPAI.DATAPAI_test_audit.accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_orders"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/schema.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from DATAPAI.DATAPAI.stg_orders\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "status", "file_key_name": "models.stg_orders", "attached_node": "model.datapai.stg_orders"}, "test.datapai.unique_stg_payments_payment_id.3744510712": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_payments_payment_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_payments_payment_id.sql", "original_file_path": "models/full-jaffle-shop/staging/schema.yml", "unique_id": "test.datapai.unique_stg_payments_payment_id.3744510712", "fqn": ["datapai", "full-jaffle-shop", "staging", "unique_stg_payments_payment_id"], "alias": "unique_stg_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.7811692, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_payments_payment_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_payments"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/schema.yml/unique_stg_payments_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_payments\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.stg_payments", "attached_node": "model.datapai.stg_payments"}, "test.datapai.not_null_stg_payments_payment_id.c19cc50075": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_payments_payment_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_payments_payment_id.sql", "original_file_path": "models/full-jaffle-shop/staging/schema.yml", "unique_id": "test.datapai.not_null_stg_payments_payment_id.c19cc50075", "fqn": ["datapai", "full-jaffle-shop", "staging", "not_null_stg_payments_payment_id"], "alias": "not_null_stg_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720749448.7846432, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_payments_payment_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_payments"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/schema.yml/not_null_stg_payments_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_payments\nwhere payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.stg_payments", "attached_node": "model.datapai.stg_payments"}, "test.datapai.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["credit_card", "coupon", "bank_transfer", "gift_card"], "column_name": "payment_method", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card", "resource_type": "test", "package_name": "datapai", "path": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql", "original_file_path": "models/full-jaffle-shop/staging/schema.yml", "unique_id": "test.datapai.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278", "fqn": ["datapai", "full-jaffle-shop", "staging", "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card"], "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef", "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000, "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef"}, "created_at": 1720749448.7885916, "relation_name": "DATAPAI.DATAPAI_test_audit.accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef\") }}", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_payments"]}, "compiled_path": "target/compiled/datapai/models/full-jaffle-shop/staging/schema.yml/accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from DATAPAI.DATAPAI.stg_payments\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "payment_method", "file_key_name": "models.stg_payments", "attached_node": "model.datapai.stg_payments"}, "model.datapai.stg_genre": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_genre", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_genre.sql", "original_file_path": "models/chinook/staging/stg_genre.sql", "unique_id": "model.datapai.stg_genre", "fqn": ["datapai", "chinook", "staging", "stg_genre"], "alias": "stg_genre", "checksum": {"name": "sha256", "checksum": "fed6102e8bf9581936cc5bab7861da6e42929fafad6222da23a8ffedb29cc4c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of genres", "columns": {"genre_id": {"name": "genre_id", "description": "Genre identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "genre_name": {"name": "genre_name", "description": "Name of the genre", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_genre.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720750912.7236671, "relation_name": "DATAPAI.DATAPAI.stg_genre", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT genre_id,\n       name AS genre_name\n  FROM {{ ref('genre') }}", "language": "sql", "refs": [{"name": "genre", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.genre"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_genre.sql", "compiled": true, "compiled_code": "\n\nSELECT genre_id,\n       name AS genre_name\n  FROM DATAPAI.DATAPAI.genre", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_invoice": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_invoice", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_invoice.sql", "original_file_path": "models/chinook/staging/stg_invoice.sql", "unique_id": "model.datapai.stg_invoice", "fqn": ["datapai", "chinook", "staging", "stg_invoice"], "alias": "stg_invoice", "checksum": {"name": "sha256", "checksum": "65786aea82c1eb72942ecf1c106596c4efbcaeb3e8ba3287700e49540e5ca849"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of invoice lines", "columns": {"invoice_id": {"name": "invoice_id", "description": "Invoice identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_date": {"name": "invoice_date", "description": "Date of the invoice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_billing_address": {"name": "invoice_billing_address", "description": "Address of the billing", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_billing_city": {"name": "invoice_billing_city", "description": "City of the billing address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_billing_state": {"name": "invoice_billing_state", "description": "State of the billing address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_billing_country": {"name": "invoice_billing_country", "description": "Country of the billing address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_billing_postal_code": {"name": "invoice_billing_postal_code", "description": "Postal code of the billing address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_total": {"name": "invoice_total", "description": "Total amount of the billing", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_invoice.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720750912.742889, "relation_name": "DATAPAI.DATAPAI.stg_invoice", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT invoice_id,\n       customer_id,\n       invoice_date,\n       billing_address AS invoice_billing_address,\n       billing_city AS invoice_billing_city,\n       billing_state AS invoice_billing_state,\n       billing_country AS invoice_billing_country,\n       billing_postal_code AS invoice_billing_postal_code,\n       total AS invoice_total\n  FROM {{ ref('invoice') }}", "language": "sql", "refs": [{"name": "invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.invoice"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_invoice.sql", "compiled": true, "compiled_code": "\n\nSELECT invoice_id,\n       customer_id,\n       invoice_date,\n       billing_address AS invoice_billing_address,\n       billing_city AS invoice_billing_city,\n       billing_state AS invoice_billing_state,\n       billing_country AS invoice_billing_country,\n       billing_postal_code AS invoice_billing_postal_code,\n       total AS invoice_total\n  FROM DATAPAI.DATAPAI.invoice", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_playlist": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_playlist", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_playlist.sql", "original_file_path": "models/chinook/staging/stg_playlist.sql", "unique_id": "model.datapai.stg_playlist", "fqn": ["datapai", "chinook", "staging", "stg_playlist"], "alias": "stg_playlist", "checksum": {"name": "sha256", "checksum": "7563a41ded3b62fa81d9fbbe8cc5b7bc13fccbd08046a73b74975fb6309e32ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of playlists", "columns": {"playlist_id": {"name": "playlist_id", "description": "Playlist identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "playlist_name": {"name": "playlist_name", "description": "Name of the playlist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_playlist.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720750912.7757666, "relation_name": "DATAPAI.DATAPAI.stg_playlist", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT playlist_id,\n       name AS playlist_name\n  FROM {{ ref('playlist') }}", "language": "sql", "refs": [{"name": "playlist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.playlist"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_playlist.sql", "compiled": true, "compiled_code": "\n\nSELECT playlist_id,\n       name AS playlist_name\n  FROM DATAPAI.DATAPAI.playlist", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_album": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_album", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_album.sql", "original_file_path": "models/chinook/staging/stg_album.sql", "unique_id": "model.datapai.stg_album", "fqn": ["datapai", "chinook", "staging", "stg_album"], "alias": "stg_album", "checksum": {"name": "sha256", "checksum": "1b9d9fde1a9e78f325d6573e98bf4963326db770fd787e6646b032e1e649d03c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of album", "columns": {"album_id": {"name": "album_id", "description": "Album identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "album_title": {"name": "album_title", "description": "Title of the album", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "artist_id": {"name": "artist_id", "description": "Artist identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_album.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720750912.790642, "relation_name": "DATAPAI.DATAPAI.stg_album", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT album_id,\n       title AS album_title,\n       artist_id\n  FROM {{ ref('album') }}", "language": "sql", "refs": [{"name": "album", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.album"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_album.sql", "compiled": true, "compiled_code": "\n\nSELECT album_id,\n       title AS album_title,\n       artist_id\n  FROM DATAPAI.DATAPAI.album", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_employee": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_employee", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_employee.sql", "original_file_path": "models/chinook/staging/stg_employee.sql", "unique_id": "model.datapai.stg_employee", "fqn": ["datapai", "chinook", "staging", "stg_employee"], "alias": "stg_employee", "checksum": {"name": "sha256", "checksum": "9d149553cca22d32142e5ef7dc81be5866c4e7434d163b9bf56adc228f7197c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of employees", "columns": {"employee_id": {"name": "employee_id", "description": "Employee identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_first_name": {"name": "employee_first_name", "description": "First name of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_last_name": {"name": "employee_last_name", "description": "Last name of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_title": {"name": "employee_title", "description": "Title of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_reports_to": {"name": "employee_reports_to", "description": "Direct reports employee identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_birth_date": {"name": "employee_birth_date", "description": "Birth date of the Employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_hire_date": {"name": "employee_hire_date", "description": "Hire date of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_country": {"name": "employee_country", "description": "Country of the customery", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_phone": {"name": "employee_phone", "description": "Phone number of the customery", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_postal_code": {"name": "employee_postal_code", "description": "Postal Code of the customery", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_fax": {"name": "employee_fax", "description": "Fax address of the customery)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_email": {"name": "employee_email", "description": "Email address of the customery", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_address": {"name": "employee_address", "description": "Address of the employee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_employee.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720750912.8160598, "relation_name": "DATAPAI.DATAPAI.stg_employee", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT employee_id,\n       last_name AS employee_last_name,\n       first_name AS employee_first_name,\n       title AS employee_title,\n       reports_to AS employee_reports_to,\n       birth_date AS employee_birth_date,\n       hire_date AS employee_hire_date,\n       address AS employee_address,\n       city AS employee_city,\n       state AS employee_state,\n       country AS employee_country,\n       postal_code AS employee_postal_code,\n       phone AS employee_phone,\n       fax AS employee_fax,\n       email AS employee_email\n FROM {{ ref('employee') }}", "language": "sql", "refs": [{"name": "employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_employee.sql", "compiled": true, "compiled_code": "\n\nSELECT employee_id,\n       last_name AS employee_last_name,\n       first_name AS employee_first_name,\n       title AS employee_title,\n       reports_to AS employee_reports_to,\n       birth_date AS employee_birth_date,\n       hire_date AS employee_hire_date,\n       address AS employee_address,\n       city AS employee_city,\n       state AS employee_state,\n       country AS employee_country,\n       postal_code AS employee_postal_code,\n       phone AS employee_phone,\n       fax AS employee_fax,\n       email AS employee_email\n FROM DATAPAI.DATAPAI.employee", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_track": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_track", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_track.sql", "original_file_path": "models/chinook/staging/stg_track.sql", "unique_id": "model.datapai.stg_track", "fqn": ["datapai", "chinook", "staging", "stg_track"], "alias": "stg_track", "checksum": {"name": "sha256", "checksum": "c95741a3ffc27e445c9d2ae4d7524ae4513752ecc85bfeb964ffc0c2f18a80b1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of tracks", "columns": {"track_id": {"name": "track_id", "description": "Track identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track_name": {"name": "track_name", "description": "Name of the track", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "album_id": {"name": "album_id", "description": "Album identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "media_type_id": {"name": "media_type_id", "description": "Media type identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "genre_id": {"name": "genre_id", "description": "Genre identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track_composer_name": {"name": "track_composer_name", "description": "Name of the composer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track_milliseconds": {"name": "track_milliseconds", "description": "Length of the track in milliseconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track_bytes": {"name": "track_bytes", "description": "Size of the track in bytes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track_unit_price": {"name": "track_unit_price", "description": "Price of the track (USD)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_track.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720750912.8742988, "relation_name": "DATAPAI.DATAPAI.stg_track", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT track_id,\n       name AS track_name,\n       album_id,\n       media_type_id,\n       genre_id,\n       composer AS track_composer_name,\n       milliseconds AS track_milliseconds,\n       bytes AS track_bytes,\n       unit_price AS track_unit_price\n  FROM {{ ref('track') }}", "language": "sql", "refs": [{"name": "track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_track.sql", "compiled": true, "compiled_code": "\n\nSELECT track_id,\n       name AS track_name,\n       album_id,\n       media_type_id,\n       genre_id,\n       composer AS track_composer_name,\n       milliseconds AS track_milliseconds,\n       bytes AS track_bytes,\n       unit_price AS track_unit_price\n  FROM DATAPAI.DATAPAI.track", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_artist": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_artist", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_artist.sql", "original_file_path": "models/chinook/staging/stg_artist.sql", "unique_id": "model.datapai.stg_artist", "fqn": ["datapai", "chinook", "staging", "stg_artist"], "alias": "stg_artist", "checksum": {"name": "sha256", "checksum": "e6a7912db984416591530d1c94588635a577032cb39741a93097618d96788870"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of album", "columns": {"artist_id": {"name": "artist_id", "description": "Artist identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "artist_name": {"name": "artist_name", "description": "Name of the artist", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_artist.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720750912.911856, "relation_name": "DATAPAI.DATAPAI.stg_artist", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT artist_id,\n       name AS artist_name\n  FROM {{ ref('artist') }}", "language": "sql", "refs": [{"name": "artist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.artist"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_artist.sql", "compiled": true, "compiled_code": "\n\nSELECT artist_id,\n       name AS artist_name\n  FROM DATAPAI.DATAPAI.artist", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_customer": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_customer", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_customer.sql", "original_file_path": "models/chinook/staging/stg_customer.sql", "unique_id": "model.datapai.stg_customer", "fqn": ["datapai", "chinook", "staging", "stg_customer"], "alias": "stg_customer", "checksum": {"name": "sha256", "checksum": "9de6e5c8cd413ae8a8b1b7b9831ff402373a4b01283c08108439950b63ca59ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of customers", "columns": {"customer_id": {"name": "customer_id", "description": "Customer identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_first_name": {"name": "customer_first_name", "description": "First name of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_last_name": {"name": "customer_last_name", "description": "Last name of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_company": {"name": "customer_company", "description": "Company name of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address": {"name": "customer_address", "description": "Address of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_city": {"name": "customer_city", "description": "City of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_state": {"name": "customer_state", "description": "State of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_country": {"name": "customer_country", "description": "Country of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_phone": {"name": "customer_phone", "description": "Phone number of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_postal_code": {"name": "customer_postal_code", "description": "Postal Code of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_fax": {"name": "customer_fax", "description": "Fax address of the customer)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email address of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "employee_id": {"name": "employee_id", "description": "Employee key identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_customer.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720750912.9357176, "relation_name": "DATAPAI.DATAPAI.stg_customer", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT customer_id,\n       first_name AS customer_first_name,\n       last_name AS customer_last_name,\n       company AS customer_company,\n       address AS customer_address,\n       city AS customer_city,\n       state AS customer_state,\n       country AS customer_country,\n       postal_code AS customer_postal_code,\n       phone AS customer_phone,\n       fax AS customer_fax,\n       email AS customer_email,\n       support_rep_id AS employee_id\n  FROM {{ ref('customer') }}", "language": "sql", "refs": [{"name": "customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_customer.sql", "compiled": true, "compiled_code": "\n\nSELECT customer_id,\n       first_name AS customer_first_name,\n       last_name AS customer_last_name,\n       company AS customer_company,\n       address AS customer_address,\n       city AS customer_city,\n       state AS customer_state,\n       country AS customer_country,\n       postal_code AS customer_postal_code,\n       phone AS customer_phone,\n       fax AS customer_fax,\n       email AS customer_email,\n       support_rep_id AS employee_id\n  FROM DATAPAI.DATAPAI.customer", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "seed.datapai.artist": {"database": "DATAPAI", "schema": "DATAPAI", "name": "artist", "resource_type": "seed", "package_name": "datapai", "path": "artist.csv", "original_file_path": "seeds/artist.csv", "unique_id": "seed.datapai.artist", "fqn": ["datapai", "artist"], "alias": "artist", "checksum": {"name": "sha256", "checksum": "f07f2dd4a119daf536fea1ebc1e94639c6e311ed87b49d4a0800f1a501398759"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720750912.5524464, "relation_name": "DATAPAI.DATAPAI.artist", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.album": {"database": "DATAPAI", "schema": "DATAPAI", "name": "album", "resource_type": "seed", "package_name": "datapai", "path": "album.csv", "original_file_path": "seeds/album.csv", "unique_id": "seed.datapai.album", "fqn": ["datapai", "album"], "alias": "album", "checksum": {"name": "sha256", "checksum": "cdb35e1cbf9c8bfd93451eac07cf7ef2f2db0a2551e1a310cf3f1999c79fa20f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720750912.5612545, "relation_name": "DATAPAI.DATAPAI.album", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.playlist": {"database": "DATAPAI", "schema": "DATAPAI", "name": "playlist", "resource_type": "seed", "package_name": "datapai", "path": "playlist.csv", "original_file_path": "seeds/playlist.csv", "unique_id": "seed.datapai.playlist", "fqn": ["datapai", "playlist"], "alias": "playlist", "checksum": {"name": "sha256", "checksum": "09418ec36435689ae9ecce6cb62d8180fad85fa81c6af00772427b62e6981388"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720750912.5697124, "relation_name": "DATAPAI.DATAPAI.playlist", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.invoice": {"database": "DATAPAI", "schema": "DATAPAI", "name": "invoice", "resource_type": "seed", "package_name": "datapai", "path": "invoice.csv", "original_file_path": "seeds/invoice.csv", "unique_id": "seed.datapai.invoice", "fqn": ["datapai", "invoice"], "alias": "invoice", "checksum": {"name": "sha256", "checksum": "7f38e76ed2d4534c0f996ae4fbdc2f119704a9b1d304679a44083cc7d04b5abd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720750912.5742464, "relation_name": "DATAPAI.DATAPAI.invoice", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.track": {"database": "DATAPAI", "schema": "DATAPAI", "name": "track", "resource_type": "seed", "package_name": "datapai", "path": "track.csv", "original_file_path": "seeds/track.csv", "unique_id": "seed.datapai.track", "fqn": ["datapai", "track"], "alias": "track", "checksum": {"name": "sha256", "checksum": "b93c68736db897d3bcec3d067ceb5d3cab9d777b53c2be098dd59482932328df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720750912.5785437, "relation_name": "DATAPAI.DATAPAI.track", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.customer": {"database": "DATAPAI", "schema": "DATAPAI", "name": "customer", "resource_type": "seed", "package_name": "datapai", "path": "customer.csv", "original_file_path": "seeds/customer.csv", "unique_id": "seed.datapai.customer", "fqn": ["datapai", "customer"], "alias": "customer", "checksum": {"name": "sha256", "checksum": "3f49250f768cd53ea2005ba141f38378acf8ce31983c225e1991ecc164c326c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720750912.582711, "relation_name": "DATAPAI.DATAPAI.customer", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.employee": {"database": "DATAPAI", "schema": "DATAPAI", "name": "employee", "resource_type": "seed", "package_name": "datapai", "path": "employee.csv", "original_file_path": "seeds/employee.csv", "unique_id": "seed.datapai.employee", "fqn": ["datapai", "employee"], "alias": "employee", "checksum": {"name": "sha256", "checksum": "441e74f57a7568e836dc8ae8b664f73491e20c52550ef6830962ef4382fa7727"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720750912.591104, "relation_name": "DATAPAI.DATAPAI.employee", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.genre": {"database": "DATAPAI", "schema": "DATAPAI", "name": "genre", "resource_type": "seed", "package_name": "datapai", "path": "genre.csv", "original_file_path": "seeds/genre.csv", "unique_id": "seed.datapai.genre", "fqn": ["datapai", "genre"], "alias": "genre", "checksum": {"name": "sha256", "checksum": "90693ab5c6ef31f4ec19c3d30eec4d769c2991c9ef75d632742ed7a078d31654"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720750912.5954316, "relation_name": "DATAPAI.DATAPAI.genre", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "test.datapai.not_null_stg_genre_genre_id.5f523677de": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "genre_id", "model": "{{ get_where_subquery(ref('stg_genre')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_genre_genre_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_genre_genre_id.sql", "original_file_path": "models/chinook/staging/_stg_genre.yml", "unique_id": "test.datapai.not_null_stg_genre_genre_id.5f523677de", "fqn": ["datapai", "chinook", "staging", "not_null_stg_genre_genre_id"], "alias": "not_null_stg_genre_genre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7257912, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_genre_genre_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_genre", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_genre"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_genre.yml/not_null_stg_genre_genre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_genre\nwhere genre_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "genre_id", "file_key_name": "models.stg_genre", "attached_node": "model.datapai.stg_genre"}, "test.datapai.unique_stg_genre_genre_id.afd28bdf4f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "genre_id", "model": "{{ get_where_subquery(ref('stg_genre')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_genre_genre_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_genre_genre_id.sql", "original_file_path": "models/chinook/staging/_stg_genre.yml", "unique_id": "test.datapai.unique_stg_genre_genre_id.afd28bdf4f", "fqn": ["datapai", "chinook", "staging", "unique_stg_genre_genre_id"], "alias": "unique_stg_genre_genre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7295372, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_genre_genre_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_genre", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_genre"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_genre.yml/unique_stg_genre_genre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    genre_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_genre\nwhere genre_id is not null\ngroup by genre_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "genre_id", "file_key_name": "models.stg_genre", "attached_node": "model.datapai.stg_genre"}, "test.datapai.not_null_stg_genre_genre_name.fd5fe8d5db": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "genre_name", "model": "{{ get_where_subquery(ref('stg_genre')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_genre_genre_name", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_genre_genre_name.sql", "original_file_path": "models/chinook/staging/_stg_genre.yml", "unique_id": "test.datapai.not_null_stg_genre_genre_name.fd5fe8d5db", "fqn": ["datapai", "chinook", "staging", "not_null_stg_genre_genre_name"], "alias": "not_null_stg_genre_genre_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7335372, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_genre_genre_name", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_genre", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_genre"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_genre.yml/not_null_stg_genre_genre_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_genre\nwhere genre_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "genre_name", "file_key_name": "models.stg_genre", "attached_node": "model.datapai.stg_genre"}, "test.datapai.not_null_stg_invoice_invoice_id.01df371aae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_invoice')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_invoice_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_invoice_id.sql", "original_file_path": "models/chinook/staging/_stg_invoice.yml", "unique_id": "test.datapai.not_null_stg_invoice_invoice_id.01df371aae", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_invoice_id"], "alias": "not_null_stg_invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7451048, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_invoice_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice.yml/not_null_stg_invoice_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_invoice", "attached_node": "model.datapai.stg_invoice"}, "test.datapai.unique_stg_invoice_invoice_id.ff62a93d3b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_invoice')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_invoice_invoice_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_invoice_invoice_id.sql", "original_file_path": "models/chinook/staging/_stg_invoice.yml", "unique_id": "test.datapai.unique_stg_invoice_invoice_id.ff62a93d3b", "fqn": ["datapai", "chinook", "staging", "unique_stg_invoice_invoice_id"], "alias": "unique_stg_invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7489245, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_invoice_invoice_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice.yml/unique_stg_invoice_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_invoice\nwhere invoice_id is not null\ngroup by invoice_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_invoice", "attached_node": "model.datapai.stg_invoice"}, "test.datapai.not_null_stg_invoice_customer_id.ad43fc527b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_invoice')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_customer_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_customer_id.sql", "original_file_path": "models/chinook/staging/_stg_invoice.yml", "unique_id": "test.datapai.not_null_stg_invoice_customer_id.ad43fc527b", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_customer_id"], "alias": "not_null_stg_invoice_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7527747, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_customer_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice.yml/not_null_stg_invoice_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_invoice", "attached_node": "model.datapai.stg_invoice"}, "test.datapai.not_null_stg_invoice_invoice_date.b071eb8986": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_date", "model": "{{ get_where_subquery(ref('stg_invoice')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_invoice_date", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_invoice_date.sql", "original_file_path": "models/chinook/staging/_stg_invoice.yml", "unique_id": "test.datapai.not_null_stg_invoice_invoice_date.b071eb8986", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_invoice_date"], "alias": "not_null_stg_invoice_invoice_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7563474, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_invoice_date", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice.yml/not_null_stg_invoice_invoice_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice\nwhere invoice_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_date", "file_key_name": "models.stg_invoice", "attached_node": "model.datapai.stg_invoice"}, "test.datapai.not_null_stg_invoice_invoice_billing_address.9f742a461f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_billing_address", "model": "{{ get_where_subquery(ref('stg_invoice')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_invoice_billing_address", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_invoice_billing_address.sql", "original_file_path": "models/chinook/staging/_stg_invoice.yml", "unique_id": "test.datapai.not_null_stg_invoice_invoice_billing_address.9f742a461f", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_invoice_billing_address"], "alias": "not_null_stg_invoice_invoice_billing_address", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7599342, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_invoice_billing_address", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice.yml/not_null_stg_invoice_invoice_billing_address.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice\nwhere invoice_billing_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_billing_address", "file_key_name": "models.stg_invoice", "attached_node": "model.datapai.stg_invoice"}, "test.datapai.not_null_stg_invoice_invoice_billing_city.8a10b5ac4d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_billing_city", "model": "{{ get_where_subquery(ref('stg_invoice')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_invoice_billing_city", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_invoice_billing_city.sql", "original_file_path": "models/chinook/staging/_stg_invoice.yml", "unique_id": "test.datapai.not_null_stg_invoice_invoice_billing_city.8a10b5ac4d", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_invoice_billing_city"], "alias": "not_null_stg_invoice_invoice_billing_city", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7635047, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_invoice_billing_city", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice.yml/not_null_stg_invoice_invoice_billing_city.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice\nwhere invoice_billing_city is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_billing_city", "file_key_name": "models.stg_invoice", "attached_node": "model.datapai.stg_invoice"}, "test.datapai.not_null_stg_invoice_invoice_billing_country.f58eed528f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_billing_country", "model": "{{ get_where_subquery(ref('stg_invoice')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_invoice_billing_country", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_invoice_billing_country.sql", "original_file_path": "models/chinook/staging/_stg_invoice.yml", "unique_id": "test.datapai.not_null_stg_invoice_invoice_billing_country.f58eed528f", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_invoice_billing_country"], "alias": "not_null_stg_invoice_invoice_billing_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7671204, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_invoice_billing_country", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice.yml/not_null_stg_invoice_invoice_billing_country.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice\nwhere invoice_billing_country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_billing_country", "file_key_name": "models.stg_invoice", "attached_node": "model.datapai.stg_invoice"}, "test.datapai.not_null_stg_invoice_invoice_total.9f7574ef23": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_total", "model": "{{ get_where_subquery(ref('stg_invoice')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_invoice_total", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_invoice_total.sql", "original_file_path": "models/chinook/staging/_stg_invoice.yml", "unique_id": "test.datapai.not_null_stg_invoice_invoice_total.9f7574ef23", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_invoice_total"], "alias": "not_null_stg_invoice_invoice_total", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.771241, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_invoice_total", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice.yml/not_null_stg_invoice_invoice_total.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice\nwhere invoice_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_total", "file_key_name": "models.stg_invoice", "attached_node": "model.datapai.stg_invoice"}, "test.datapai.not_null_stg_playlist_playlist_id.ce164d9d24": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "playlist_id", "model": "{{ get_where_subquery(ref('stg_playlist')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_playlist_playlist_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_playlist_playlist_id.sql", "original_file_path": "models/chinook/staging/_stg_playlist.yml", "unique_id": "test.datapai.not_null_stg_playlist_playlist_id.ce164d9d24", "fqn": ["datapai", "chinook", "staging", "not_null_stg_playlist_playlist_id"], "alias": "not_null_stg_playlist_playlist_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.777874, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_playlist_playlist_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_playlist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_playlist"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_playlist.yml/not_null_stg_playlist_playlist_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_playlist\nwhere playlist_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "playlist_id", "file_key_name": "models.stg_playlist", "attached_node": "model.datapai.stg_playlist"}, "test.datapai.unique_stg_playlist_playlist_id.6f899c44f6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "playlist_id", "model": "{{ get_where_subquery(ref('stg_playlist')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_playlist_playlist_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_playlist_playlist_id.sql", "original_file_path": "models/chinook/staging/_stg_playlist.yml", "unique_id": "test.datapai.unique_stg_playlist_playlist_id.6f899c44f6", "fqn": ["datapai", "chinook", "staging", "unique_stg_playlist_playlist_id"], "alias": "unique_stg_playlist_playlist_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.781496, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_playlist_playlist_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_playlist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_playlist"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_playlist.yml/unique_stg_playlist_playlist_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    playlist_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_playlist\nwhere playlist_id is not null\ngroup by playlist_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "playlist_id", "file_key_name": "models.stg_playlist", "attached_node": "model.datapai.stg_playlist"}, "test.datapai.not_null_stg_playlist_playlist_name.ee2cc91336": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "playlist_name", "model": "{{ get_where_subquery(ref('stg_playlist')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_playlist_playlist_name", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_playlist_playlist_name.sql", "original_file_path": "models/chinook/staging/_stg_playlist.yml", "unique_id": "test.datapai.not_null_stg_playlist_playlist_name.ee2cc91336", "fqn": ["datapai", "chinook", "staging", "not_null_stg_playlist_playlist_name"], "alias": "not_null_stg_playlist_playlist_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7850049, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_playlist_playlist_name", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_playlist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_playlist"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_playlist.yml/not_null_stg_playlist_playlist_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_playlist\nwhere playlist_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "playlist_name", "file_key_name": "models.stg_playlist", "attached_node": "model.datapai.stg_playlist"}, "test.datapai.not_null_stg_album_album_id.5b25d99261": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "album_id", "model": "{{ get_where_subquery(ref('stg_album')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_album_album_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_album_album_id.sql", "original_file_path": "models/chinook/staging/_stg_album.yml", "unique_id": "test.datapai.not_null_stg_album_album_id.5b25d99261", "fqn": ["datapai", "chinook", "staging", "not_null_stg_album_album_id"], "alias": "not_null_stg_album_album_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7927337, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_album_album_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_album", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_album"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_album.yml/not_null_stg_album_album_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_album\nwhere album_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "album_id", "file_key_name": "models.stg_album", "attached_node": "model.datapai.stg_album"}, "test.datapai.unique_stg_album_album_id.d12f7c9e1f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "album_id", "model": "{{ get_where_subquery(ref('stg_album')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_album_album_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_album_album_id.sql", "original_file_path": "models/chinook/staging/_stg_album.yml", "unique_id": "test.datapai.unique_stg_album_album_id.d12f7c9e1f", "fqn": ["datapai", "chinook", "staging", "unique_stg_album_album_id"], "alias": "unique_stg_album_album_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.7965162, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_album_album_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_album", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_album"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_album.yml/unique_stg_album_album_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    album_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_album\nwhere album_id is not null\ngroup by album_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "album_id", "file_key_name": "models.stg_album", "attached_node": "model.datapai.stg_album"}, "test.datapai.not_null_stg_album_album_title.1ecdc1080a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "album_title", "model": "{{ get_where_subquery(ref('stg_album')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_album_album_title", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_album_album_title.sql", "original_file_path": "models/chinook/staging/_stg_album.yml", "unique_id": "test.datapai.not_null_stg_album_album_title.1ecdc1080a", "fqn": ["datapai", "chinook", "staging", "not_null_stg_album_album_title"], "alias": "not_null_stg_album_album_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8000662, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_album_album_title", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_album", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_album"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_album.yml/not_null_stg_album_album_title.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_album\nwhere album_title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "album_title", "file_key_name": "models.stg_album", "attached_node": "model.datapai.stg_album"}, "test.datapai.not_null_stg_album_artist_id.4a798deacb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "artist_id", "model": "{{ get_where_subquery(ref('stg_album')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_album_artist_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_album_artist_id.sql", "original_file_path": "models/chinook/staging/_stg_album.yml", "unique_id": "test.datapai.not_null_stg_album_artist_id.4a798deacb", "fqn": ["datapai", "chinook", "staging", "not_null_stg_album_artist_id"], "alias": "not_null_stg_album_artist_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.803574, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_album_artist_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_album", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_album"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_album.yml/not_null_stg_album_artist_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_album\nwhere artist_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "artist_id", "file_key_name": "models.stg_album", "attached_node": "model.datapai.stg_album"}, "test.datapai.not_null_stg_employee_employee_id.102880b2ef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_id.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_id.102880b2ef", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_id"], "alias": "not_null_stg_employee_employee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8182402, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_id", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.unique_stg_employee_employee_id.756815244f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_employee_employee_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_employee_employee_id.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.unique_stg_employee_employee_id.756815244f", "fqn": ["datapai", "chinook", "staging", "unique_stg_employee_employee_id"], "alias": "unique_stg_employee_employee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8219538, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_employee_employee_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/unique_stg_employee_employee_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    employee_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_id is not null\ngroup by employee_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_id", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_first_name.321f1468a0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_first_name", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_first_name", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_first_name.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_first_name.321f1468a0", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_first_name"], "alias": "not_null_stg_employee_employee_first_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8255212, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_first_name", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_first_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_first_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_first_name", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_last_name.4f5cf3091b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_last_name", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_last_name", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_last_name.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_last_name.4f5cf3091b", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_last_name"], "alias": "not_null_stg_employee_employee_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8295145, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_last_name", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_last_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_last_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_last_name", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_title.0728ddb0bb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_title", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_title", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_title.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_title.0728ddb0bb", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_title"], "alias": "not_null_stg_employee_employee_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8331482, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_title", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_title.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_title", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_birth_date.0ad7e2d6b1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_birth_date", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_birth_date", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_birth_date.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_birth_date.0ad7e2d6b1", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_birth_date"], "alias": "not_null_stg_employee_employee_birth_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.83686, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_birth_date", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_birth_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_birth_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_birth_date", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_hire_date.3dc5845e12": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_hire_date", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_hire_date", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_hire_date.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_hire_date.3dc5845e12", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_hire_date"], "alias": "not_null_stg_employee_employee_hire_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8404503, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_hire_date", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_hire_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_hire_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_hire_date", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_country.56ae97c8ed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_country", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_country", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_country.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_country.56ae97c8ed", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_country"], "alias": "not_null_stg_employee_employee_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8439946, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_country", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_country.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_country", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_phone.b595dd7454": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_phone", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_phone", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_phone.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_phone.b595dd7454", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_phone"], "alias": "not_null_stg_employee_employee_phone", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.848125, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_phone", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_phone.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_phone is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_phone", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_postal_code.5963c5a4fa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_postal_code", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_postal_code", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_postal_code.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_postal_code.5963c5a4fa", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_postal_code"], "alias": "not_null_stg_employee_employee_postal_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8523858, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_postal_code", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_postal_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_postal_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_postal_code", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_fax.5e0929e06a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_fax", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_fax", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_fax.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_fax.5e0929e06a", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_fax"], "alias": "not_null_stg_employee_employee_fax", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.856252, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_fax", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_fax.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_fax is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_fax", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_email.31c182658d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_email", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_email", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_email.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_email.31c182658d", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_email"], "alias": "not_null_stg_employee_employee_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.860122, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_email", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_email.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_email", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_employee_employee_address.9b407327ef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_address", "model": "{{ get_where_subquery(ref('stg_employee')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_employee_employee_address", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_employee_employee_address.sql", "original_file_path": "models/chinook/staging/_stg_employee.yml", "unique_id": "test.datapai.not_null_stg_employee_employee_address.9b407327ef", "fqn": ["datapai", "chinook", "staging", "not_null_stg_employee_employee_address"], "alias": "not_null_stg_employee_employee_address", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8639264, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_employee_employee_address", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_employee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_employee"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_employee.yml/not_null_stg_employee_employee_address.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_employee\nwhere employee_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_address", "file_key_name": "models.stg_employee", "attached_node": "model.datapai.stg_employee"}, "test.datapai.not_null_stg_track_track_id.176bd09265": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "track_id", "model": "{{ get_where_subquery(ref('stg_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_track_track_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_track_track_id.sql", "original_file_path": "models/chinook/staging/_stg_track.yml", "unique_id": "test.datapai.not_null_stg_track_track_id.176bd09265", "fqn": ["datapai", "chinook", "staging", "not_null_stg_track_track_id"], "alias": "not_null_stg_track_track_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8764822, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_track_track_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_track.yml/not_null_stg_track_track_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_track\nwhere track_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "track_id", "file_key_name": "models.stg_track", "attached_node": "model.datapai.stg_track"}, "test.datapai.unique_stg_track_track_id.39ecf945cc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "track_id", "model": "{{ get_where_subquery(ref('stg_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_track_track_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_track_track_id.sql", "original_file_path": "models/chinook/staging/_stg_track.yml", "unique_id": "test.datapai.unique_stg_track_track_id.39ecf945cc", "fqn": ["datapai", "chinook", "staging", "unique_stg_track_track_id"], "alias": "unique_stg_track_track_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.880271, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_track_track_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_track.yml/unique_stg_track_track_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    track_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_track\nwhere track_id is not null\ngroup by track_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "track_id", "file_key_name": "models.stg_track", "attached_node": "model.datapai.stg_track"}, "test.datapai.not_null_stg_track_track_name.9190c61d6c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "track_name", "model": "{{ get_where_subquery(ref('stg_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_track_track_name", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_track_track_name.sql", "original_file_path": "models/chinook/staging/_stg_track.yml", "unique_id": "test.datapai.not_null_stg_track_track_name.9190c61d6c", "fqn": ["datapai", "chinook", "staging", "not_null_stg_track_track_name"], "alias": "not_null_stg_track_track_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8840036, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_track_track_name", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_track.yml/not_null_stg_track_track_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_track\nwhere track_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "track_name", "file_key_name": "models.stg_track", "attached_node": "model.datapai.stg_track"}, "test.datapai.not_null_stg_track_album_id.8e679e40b6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "album_id", "model": "{{ get_where_subquery(ref('stg_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_track_album_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_track_album_id.sql", "original_file_path": "models/chinook/staging/_stg_track.yml", "unique_id": "test.datapai.not_null_stg_track_album_id.8e679e40b6", "fqn": ["datapai", "chinook", "staging", "not_null_stg_track_album_id"], "alias": "not_null_stg_track_album_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.887795, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_track_album_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_track.yml/not_null_stg_track_album_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_track\nwhere album_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "album_id", "file_key_name": "models.stg_track", "attached_node": "model.datapai.stg_track"}, "test.datapai.not_null_stg_track_media_type_id.8d676c31f1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "media_type_id", "model": "{{ get_where_subquery(ref('stg_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_track_media_type_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_track_media_type_id.sql", "original_file_path": "models/chinook/staging/_stg_track.yml", "unique_id": "test.datapai.not_null_stg_track_media_type_id.8d676c31f1", "fqn": ["datapai", "chinook", "staging", "not_null_stg_track_media_type_id"], "alias": "not_null_stg_track_media_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8919818, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_track_media_type_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_track.yml/not_null_stg_track_media_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_track\nwhere media_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "media_type_id", "file_key_name": "models.stg_track", "attached_node": "model.datapai.stg_track"}, "test.datapai.not_null_stg_track_genre_id.cf83941793": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "genre_id", "model": "{{ get_where_subquery(ref('stg_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_track_genre_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_track_genre_id.sql", "original_file_path": "models/chinook/staging/_stg_track.yml", "unique_id": "test.datapai.not_null_stg_track_genre_id.cf83941793", "fqn": ["datapai", "chinook", "staging", "not_null_stg_track_genre_id"], "alias": "not_null_stg_track_genre_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.895644, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_track_genre_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_track.yml/not_null_stg_track_genre_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_track\nwhere genre_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "genre_id", "file_key_name": "models.stg_track", "attached_node": "model.datapai.stg_track"}, "test.datapai.not_null_stg_track_track_milliseconds.578ce7a180": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "track_milliseconds", "model": "{{ get_where_subquery(ref('stg_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_track_track_milliseconds", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_track_track_milliseconds.sql", "original_file_path": "models/chinook/staging/_stg_track.yml", "unique_id": "test.datapai.not_null_stg_track_track_milliseconds.578ce7a180", "fqn": ["datapai", "chinook", "staging", "not_null_stg_track_track_milliseconds"], "alias": "not_null_stg_track_track_milliseconds", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.8994548, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_track_track_milliseconds", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_track.yml/not_null_stg_track_track_milliseconds.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_track\nwhere track_milliseconds is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "track_milliseconds", "file_key_name": "models.stg_track", "attached_node": "model.datapai.stg_track"}, "test.datapai.not_null_stg_track_track_bytes.0f9f9470d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "track_bytes", "model": "{{ get_where_subquery(ref('stg_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_track_track_bytes", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_track_track_bytes.sql", "original_file_path": "models/chinook/staging/_stg_track.yml", "unique_id": "test.datapai.not_null_stg_track_track_bytes.0f9f9470d9", "fqn": ["datapai", "chinook", "staging", "not_null_stg_track_track_bytes"], "alias": "not_null_stg_track_track_bytes", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.9032612, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_track_track_bytes", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_track.yml/not_null_stg_track_track_bytes.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_track\nwhere track_bytes is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "track_bytes", "file_key_name": "models.stg_track", "attached_node": "model.datapai.stg_track"}, "test.datapai.not_null_stg_track_track_unit_price.3541e4453d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "track_unit_price", "model": "{{ get_where_subquery(ref('stg_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_track_track_unit_price", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_track_track_unit_price.sql", "original_file_path": "models/chinook/staging/_stg_track.yml", "unique_id": "test.datapai.not_null_stg_track_track_unit_price.3541e4453d", "fqn": ["datapai", "chinook", "staging", "not_null_stg_track_track_unit_price"], "alias": "not_null_stg_track_track_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.9072216, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_track_track_unit_price", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_track.yml/not_null_stg_track_track_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_track\nwhere track_unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "track_unit_price", "file_key_name": "models.stg_track", "attached_node": "model.datapai.stg_track"}, "test.datapai.not_null_stg_artist_artist_id.a7b197e381": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "artist_id", "model": "{{ get_where_subquery(ref('stg_artist')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_artist_artist_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_artist_artist_id.sql", "original_file_path": "models/chinook/staging/_stg_artist.yml", "unique_id": "test.datapai.not_null_stg_artist_artist_id.a7b197e381", "fqn": ["datapai", "chinook", "staging", "not_null_stg_artist_artist_id"], "alias": "not_null_stg_artist_artist_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.9148726, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_artist_artist_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_artist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_artist"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_artist.yml/not_null_stg_artist_artist_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_artist\nwhere artist_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "artist_id", "file_key_name": "models.stg_artist", "attached_node": "model.datapai.stg_artist"}, "test.datapai.unique_stg_artist_artist_id.be6d44e19a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "artist_id", "model": "{{ get_where_subquery(ref('stg_artist')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_artist_artist_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_artist_artist_id.sql", "original_file_path": "models/chinook/staging/_stg_artist.yml", "unique_id": "test.datapai.unique_stg_artist_artist_id.be6d44e19a", "fqn": ["datapai", "chinook", "staging", "unique_stg_artist_artist_id"], "alias": "unique_stg_artist_artist_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.918752, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_artist_artist_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_artist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_artist"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_artist.yml/unique_stg_artist_artist_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    artist_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_artist\nwhere artist_id is not null\ngroup by artist_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "artist_id", "file_key_name": "models.stg_artist", "attached_node": "model.datapai.stg_artist"}, "test.datapai.not_null_stg_artist_artist_name.96f41e5e0a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "artist_name", "model": "{{ get_where_subquery(ref('stg_artist')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_artist_artist_name", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_artist_artist_name.sql", "original_file_path": "models/chinook/staging/_stg_artist.yml", "unique_id": "test.datapai.not_null_stg_artist_artist_name.96f41e5e0a", "fqn": ["datapai", "chinook", "staging", "not_null_stg_artist_artist_name"], "alias": "not_null_stg_artist_artist_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.922511, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_artist_artist_name", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_artist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_artist"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_artist.yml/not_null_stg_artist_artist_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_artist\nwhere artist_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "artist_name", "file_key_name": "models.stg_artist", "attached_node": "model.datapai.stg_artist"}, "test.datapai.not_null_stg_customer_customer_id.4721d3b88d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_customer_customer_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_customer_customer_id.sql", "original_file_path": "models/chinook/staging/_stg_customer.yml", "unique_id": "test.datapai.not_null_stg_customer_customer_id.4721d3b88d", "fqn": ["datapai", "chinook", "staging", "not_null_stg_customer_customer_id"], "alias": "not_null_stg_customer_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.9379761, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_customer_customer_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_customer.yml/not_null_stg_customer_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_customer\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customer", "attached_node": "model.datapai.stg_customer"}, "test.datapai.unique_stg_customer_customer_id.310773d0ea": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customer')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_customer_customer_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_customer_customer_id.sql", "original_file_path": "models/chinook/staging/_stg_customer.yml", "unique_id": "test.datapai.unique_stg_customer_customer_id.310773d0ea", "fqn": ["datapai", "chinook", "staging", "unique_stg_customer_customer_id"], "alias": "unique_stg_customer_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.9417474, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_customer_customer_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_customer.yml/unique_stg_customer_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_customer\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customer", "attached_node": "model.datapai.stg_customer"}, "test.datapai.not_null_stg_customer_customer_first_name.0f590c04e3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_first_name", "model": "{{ get_where_subquery(ref('stg_customer')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_customer_customer_first_name", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_customer_customer_first_name.sql", "original_file_path": "models/chinook/staging/_stg_customer.yml", "unique_id": "test.datapai.not_null_stg_customer_customer_first_name.0f590c04e3", "fqn": ["datapai", "chinook", "staging", "not_null_stg_customer_customer_first_name"], "alias": "not_null_stg_customer_customer_first_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.9454453, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_customer_customer_first_name", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_customer.yml/not_null_stg_customer_customer_first_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_customer\nwhere customer_first_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_first_name", "file_key_name": "models.stg_customer", "attached_node": "model.datapai.stg_customer"}, "test.datapai.not_null_stg_customer_customer_last_name.15080c06e8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_last_name", "model": "{{ get_where_subquery(ref('stg_customer')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_customer_customer_last_name", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_customer_customer_last_name.sql", "original_file_path": "models/chinook/staging/_stg_customer.yml", "unique_id": "test.datapai.not_null_stg_customer_customer_last_name.15080c06e8", "fqn": ["datapai", "chinook", "staging", "not_null_stg_customer_customer_last_name"], "alias": "not_null_stg_customer_customer_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.9491503, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_customer_customer_last_name", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_customer.yml/not_null_stg_customer_customer_last_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_customer\nwhere customer_last_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_last_name", "file_key_name": "models.stg_customer", "attached_node": "model.datapai.stg_customer"}, "test.datapai.not_null_stg_customer_customer_address.852191b5ef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_address", "model": "{{ get_where_subquery(ref('stg_customer')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_customer_customer_address", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_customer_customer_address.sql", "original_file_path": "models/chinook/staging/_stg_customer.yml", "unique_id": "test.datapai.not_null_stg_customer_customer_address.852191b5ef", "fqn": ["datapai", "chinook", "staging", "not_null_stg_customer_customer_address"], "alias": "not_null_stg_customer_customer_address", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.95321, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_customer_customer_address", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_customer.yml/not_null_stg_customer_customer_address.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_customer\nwhere customer_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_address", "file_key_name": "models.stg_customer", "attached_node": "model.datapai.stg_customer"}, "test.datapai.not_null_stg_customer_customer_city.07d3671de3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_city", "model": "{{ get_where_subquery(ref('stg_customer')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_customer_customer_city", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_customer_customer_city.sql", "original_file_path": "models/chinook/staging/_stg_customer.yml", "unique_id": "test.datapai.not_null_stg_customer_customer_city.07d3671de3", "fqn": ["datapai", "chinook", "staging", "not_null_stg_customer_customer_city"], "alias": "not_null_stg_customer_customer_city", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.956932, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_customer_customer_city", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_customer.yml/not_null_stg_customer_customer_city.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_customer\nwhere customer_city is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_city", "file_key_name": "models.stg_customer", "attached_node": "model.datapai.stg_customer"}, "test.datapai.not_null_stg_customer_customer_country.3917a1df1f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_country", "model": "{{ get_where_subquery(ref('stg_customer')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_customer_customer_country", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_customer_customer_country.sql", "original_file_path": "models/chinook/staging/_stg_customer.yml", "unique_id": "test.datapai.not_null_stg_customer_customer_country.3917a1df1f", "fqn": ["datapai", "chinook", "staging", "not_null_stg_customer_customer_country"], "alias": "not_null_stg_customer_customer_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.960546, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_customer_customer_country", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_customer.yml/not_null_stg_customer_customer_country.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_customer\nwhere customer_country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_country", "file_key_name": "models.stg_customer", "attached_node": "model.datapai.stg_customer"}, "test.datapai.not_null_stg_customer_customer_email.2a1ad070ed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_email", "model": "{{ get_where_subquery(ref('stg_customer')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_customer_customer_email", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_customer_customer_email.sql", "original_file_path": "models/chinook/staging/_stg_customer.yml", "unique_id": "test.datapai.not_null_stg_customer_customer_email.2a1ad070ed", "fqn": ["datapai", "chinook", "staging", "not_null_stg_customer_customer_email"], "alias": "not_null_stg_customer_customer_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.964259, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_customer_customer_email", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_customer.yml/not_null_stg_customer_customer_email.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_customer\nwhere customer_email is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_email", "file_key_name": "models.stg_customer", "attached_node": "model.datapai.stg_customer"}, "test.datapai.not_null_stg_customer_employee_id.01436fa1bd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee_id", "model": "{{ get_where_subquery(ref('stg_customer')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_customer_employee_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_customer_employee_id.sql", "original_file_path": "models/chinook/staging/_stg_customer.yml", "unique_id": "test.datapai.not_null_stg_customer_employee_id.01436fa1bd", "fqn": ["datapai", "chinook", "staging", "not_null_stg_customer_employee_id"], "alias": "not_null_stg_customer_employee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720750912.9679954, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_customer_employee_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_customer.yml/not_null_stg_customer_employee_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_customer\nwhere employee_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "employee_id", "file_key_name": "models.stg_customer", "attached_node": "model.datapai.stg_customer"}, "model.datapai.fct_invoice_line": {"database": "DATAPAI", "schema": "DATAPAI", "name": "fct_invoice_line", "resource_type": "model", "package_name": "datapai", "path": "chinook/intermediate/fct_invoice_line.sql", "original_file_path": "models/chinook/intermediate/fct_invoice_line.sql", "unique_id": "model.datapai.fct_invoice_line", "fqn": ["datapai", "chinook", "intermediate", "fct_invoice_line"], "alias": "fct_invoice_line", "checksum": {"name": "sha256", "checksum": "bcb4a8412ec7c13d44d312894d26d6e911a687d9c9ddf709f2827d4442fa817a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["fact"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["fact"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "fact"}, "created_at": 1720752814.782903, "relation_name": "DATAPAI.DATAPAI.fct_invoice_line", "raw_code": "{{ config(materialized=\"table\", tags=\"fact\") }}\n\nSELECT * FROM {{ ref('stg_invoice_line') }}", "language": "sql", "refs": [{"name": "stg_invoice_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.stg_invoice_line"]}, "compiled_path": "target/compiled/datapai/models/chinook/intermediate/fct_invoice_line.sql", "compiled": true, "compiled_code": "\n\nSELECT * FROM DATAPAI.DATAPAI.stg_invoice_line", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_invoice_line": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_invoice_line", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_invoice_line.sql", "original_file_path": "models/chinook/staging/stg_invoice_line.sql", "unique_id": "model.datapai.stg_invoice_line", "fqn": ["datapai", "chinook", "staging", "stg_invoice_line"], "alias": "stg_invoice_line", "checksum": {"name": "sha256", "checksum": "a930c213e7c92669d936981bc571d371adafdd3ac958119f9dacdb27e9aff94b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of invoice lines", "columns": {"invoice_line_id": {"name": "invoice_line_id", "description": "Invoice line identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Invoice identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track_id": {"name": "track_id", "description": "Track identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track_unit_price": {"name": "track_unit_price", "description": "Price of the track", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track_quantity": {"name": "track_quantity", "description": "Quantity of the track", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_invoice_line.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720752815.0210378, "relation_name": "DATAPAI.DATAPAI.stg_invoice_line", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT invoice_line_id,\n       invoice_id,\n       track_id AS track_id,\n       unit_price AS track_unit_price,\n       quantity AS track_quantity\n  FROM {{ ref('invoiceline') }}", "language": "sql", "refs": [{"name": "invoiceline", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.invoiceline"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_invoice_line.sql", "compiled": true, "compiled_code": "\n\nSELECT invoice_line_id,\n       invoice_id,\n       track_id AS track_id,\n       unit_price AS track_unit_price,\n       quantity AS track_quantity\n  FROM DATAPAI.DATAPAI.invoiceline", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.obt_playlist_track": {"database": "DATAPAI", "schema": "DATAPAI", "name": "obt_playlist_track", "resource_type": "model", "package_name": "datapai", "path": "chinook/obt/obt_playlist_track.sql", "original_file_path": "models/chinook/obt/obt_playlist_track.sql", "unique_id": "model.datapai.obt_playlist_track", "fqn": ["datapai", "chinook", "obt", "obt_playlist_track"], "alias": "obt_playlist_track", "checksum": {"name": "sha256", "checksum": "17501cb63d102d70718ee8a94629db77fcf549ed84103e7d01ca36bfcbea71fb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["obt"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["obt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "obt"}, "created_at": 1720752814.8076606, "relation_name": "DATAPAI.DATAPAI.obt_playlist_track", "raw_code": "{{ config(materialized=\"table\", tags=\"obt\") }}\n\n    SELECT playlist_id,\n           playlist_name,\n           track_id,\n           track_name,\n           artist_name,\n           track_composer_name,\n           track_milliseconds,\n           track_bytes,\n           album_title,\n           genre_name,\n           media_type_name\n      FROM {{ ref('fct_playlist_track') }} playlist_track\n LEFT JOIN {{ ref('stg_playlist') }} track USING (playlist_id)", "language": "sql", "refs": [{"name": "fct_playlist_track", "package": null, "version": null}, {"name": "stg_playlist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.fct_playlist_track", "model.datapai.stg_playlist"]}, "compiled_path": "target/compiled/datapai/models/chinook/obt/obt_playlist_track.sql", "compiled": true, "compiled_code": "\n\n    SELECT playlist_id,\n           playlist_name,\n           track_id,\n           track_name,\n           artist_name,\n           track_composer_name,\n           track_milliseconds,\n           track_bytes,\n           album_title,\n           genre_name,\n           media_type_name\n      FROM DATAPAI.DATAPAI.fct_playlist_track playlist_track\n LEFT JOIN DATAPAI.DATAPAI.stg_playlist track USING (playlist_id)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.fct_playlist_track": {"database": "DATAPAI", "schema": "DATAPAI", "name": "fct_playlist_track", "resource_type": "model", "package_name": "datapai", "path": "chinook/intermediate/fct_playlist_track.sql", "original_file_path": "models/chinook/intermediate/fct_playlist_track.sql", "unique_id": "model.datapai.fct_playlist_track", "fqn": ["datapai", "chinook", "intermediate", "fct_playlist_track"], "alias": "fct_playlist_track", "checksum": {"name": "sha256", "checksum": "7b25c0c04f8c960e92d42359452634c66127e7f0cd5c48e3b73ee57dce21c0a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["fact"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["fact"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "fact"}, "created_at": 1720752814.8129735, "relation_name": "DATAPAI.DATAPAI.fct_playlist_track", "raw_code": "{{ config(materialized=\"table\", tags=\"fact\") }}\n\n    SELECT *\n      FROM {{ ref('stg_playlist_track') }} playlist_track\n LEFT JOIN {{ ref('dim_track') }} track USING (track_id)", "language": "sql", "refs": [{"name": "stg_playlist_track", "package": null, "version": null}, {"name": "dim_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.stg_playlist_track", "model.datapai.dim_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/intermediate/fct_playlist_track.sql", "compiled": true, "compiled_code": "\n\n    SELECT *\n      FROM DATAPAI.DATAPAI.stg_playlist_track playlist_track\n LEFT JOIN DATAPAI.DATAPAI.dim_track track USING (track_id)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_playlist_track": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_playlist_track", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_playlist_track.sql", "original_file_path": "models/chinook/staging/stg_playlist_track.sql", "unique_id": "model.datapai.stg_playlist_track", "fqn": ["datapai", "chinook", "staging", "stg_playlist_track"], "alias": "stg_playlist_track", "checksum": {"name": "sha256", "checksum": "740b780b7c0f82a2c01fc827bf02db0548a24a2100e6c5c93b44354dd77059c3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of media types", "columns": {"playlist_id": {"name": "playlist_id", "description": "Playlist identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "track_id": {"name": "track_id", "description": "Track identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_playlist_track.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720752815.083963, "relation_name": "DATAPAI.DATAPAI.stg_playlist_track", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT * FROM {{ ref('playlisttrack') }}", "language": "sql", "refs": [{"name": "playlisttrack", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.playlisttrack"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_playlist_track.sql", "compiled": true, "compiled_code": "\n\nSELECT * FROM DATAPAI.DATAPAI.playlisttrack", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.dim_track": {"database": "DATAPAI", "schema": "DATAPAI", "name": "dim_track", "resource_type": "model", "package_name": "datapai", "path": "chinook/intermediate/dim_track.sql", "original_file_path": "models/chinook/intermediate/dim_track.sql", "unique_id": "model.datapai.dim_track", "fqn": ["datapai", "chinook", "intermediate", "dim_track"], "alias": "dim_track", "checksum": {"name": "sha256", "checksum": "56b3149124fbfcf96286d9f62ff2980bac9fa4fb031b8540f663b855a7616377"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dim"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["dim"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "dim"}, "created_at": 1720752814.8234594, "relation_name": "DATAPAI.DATAPAI.dim_track", "raw_code": "{{ config(materialized=\"table\", tags=\"dim\") }}\n\n     WITH track AS (\n          SELECT track_id, \n                 track.track_name,\n                 artist.artist_name,\n                 track.track_composer_name,\n                 album.album_title,\n                 genre.genre_name,\n                 track.track_milliseconds,\n                 track.track_bytes,\n                 media_type.media_type_name\n            FROM {{ ref('stg_track') }} track\n       LEFT JOIN {{ ref('stg_album') }} album USING (album_id)\n       LEFT JOIN {{ ref('stg_artist') }} artist USING (artist_id)\n       LEFT JOIN {{ ref('stg_genre') }} genre USING (genre_id)\n       LEFT JOIN {{ ref('stg_media_type') }} media_type USING (media_type_id)\n     )\n     SELECT * FROM track", "language": "sql", "refs": [{"name": "stg_track", "package": null, "version": null}, {"name": "stg_album", "package": null, "version": null}, {"name": "stg_artist", "package": null, "version": null}, {"name": "stg_genre", "package": null, "version": null}, {"name": "stg_media_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.stg_track", "model.datapai.stg_album", "model.datapai.stg_artist", "model.datapai.stg_genre", "model.datapai.stg_media_type"]}, "compiled_path": "target/compiled/datapai/models/chinook/intermediate/dim_track.sql", "compiled": true, "compiled_code": "\n\n     WITH track AS (\n          SELECT track_id, \n                 track.track_name,\n                 artist.artist_name,\n                 track.track_composer_name,\n                 album.album_title,\n                 genre.genre_name,\n                 track.track_milliseconds,\n                 track.track_bytes,\n                 media_type.media_type_name\n            FROM DATAPAI.DATAPAI.stg_track track\n       LEFT JOIN DATAPAI.DATAPAI.stg_album album USING (album_id)\n       LEFT JOIN DATAPAI.DATAPAI.stg_artist artist USING (artist_id)\n       LEFT JOIN DATAPAI.DATAPAI.stg_genre genre USING (genre_id)\n       LEFT JOIN DATAPAI.DATAPAI.stg_media_type media_type USING (media_type_id)\n     )\n     SELECT * FROM track", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.stg_media_type": {"database": "DATAPAI", "schema": "DATAPAI", "name": "stg_media_type", "resource_type": "model", "package_name": "datapai", "path": "chinook/staging/stg_media_type.sql", "original_file_path": "models/chinook/staging/stg_media_type.sql", "unique_id": "model.datapai.stg_media_type", "fqn": ["datapai", "chinook", "staging", "stg_media_type"], "alias": "stg_media_type", "checksum": {"name": "sha256", "checksum": "9cf52625e1cd69a8c70449b4c1694e1e6cee2ee4bc2d03f0af5cf17b7bf9402a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["staging"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["staging"], "description": "Contains list of media types", "columns": {"media_type_id": {"name": "media_type_id", "description": "Media type identifier key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "media_type_name": {"name": "media_type_name", "description": "Name of the media type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "datapai://models/chinook/staging/_stg_media_type.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": "staging"}, "created_at": 1720752815.0937417, "relation_name": "DATAPAI.DATAPAI.stg_media_type", "raw_code": "{{ config(materialized=\"view\", tags=\"staging\") }}\n\nSELECT media_type_id,\n       name AS media_type_name\n  FROM {{ ref('mediatype') }}", "language": "sql", "refs": [{"name": "mediatype", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.datapai.mediatype"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/stg_media_type.sql", "compiled": true, "compiled_code": "\n\nSELECT media_type_id,\n       name AS media_type_name\n  FROM DATAPAI.DATAPAI.mediatype", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "seed.datapai.playlisttrack": {"database": "DATAPAI", "schema": "DATAPAI", "name": "playlisttrack", "resource_type": "seed", "package_name": "datapai", "path": "playlisttrack.csv", "original_file_path": "seeds/playlisttrack.csv", "unique_id": "seed.datapai.playlisttrack", "fqn": ["datapai", "playlisttrack"], "alias": "playlisttrack", "checksum": {"name": "sha256", "checksum": "2e499756d909413f59448b59fdadec4ee96a33898af1ad42f9d50dc2346392de"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720752814.9723153, "relation_name": "DATAPAI.DATAPAI.playlisttrack", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.mediatype": {"database": "DATAPAI", "schema": "DATAPAI", "name": "mediatype", "resource_type": "seed", "package_name": "datapai", "path": "mediatype.csv", "original_file_path": "seeds/mediatype.csv", "unique_id": "seed.datapai.mediatype", "fqn": ["datapai", "mediatype"], "alias": "mediatype", "checksum": {"name": "sha256", "checksum": "2709b415cdb677c58885ac718fa1a6bd88bfd60eeb0f02748f8db43a91ff0bbb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720752814.9768307, "relation_name": "DATAPAI.DATAPAI.mediatype", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "seed.datapai.invoiceline": {"database": "DATAPAI", "schema": "DATAPAI", "name": "invoiceline", "resource_type": "seed", "package_name": "datapai", "path": "invoiceline.csv", "original_file_path": "seeds/invoiceline.csv", "unique_id": "seed.datapai.invoiceline", "fqn": ["datapai", "invoiceline"], "alias": "invoiceline", "checksum": {"name": "sha256", "checksum": "9e82968fb75edcb1db60fd956fe6428367d6e20f028187ad39c81acc7eed2251"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": false}, "created_at": 1720752814.9810455, "relation_name": "DATAPAI.DATAPAI.invoiceline", "raw_code": "", "root_path": "/home/ec2-user/git/dbt-demo", "depends_on": {"macros": []}}, "test.datapai.not_null_stg_invoice_line_invoice_line_id.c9cc6cb0b8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_line_id", "model": "{{ get_where_subquery(ref('stg_invoice_line')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_line_invoice_line_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_line_invoice_line_id.sql", "original_file_path": "models/chinook/staging/_stg_invoice_line.yml", "unique_id": "test.datapai.not_null_stg_invoice_line_invoice_line_id.c9cc6cb0b8", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_line_invoice_line_id"], "alias": "not_null_stg_invoice_line_invoice_line_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.0604446, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_line_invoice_line_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice_line"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice_line.yml/not_null_stg_invoice_line_invoice_line_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice_line\nwhere invoice_line_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_line_id", "file_key_name": "models.stg_invoice_line", "attached_node": "model.datapai.stg_invoice_line"}, "test.datapai.unique_stg_invoice_line_invoice_line_id.77928a3e6b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_line_id", "model": "{{ get_where_subquery(ref('stg_invoice_line')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_invoice_line_invoice_line_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_invoice_line_invoice_line_id.sql", "original_file_path": "models/chinook/staging/_stg_invoice_line.yml", "unique_id": "test.datapai.unique_stg_invoice_line_invoice_line_id.77928a3e6b", "fqn": ["datapai", "chinook", "staging", "unique_stg_invoice_line_invoice_line_id"], "alias": "unique_stg_invoice_line_invoice_line_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.064332, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_invoice_line_invoice_line_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice_line"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice_line.yml/unique_stg_invoice_line_invoice_line_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_line_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_invoice_line\nwhere invoice_line_id is not null\ngroup by invoice_line_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_line_id", "file_key_name": "models.stg_invoice_line", "attached_node": "model.datapai.stg_invoice_line"}, "test.datapai.not_null_stg_invoice_line_invoice_id.50f6562bf0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_invoice_line')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_line_invoice_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_line_invoice_id.sql", "original_file_path": "models/chinook/staging/_stg_invoice_line.yml", "unique_id": "test.datapai.not_null_stg_invoice_line_invoice_id.50f6562bf0", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_line_invoice_id"], "alias": "not_null_stg_invoice_line_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.0678592, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_line_invoice_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice_line"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice_line.yml/not_null_stg_invoice_line_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice_line\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_invoice_line", "attached_node": "model.datapai.stg_invoice_line"}, "test.datapai.not_null_stg_invoice_line_track_id.5d35924e21": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "track_id", "model": "{{ get_where_subquery(ref('stg_invoice_line')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_line_track_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_line_track_id.sql", "original_file_path": "models/chinook/staging/_stg_invoice_line.yml", "unique_id": "test.datapai.not_null_stg_invoice_line_track_id.5d35924e21", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_line_track_id"], "alias": "not_null_stg_invoice_line_track_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.0713682, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_line_track_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice_line"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice_line.yml/not_null_stg_invoice_line_track_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice_line\nwhere track_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "track_id", "file_key_name": "models.stg_invoice_line", "attached_node": "model.datapai.stg_invoice_line"}, "test.datapai.not_null_stg_invoice_line_track_unit_price.12de227af6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "track_unit_price", "model": "{{ get_where_subquery(ref('stg_invoice_line')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_line_track_unit_price", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_line_track_unit_price.sql", "original_file_path": "models/chinook/staging/_stg_invoice_line.yml", "unique_id": "test.datapai.not_null_stg_invoice_line_track_unit_price.12de227af6", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_line_track_unit_price"], "alias": "not_null_stg_invoice_line_track_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.0747747, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_line_track_unit_price", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice_line"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice_line.yml/not_null_stg_invoice_line_track_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice_line\nwhere track_unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "track_unit_price", "file_key_name": "models.stg_invoice_line", "attached_node": "model.datapai.stg_invoice_line"}, "test.datapai.not_null_stg_invoice_line_track_quantity.ae23361304": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "track_quantity", "model": "{{ get_where_subquery(ref('stg_invoice_line')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_invoice_line_track_quantity", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_invoice_line_track_quantity.sql", "original_file_path": "models/chinook/staging/_stg_invoice_line.yml", "unique_id": "test.datapai.not_null_stg_invoice_line_track_quantity.ae23361304", "fqn": ["datapai", "chinook", "staging", "not_null_stg_invoice_line_track_quantity"], "alias": "not_null_stg_invoice_line_track_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.0796547, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_invoice_line_track_quantity", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_invoice_line", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_invoice_line"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_invoice_line.yml/not_null_stg_invoice_line_track_quantity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_invoice_line\nwhere track_quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "track_quantity", "file_key_name": "models.stg_invoice_line", "attached_node": "model.datapai.stg_invoice_line"}, "test.datapai.not_null_stg_playlist_track_playlist_id.a509a68ada": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "playlist_id", "model": "{{ get_where_subquery(ref('stg_playlist_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_playlist_track_playlist_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_playlist_track_playlist_id.sql", "original_file_path": "models/chinook/staging/_stg_playlist_track.yml", "unique_id": "test.datapai.not_null_stg_playlist_track_playlist_id.a509a68ada", "fqn": ["datapai", "chinook", "staging", "not_null_stg_playlist_track_playlist_id"], "alias": "not_null_stg_playlist_track_playlist_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.0859838, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_playlist_track_playlist_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_playlist_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_playlist_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_playlist_track.yml/not_null_stg_playlist_track_playlist_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_playlist_track\nwhere playlist_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "playlist_id", "file_key_name": "models.stg_playlist_track", "attached_node": "model.datapai.stg_playlist_track"}, "test.datapai.not_null_stg_playlist_track_track_id.971e5c3ed1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "track_id", "model": "{{ get_where_subquery(ref('stg_playlist_track')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_playlist_track_track_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_playlist_track_track_id.sql", "original_file_path": "models/chinook/staging/_stg_playlist_track.yml", "unique_id": "test.datapai.not_null_stg_playlist_track_track_id.971e5c3ed1", "fqn": ["datapai", "chinook", "staging", "not_null_stg_playlist_track_track_id"], "alias": "not_null_stg_playlist_track_track_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.0895016, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_playlist_track_track_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_playlist_track", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_playlist_track"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_playlist_track.yml/not_null_stg_playlist_track_track_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_playlist_track\nwhere track_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "track_id", "file_key_name": "models.stg_playlist_track", "attached_node": "model.datapai.stg_playlist_track"}, "test.datapai.not_null_stg_media_type_media_type_id.7826e42fc1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "media_type_id", "model": "{{ get_where_subquery(ref('stg_media_type')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_media_type_media_type_id", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_media_type_media_type_id.sql", "original_file_path": "models/chinook/staging/_stg_media_type.yml", "unique_id": "test.datapai.not_null_stg_media_type_media_type_id.7826e42fc1", "fqn": ["datapai", "chinook", "staging", "not_null_stg_media_type_media_type_id"], "alias": "not_null_stg_media_type_media_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.0956593, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_media_type_media_type_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_media_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_media_type"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_media_type.yml/not_null_stg_media_type_media_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_media_type\nwhere media_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "media_type_id", "file_key_name": "models.stg_media_type", "attached_node": "model.datapai.stg_media_type"}, "test.datapai.unique_stg_media_type_media_type_id.6cc267ef44": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "media_type_id", "model": "{{ get_where_subquery(ref('stg_media_type')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "unique_stg_media_type_media_type_id", "resource_type": "test", "package_name": "datapai", "path": "unique_stg_media_type_media_type_id.sql", "original_file_path": "models/chinook/staging/_stg_media_type.yml", "unique_id": "test.datapai.unique_stg_media_type_media_type_id.6cc267ef44", "fqn": ["datapai", "chinook", "staging", "unique_stg_media_type_media_type_id"], "alias": "unique_stg_media_type_media_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.0994592, "relation_name": "DATAPAI.DATAPAI_test_audit.unique_stg_media_type_media_type_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_media_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_media_type"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_media_type.yml/unique_stg_media_type_media_type_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    media_type_id as unique_field,\n    count(*) as n_records\n\nfrom DATAPAI.DATAPAI.stg_media_type\nwhere media_type_id is not null\ngroup by media_type_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "media_type_id", "file_key_name": "models.stg_media_type", "attached_node": "model.datapai.stg_media_type"}, "test.datapai.not_null_stg_media_type_media_type_name.13041c7733": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "media_type_name", "model": "{{ get_where_subquery(ref('stg_media_type')) }}"}, "namespace": null}, "database": "DATAPAI", "schema": "DATAPAI_test_audit", "name": "not_null_stg_media_type_media_type_name", "resource_type": "test", "package_name": "datapai", "path": "not_null_stg_media_type_media_type_name.sql", "original_file_path": "models/chinook/staging/_stg_media_type.yml", "unique_id": "test.datapai.not_null_stg_media_type_media_type_name.13041c7733", "fqn": ["datapai", "chinook", "staging", "not_null_stg_media_type_media_type_name"], "alias": "not_null_stg_media_type_media_type_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "test_audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": 1000, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "schema": "test_audit", "limit": 1000}, "created_at": 1720752815.1029005, "relation_name": "DATAPAI.DATAPAI_test_audit.not_null_stg_media_type_media_type_name", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_media_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.datapai.stg_media_type"]}, "compiled_path": "target/compiled/datapai/models/chinook/staging/_stg_media_type.yml/not_null_stg_media_type_media_type_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom DATAPAI.DATAPAI.stg_media_type\nwhere media_type_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "media_type_name", "file_key_name": "models.stg_media_type", "attached_node": "model.datapai.stg_media_type"}, "model.datapai.dim_date": {"database": "DATAPAI", "schema": "DATAPAI", "name": "dim_date", "resource_type": "model", "package_name": "datapai", "path": "chinook/intermediate/dim_date.sql", "original_file_path": "models/chinook/intermediate/dim_date.sql", "unique_id": "model.datapai.dim_date", "fqn": ["datapai", "chinook", "intermediate", "dim_date"], "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "7a48b95ac4485bb544617bb383a32fd1dc1a52560bdb6a163650b6515de1ee20"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dim"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["dim"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["dim"]}, "created_at": 1720754367.8607202, "relation_name": "DATAPAI.DATAPAI.dim_date", "raw_code": "{{ config(\n    materialized=\"table\",\n    tags=[\"dim\"]\n) }}\n\nWITH RECURSIVE generate_date AS (\n    SELECT DATE '2009-01-01' AS date_key\n    UNION ALL\n    SELECT DATEADD(DAY, 1, date_key)\n    FROM generate_date\n    WHERE date_key <= DATE '2013-12-31'\n)\nSELECT\n    date_key AS date_key,\n    DAYOFYEAR(date_key) AS day_of_year,\n    DATE_PART('week', date_key) AS week_key,\n    DAYOFWEEK(date_key) AS day_of_week,\n    MONTH(date_key) AS month_of_year,\n    DAYOFMONTH(date_key) AS day_of_month,\n    QUARTER(date_key) AS quarter_of_year,\n    YEAR(date_key) AS year_key,\n    ROW_NUMBER() OVER (PARTITION BY YEAR(date_key), MONTH(date_key), DAYOFWEEK(date_key) ORDER BY date_key) AS ordinal_weekday_of_month\nFROM generate_date", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/datapai/models/chinook/intermediate/dim_date.sql", "compiled": true, "compiled_code": "\n\nWITH RECURSIVE generate_date AS (\n    SELECT DATE '2009-01-01' AS date_key\n    UNION ALL\n    SELECT DATEADD(DAY, 1, date_key)\n    FROM generate_date\n    WHERE date_key <= DATE '2013-12-31'\n)\nSELECT\n    date_key AS date_key,\n    DAYOFYEAR(date_key) AS day_of_year,\n    DATE_PART('week', date_key) AS week_key,\n    DAYOFWEEK(date_key) AS day_of_week,\n    MONTH(date_key) AS month_of_year,\n    DAYOFMONTH(date_key) AS day_of_month,\n    QUARTER(date_key) AS quarter_of_year,\n    YEAR(date_key) AS year_key,\n    ROW_NUMBER() OVER (PARTITION BY YEAR(date_key), MONTH(date_key), DAYOFWEEK(date_key) ORDER BY date_key) AS ordinal_weekday_of_month\nFROM generate_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.datapai.obt_invoice": {"database": "DATAPAI", "schema": "DATAPAI", "name": "obt_invoice", "resource_type": "model", "package_name": "datapai", "path": "chinook/obt/obt_invoice.sql", "original_file_path": "models/chinook/obt/obt_invoice.sql", "unique_id": "model.datapai.obt_invoice", "fqn": ["datapai", "chinook", "obt", "obt_invoice"], "alias": "obt_invoice", "checksum": {"name": "sha256", "checksum": "95d705977dc67eb41fee893e0c0aaaf36dcd65d6f692a3fd07cfaf7b0a7cf6dd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["obt"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["obt"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "obt"}, "created_at": 1720754729.3619282, "relation_name": "DATAPAI.DATAPAI.obt_invoice", "raw_code": "{{ config(materialized=\"table\", tags=\"obt\") }}\n\n    SELECT date_key,\n           invoice_id,\n           customer_id,\n           invoice_billing_address,\n           invoice_billing_city,\n           invoice_billing_state,\n           invoice_billing_country,\n           invoice_billing_postal_code,\n           invoice_total,\n           customer_first_name,\n           customer_last_name,\n           customer_company,\n           customer_address,\n           customer_city,\n           customer_state,\n           customer_country,\n           customer_postal_code,\n           customer_phone,\n           customer_fax,\n           customer_email,\n           employee_id,\n           support_rep_first_name,\n           support_rep_last_name,\n           day_of_year,\n           day_of_month,\n           day_of_week,\n      FROM {{ ref('fct_invoice') }} invoice\n LEFT JOIN {{ ref('dim_date') }} dim_date \n        ON invoice.invoice_date = dim_date.date_key\n LEFT JOIN {{ ref('dim_customer') }} customer USING (customer_id)", "language": "sql", "refs": [{"name": "fct_invoice", "package": null, "version": null}, {"name": "dim_date", "package": null, "version": null}, {"name": "dim_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.datapai.fct_invoice", "model.datapai.dim_date", "model.datapai.dim_customer"]}, "compiled_path": "target/compiled/datapai/models/chinook/obt/obt_invoice.sql", "compiled": true, "compiled_code": "\n\n    SELECT date_key,\n           invoice_id,\n           customer_id,\n           invoice_billing_address,\n           invoice_billing_city,\n           invoice_billing_state,\n           invoice_billing_country,\n           invoice_billing_postal_code,\n           invoice_total,\n           customer_first_name,\n           customer_last_name,\n           customer_company,\n           customer_address,\n           customer_city,\n           customer_state,\n           customer_country,\n           customer_postal_code,\n           customer_phone,\n           customer_fax,\n           customer_email,\n           employee_id,\n           support_rep_first_name,\n           support_rep_last_name,\n           day_of_year,\n           day_of_month,\n           day_of_week,\n      FROM DATAPAI.DATAPAI.fct_invoice invoice\n LEFT JOIN DATAPAI.DATAPAI.dim_date dim_date \n        ON invoice.invoice_date = dim_date.date_key\n LEFT JOIN DATAPAI.DATAPAI.dim_customer customer USING (customer_id)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}}, "sources": {"source.datapai.csv.album": {"database": "DATAPAI", "schema": "csv", "name": "album", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.album", "fqn": ["datapai", "chinook", "csv", "album"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "album", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/album.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.album", "created_at": 1720749449.4937642}, "source.datapai.csv.artist": {"database": "DATAPAI", "schema": "csv", "name": "artist", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.artist", "fqn": ["datapai", "chinook", "csv", "artist"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "artist", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/artist.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.artist", "created_at": 1720749449.4941528}, "source.datapai.csv.customer": {"database": "DATAPAI", "schema": "csv", "name": "customer", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.customer", "fqn": ["datapai", "chinook", "csv", "customer"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "customer", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/customer.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.customer", "created_at": 1720749449.494479}, "source.datapai.csv.employee": {"database": "DATAPAI", "schema": "csv", "name": "employee", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.employee", "fqn": ["datapai", "chinook", "csv", "employee"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "employee", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/employee.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.employee", "created_at": 1720749449.4947975}, "source.datapai.csv.genre": {"database": "DATAPAI", "schema": "csv", "name": "genre", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.genre", "fqn": ["datapai", "chinook", "csv", "genre"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "genre", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/genre.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.genre", "created_at": 1720749449.495126}, "source.datapai.csv.invoice_line": {"database": "DATAPAI", "schema": "csv", "name": "invoice_line", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.invoice_line", "fqn": ["datapai", "chinook", "csv", "invoice_line"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "invoice_line", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/invoice_line.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.invoice_line", "created_at": 1720749449.495441}, "source.datapai.csv.invoice": {"database": "DATAPAI", "schema": "csv", "name": "invoice", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.invoice", "fqn": ["datapai", "chinook", "csv", "invoice"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "invoice", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/invoice.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.invoice", "created_at": 1720749449.495932}, "source.datapai.csv.media_type": {"database": "DATAPAI", "schema": "csv", "name": "media_type", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.media_type", "fqn": ["datapai", "chinook", "csv", "media_type"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "media_type", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/media_type.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.media_type", "created_at": 1720749449.4963315}, "source.datapai.csv.playlist_track": {"database": "DATAPAI", "schema": "csv", "name": "playlist_track", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.playlist_track", "fqn": ["datapai", "chinook", "csv", "playlist_track"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "playlist_track", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/playlist_track.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.playlist_track", "created_at": 1720749449.496672}, "source.datapai.csv.playlist": {"database": "DATAPAI", "schema": "csv", "name": "playlist", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.playlist", "fqn": ["datapai", "chinook", "csv", "playlist"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "playlist", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/playlist.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.playlist", "created_at": 1720749449.4970322}, "source.datapai.csv.track": {"database": "DATAPAI", "schema": "csv", "name": "track", "resource_type": "source", "package_name": "datapai", "path": "models/chinook/sources.yml", "original_file_path": "models/chinook/sources.yml", "unique_id": "source.datapai.csv.track", "fqn": ["datapai", "chinook", "csv", "track"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "track", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "csvs/track.csv", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": null}, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATAPAI.csv.track", "created_at": 1720749449.4973688}}, "macros": {"macro.datapai.cdc_scd2": {"name": "cdc_scd2", "resource_type": "macro", "package_name": "datapai", "path": "macros/cdc_scd2.sql", "original_file_path": "macros/cdc_scd2.sql", "unique_id": "macro.datapai.cdc_scd2", "macro_sql": "{% macro cdc_scd2(source_schema, source_table, pk) %}\r\n\r\nwith ranked as (\r\n    -- Select all rows from the source table, and add a row number column based on the primary ke\r\n    -- and ordered by timestamp\r\n    SELECT\r\n        *,\r\n        ROW_NUMBER() OVER (PARTITION BY {{pk}} ORDER BY dms_utc_ts::TIMESTAMP) AS row_num,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY {{pk}}, DATE_TRUNC('day', dms_utc_ts AT TIME ZONE 'Australia/Sydney')\r\n            ORDER BY dms_utc_ts DESC\r\n        ) AS row_num_au,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY {{pk}}, DATE_TRUNC('day', dms_utc_ts AT TIME ZONE 'Asia/Singapore')\r\n            ORDER BY dms_utc_ts DESC\r\n        ) AS row_num_sg,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY {{pk}}, DATE_TRUNC('day', dms_utc_ts)\r\n            ORDER BY dms_utc_ts DESC\r\n        ) AS row_num_utc\r\n    FROM\r\n        {{source_schema}}.{{source_table}}\r\n    {% if is_incremental() %}\r\n        -- return all rows updated after the last time this model was run \r\n        WHERE dms_utc_ts > (select max(to_ts) from {{ this }})\r\n    {% endif %}\r\n),\r\n-- If the row was deleted, then the to_ts is the timestamp of the delete\r\n-- Otherwise, the to_ts is the timestamp of the next change\r\nsource as (\r\n    SELECT\r\n        *,\r\n        dms_utc_ts as from_ts,\r\n        CASE\r\n            WHEN delta_operation = 'DELETE' THEN dms_utc_ts\r\n            ELSE COALESCE(LEAD(dms_utc_ts::TIMESTAMP) OVER (PARTITION BY {{pk}} ORDER BY dms_utc_ts), '2050-01-01'::TIMESTAMP)\r\n        END AS to_ts\r\n    FROM\r\n        ranked\r\n)\r\n-- SELECT\r\n--     *\r\n-- FROM\r\n--     source\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.590948, "supported_languages": null}, "macro.datapai.cdc_scd2_business": {"name": "cdc_scd2_business", "resource_type": "macro", "package_name": "datapai", "path": "macros/cdc_scd2_business.sql", "original_file_path": "macros/cdc_scd2_business.sql", "unique_id": "macro.datapai.cdc_scd2_business", "macro_sql": "{% macro cdc_scd2_business(source_schema, source_table, pk, record_created_col) %}\r\n\r\nwith ranked as (\r\n    -- Select all rows from the source table, and add a row number column based on the primary ke\r\n    -- and ordered by timestamp\r\n    SELECT\r\n        *,\r\n        ROW_NUMBER() OVER (PARTITION BY {{pk}} ORDER BY dms_utc_ts::TIMESTAMP) AS row_num,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY {{pk}}, DATE_TRUNC('day', dms_utc_ts AT TIME ZONE 'Australia/Sydney')\r\n            ORDER BY dms_utc_ts DESC\r\n        ) AS row_num_au,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY {{pk}}, DATE_TRUNC('day', dms_utc_ts AT TIME ZONE 'Asia/Singapore')\r\n            ORDER BY dms_utc_ts DESC\r\n        ) AS row_num_sg,\r\n        ROW_NUMBER() OVER (\r\n            PARTITION BY {{pk}}, DATE_TRUNC('day', dms_utc_ts)\r\n            ORDER BY dms_utc_ts DESC\r\n        ) AS row_num_utc\r\n    FROM\r\n        {{source_schema}}.{{source_table}}\r\n    {% if is_incremental() %}\r\n        -- return all rows updated after the last time this model was run \r\n        WHERE dms_utc_ts > (select max(to_ts) from {{ this }})\r\n    {% endif %}\r\n),\r\n-- If the row was deleted, then the to_ts is the timestamp of the delete\r\n-- Otherwise, the to_ts is the timestamp of the next change\r\nsource as (\r\n    SELECT\r\n        *,\r\n        -- If this is the first row for the primary key, then the from_ts is the business time key (when the record was actually created)\r\n        CASE \r\n            WHEN row_num = 1 THEN {{record_created_col}}\r\n            ELSE dms_utc_ts\r\n        END as from_ts,\r\n        CASE\r\n            WHEN delta_operation = 'DELETE' THEN dms_utc_ts\r\n            ELSE COALESCE(LEAD(dms_utc_ts::TIMESTAMP) OVER (PARTITION BY {{pk}} ORDER BY dms_utc_ts), '2050-01-01'::TIMESTAMP)\r\n        END AS to_ts\r\n    FROM\r\n        ranked\r\n)\r\n-- SELECT\r\n--     *\r\n-- FROM\r\n--     source\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.5935175, "supported_languages": null}, "macro.datapai.cast_to_timestamp": {"name": "cast_to_timestamp", "resource_type": "macro", "package_name": "datapai", "path": "macros/cmc_date_utils.sql", "original_file_path": "macros/cmc_date_utils.sql", "unique_id": "macro.datapai.cast_to_timestamp", "macro_sql": "{% macro cast_to_timestamp(date_in_string_format, timezone_format_destination='utc', timezone_format_source='utc') %}\r\n         CASE\r\n            WHEN SUBSTRING( {{ date_in_string_format }}, 21, 6 ) = '999999'\r\n               THEN (SUBSTRING( {{date_in_string_format }}, 1, 19 ) || '.' || '999999')::timestamp\r\n            ELSE {{ date_in_string_format }}::timestamp AT TIME ZONE '{{ timezone_format_source }}' AT TIME ZONE '{{ timezone_format_destination }}'\r\n         END\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.594667, "supported_languages": null}, "macro.datapai.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "datapai", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.datapai.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\r\n\r\n{%- set source_relation = source(source_name, table_name) -%}\r\n\r\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\r\n{% set column_names=columns | map(attribute='name') %}\r\n{% set base_model_sql %}\r\nwith source as (\r\n\r\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n        {%- if leading_commas -%}\r\n        {%- for column in column_names %}\r\n        {{\", \" if not loop.first}}{{ column | lower }}\r\n        {%- endfor %}\r\n        {%- else -%}\r\n        {%- for column in column_names %}\r\n        {{ column | lower }}{{\",\" if not loop.last}}\r\n        {%- endfor -%}\r\n        {%- endif %}\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed\r\n{% endset %}\r\n\r\n{% if execute %}\r\n\r\n{{ log(base_model_sql, info=True) }}\r\n{% do return(base_model_sql) %}\r\n\r\n{% endif %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.5989687, "supported_languages": null}, "macro.datapai.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "datapai", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.datapai.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name, upstream_descriptions=False) %}\r\n\r\n{% set model_yaml=[] %}\r\n{% set column_desc_dict =  codegen.build_dict_column_descriptions(model_name) if upstream_descriptions else {} %}\r\n\r\n{% do model_yaml.append('version: 2') %}\r\n{% do model_yaml.append('') %}\r\n{% do model_yaml.append('models:') %}\r\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\r\n{% do model_yaml.append('    description: \"\"') %}\r\n{% do model_yaml.append('    columns:') %}\r\n\r\n{% set relation=ref(model_name) %}\r\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\r\n\r\n{% for column in columns %}\r\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\r\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\r\n    {% do model_yaml.append('') %}\r\n{% endfor %}\r\n\r\n{% if execute %}\r\n\r\n    {% set joined = model_yaml | join ('\\n') %}\r\n    {{ log(joined, info=True) }}\r\n    {% do return(joined) %}\r\n\r\n{% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6044886, "supported_languages": null}, "macro.datapai.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "datapai", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.datapai.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\r\n\r\n    {% set tables=dbt_utils.get_relations_by_pattern(\r\n        schema_pattern=schema_name,\r\n        database=database_name,\r\n        table_pattern=table_pattern,\r\n        exclude=exclude\r\n    ) %}\r\n\r\n    {% set table_list= tables | map(attribute='identifier') %}\r\n\r\n    {{ return(table_list | sort) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6084707, "supported_languages": null}, "macro.datapai.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "datapai", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.datapai.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='') %}\r\n\r\n{% set sources_yaml=[] %}\r\n\r\n{% do sources_yaml.append('version: 2') %}\r\n{% do sources_yaml.append('') %}\r\n{% do sources_yaml.append('sources:') %}\r\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\r\n\r\n{% if database_name != target.database %}\r\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\r\n{% endif %}\r\n\r\n{% do sources_yaml.append('    tables:') %}\r\n\r\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\r\n\r\n{% for table in tables %}\r\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\r\n\r\n    {% if generate_columns %}\r\n    {% do sources_yaml.append('        columns:') %}\r\n\r\n        {% set table_relation=api.Relation.create(\r\n            database=database_name,\r\n            schema=schema_name,\r\n            identifier=table\r\n        ) %}\r\n\r\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\r\n\r\n        {% for column in columns %}\r\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\r\n            {% if include_descriptions %}\r\n                {% do sources_yaml.append('            description: \"\"' ) %}\r\n            {% endif %}\r\n        {% endfor %}\r\n            {% do sources_yaml.append('') %}\r\n\r\n    {% endif %}\r\n\r\n{% endfor %}\r\n\r\n{% if execute %}\r\n\r\n    {% set joined = sources_yaml | join ('\\n') %}\r\n    {{ log(joined, info=True) }}\r\n    {% do return(joined) %}\r\n\r\n{% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.datapai.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6147606, "supported_languages": null}, "macro.datapai.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "datapai", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "unique_id": "macro.datapai.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ default_schema }}_{{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6160457, "supported_languages": null}, "macro.datapai.grant_select_on_schemas": {"name": "grant_select_on_schemas", "resource_type": "macro", "package_name": "datapai", "path": "macros/grant_select_on_schemas.sql", "original_file_path": "macros/grant_select_on_schemas.sql", "unique_id": "macro.datapai.grant_select_on_schemas", "macro_sql": "{% macro grant_select_on_schemas(schemas, groups) %}\r\n  {% set groups_csv = 'group' ~  groups | join(', group ') %}\r\n  {% for schema in schemas %}\r\n    grant usage on schema {{ schema }} to group {{ groups_csv }};\r\n    grant select on all tables in schema {{ schema }} to group {{ groups_csv }};\r\n    alter default privileges in schema {{ schema }}\r\n        grant select on tables to group {{ groups_csv }};\r\n  {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.617679, "supported_languages": null}, "macro.datapai.grant_select_schema": {"name": "grant_select_schema", "resource_type": "macro", "package_name": "datapai", "path": "macros/grant_select_schema.sql", "original_file_path": "macros/grant_select_schema.sql", "unique_id": "macro.datapai.grant_select_schema", "macro_sql": "{% macro grant_select_schema (schemas, roles) %}\r\n  {% for schema in schemas %}\r\n    grant usage on schema {{ schema }} to role \"{{ roles }}\";\r\n    grant select on all tables in schema {{ schema }} to role \"{{ roles }}\";\r\n    alter default privileges in schema {{ schema }}\r\n        grant select on tables to role \"{{ roles }}\";\r\n  {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6189456, "supported_languages": null}, "macro.datapai.print_multi_tables": {"name": "print_multi_tables", "resource_type": "macro", "package_name": "datapai", "path": "macros/max_sequence.sql", "original_file_path": "macros/max_sequence.sql", "unique_id": "macro.datapai.print_multi_tables", "macro_sql": "{% macro print_multi_tables() %}\r\n\r\n    {% set tables = ['table_1', 'table_2', 'table_3', 'table_4', 'table_5'] %}\r\n    {% set ns = namespace(query_results = [], final_result = '[') %}\r\n    {% set query_results = [] %}\r\n\r\n    {% for table_name in tables %}\r\n\r\n        {% set query %}\r\n            select count(*) from {{ ref(table_name) }} where students = 'great'\r\n        {% endset %}\r\n        {{ log(query, true) }}\r\n\r\n        {% set results = run_query(query) %}\r\n        {% set count = results.rows[0][0] %}\r\n        {% set query_results = query_results.append(count) %}\r\n\r\n    {% endfor %}\r\n\r\n    {# This gives a result like [Decimal('2'), Decimal('8')], so #}\r\n    {# there is more code below to print the exact results you want #}\r\n    {{ log(query_results, true) }}\r\n\r\n    {# Print the results in the format [result_1, result_2, etc] #}\r\n    {% for x in query_results %}\r\n        {% set ns.final_result = ns.final_result ~ x %}\r\n        {% if not loop.last %}\r\n            {% set ns.final_result = ns.final_result ~ ', ' %}\r\n        {% endif %}\r\n    {% endfor %}\r\n    {% set ns.final_result = ns.final_result ~ ']' %}\r\n    {{ log(ns.final_result, true) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.623774, "supported_languages": null}, "macro.datapai.vacuum": {"name": "vacuum", "resource_type": "macro", "package_name": "datapai", "path": "macros/redshift_maintenance.sql", "original_file_path": "macros/redshift_maintenance.sql", "unique_id": "macro.datapai.vacuum", "macro_sql": "{% macro vacuum(run) %}\r\n    {% if run == true %}\r\n        vacuum\r\n    {% else %}\r\n        select 1 as test\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.624692, "supported_languages": null}, "macro.datapai.analyze": {"name": "analyze", "resource_type": "macro", "package_name": "datapai", "path": "macros/redshift_maintenance.sql", "original_file_path": "macros/redshift_maintenance.sql", "unique_id": "macro.datapai.analyze", "macro_sql": "{% macro analyze(run) %}\r\n    {% if run == true %}\r\n        analyze\r\n    {% else %}\r\n        select 1 as test\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6253154, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6596088, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.662287, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6632395, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.666434, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.666974, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6695557, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6714113, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many objects in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.673172, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6742775, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6749825, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6758676, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6765845, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.678333, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6789973, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6795845, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6812549, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6819193, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6835735, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.686359, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6871386, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6880083, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.689006, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6894283, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6918256, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.6989973, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7099986, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.710665, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7142017, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7152684, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.716172, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7224662, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.723519, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7247677, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7317522, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7327604, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7331264, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.elementary.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.734317, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7360804, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7367325, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.737264, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7379165, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.73867, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7392585, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7400832, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7407193, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7411568, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7415714, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7422738, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7463448, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7467864, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.74738, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7477934, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.748992, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.749665, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7500567, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.750842, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7515166, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.752323, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7530248, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7538235, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7560596, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7567282, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.757628, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7584155, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.762457, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7676816, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.768275, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7694244, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7701879, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7709086, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7715485, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.774107, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7752802, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7759285, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7771554, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.777954, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7799377, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7808669, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7834897, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7848363, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7862391, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.787577, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7880802, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.788653, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7902472, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7938373, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.794741, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.795412, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7959852, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7966347, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7975302, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7982483, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7993002, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.7999613, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8005617, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8024616, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8030775, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.803783, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8043952, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8053384, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8069563, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8143013, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.814905, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8156643, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8171904, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8180377, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.819115, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8197567, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8205225, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8212118, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.82181, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8225088, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8234847, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.824387, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8262408, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8270333, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8275523, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8282416, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8294334, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8301017, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8306797, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8313415, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8329349, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.833616, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8341124, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8354638, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8360128, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8365507, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.8369846, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9094586, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9098492, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9104543, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9110525, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.915459, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9194696, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9221869, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9230082, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9274898, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.929442, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9304564, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9322414, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9332776, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9343326, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.935138, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.936374, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9376996, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9389024, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9397998, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9413443, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9422686, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9432602, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9443614, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9454517, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9465322, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9499934, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9506848, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9512062, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9517279, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9522455, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9561985, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9580956, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9603157, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.96119, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9635808, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9785154, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9806018, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.9929664, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.998296, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749441.999187, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0025744, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0035253, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0056968, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0174236, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0216029, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0259376, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0289142, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0312843, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0321157, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0327997, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0338242, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0345016, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0355008, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.036172, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.037122, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.03779, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0383534, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0393057, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0419707, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0424228, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.044218, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0448399, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.045356, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0498652, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0511878, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.052352, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0546913, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.055339, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0568347, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0591743, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0607867, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0614848, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.062126, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n    /* Do the equivalent of rename_if_exists */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0705366, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0753403, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.076671, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0772996, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0779471, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0794027, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.08038, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.081215, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    /* Do the equivalent of rename_if_exists */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.0896266, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1000013, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1030548, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.103865, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1055288, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1062055, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1067033, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.107221, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.107663, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1082451, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1086853, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1103585, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1110263, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.11539, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.125229, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1335547, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1345608, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.135163, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.13551, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1360567, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.136501, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.137265, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1401255, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1408174, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1417103, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1431723, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1594791, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.160871, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1618056, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1706624, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.171275, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1720634, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1745064, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.17511, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1757262, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1803427, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.184954, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.186336, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1873724, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.193541, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1947331, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.1960258, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.199814, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2003798, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2030897, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.204473, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.206443, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.207993, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.208295, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2091956, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2096105, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2105308, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2110307, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2119424, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2124386, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.213665, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2147412, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2155743, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2159636, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2168062, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.217388, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2182257, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2186859, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2211921, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2217672, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2223508, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2229085, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.223486, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.224023, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2246058, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.225257, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2258527, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2263973, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2269878, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2275183, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2280958, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2286327, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.229603, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2302907, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2313583, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2319381, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.233018, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2336197, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2344878, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2350109, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2357726, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.236073, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2369587, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2375488, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2383122, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.238611, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2396717, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2405827, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2411478, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2419972, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2423966, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.244077, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2454777, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2463088, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2467008, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2482803, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2488108, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2498567, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2504358, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.251376, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2518713, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2528377, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2533422, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2547677, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.255361, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2561173, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.257628, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2584274, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2594142, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2603552, "supported_languages": null}, "macro.audit_helper.compare_all_columns": {"name": "compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.compare_all_columns", "macro_sql": "{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_all_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2638857, "supported_languages": null}, "macro.audit_helper.default__compare_all_columns": {"name": "default__compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.default__compare_all_columns", "macro_sql": "{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {% set a_query %}      \n    select\n      *\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=primary_key,\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.266766, "supported_languages": null}, "macro.audit_helper.compare_column_values": {"name": "compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.compare_column_values", "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2732759, "supported_languages": null}, "macro.audit_helper.default__compare_column_values": {"name": "default__compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.default__compare_column_values", "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '\u2705: perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '\u2705: both are null'\n            when a_query.{{ primary_key }} is null then '\ud83e\udd37: \u200dmissing from a'\n            when b_query.{{ primary_key }} is null then '\ud83e\udd37: missing from b'\n            when a_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in a only'\n            when b_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in b only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '\ud83d\ude45: \u200dvalues do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2757735, "supported_languages": null}, "macro.audit_helper.compare_column_values_verbose": {"name": "compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.compare_column_values_verbose", "macro_sql": "{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2787933, "supported_languages": null}, "macro.audit_helper.default__compare_column_values_verbose": {"name": "default__compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.default__compare_column_values_verbose", "macro_sql": "{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }},\n          (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n          false) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} and\n            (a_query.{{ column_to_compare }} is not null or b_query.{{ column_to_compare }} is not null), false)\n          as conflicting_values\n           -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2813609, "supported_languages": null}, "macro.audit_helper.compare_queries": {"name": "compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.compare_queries", "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2833977, "supported_languages": null}, "macro.audit_helper.default__compare_queries": {"name": "default__compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.default__compare_queries", "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2849953, "supported_languages": null}, "macro.audit_helper.compare_relation_columns": {"name": "compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.compare_relation_columns", "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_relation_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2875805, "supported_languages": null}, "macro.audit_helper.default__compare_relation_columns": {"name": "default__compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__compare_relation_columns", "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2883222, "supported_languages": null}, "macro.audit_helper.get_columns_in_relation_sql": {"name": "get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.get_columns_in_relation_sql", "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.snowflake__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.288947, "supported_languages": null}, "macro.audit_helper.default__get_columns_in_relation_sql": {"name": "default__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__get_columns_in_relation_sql", "macro_sql": "{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.290348, "supported_languages": null}, "macro.audit_helper.redshift__get_columns_in_relation_sql": {"name": "redshift__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql", "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2909324, "supported_languages": null}, "macro.audit_helper.snowflake__get_columns_in_relation_sql": {"name": "snowflake__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql", "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2921052, "supported_languages": null}, "macro.audit_helper.postgres__get_columns_in_relation_sql": {"name": "postgres__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql", "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2930906, "supported_languages": null}, "macro.audit_helper.bigquery__get_columns_in_relation_sql": {"name": "bigquery__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql", "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.293705, "supported_languages": null}, "macro.audit_helper.compare_relations": {"name": "compare_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relations.sql", "original_file_path": "macros/compare_relations.sql", "unique_id": "macro.audit_helper.compare_relations", "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2966745, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.2992558, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3017778, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3040192, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.321468, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3290925, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.336995, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.339132, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3412483, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3421178, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3433766, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3455288, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3470016, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3476973, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3495295, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3521452, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3529108, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3534832, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3541014, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3549478, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3556478, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3566208, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.357171, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3576748, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3594048, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3601332, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3609161, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.361655, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3626575, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.363424, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3640857, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3680992, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3691607, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.370587, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3716085, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3731105, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3743973, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3754342, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3759615, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3764842, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3771887, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3801212, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.381091, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.382025, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3837483, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3851402, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3865862, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.38734, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3878717, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3883927, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3902745, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.390964, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3914948, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3920102, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3925486, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3940868, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3946683, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3951871, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3957183, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3962355, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3969314, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3978095, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3986933, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.3993669, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4008281, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4015646, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.402299, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4030085, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4037495, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4051507, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4060097, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4072287, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4083915, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4098873, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4110646, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4117277, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.412557, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4133575, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4140244, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4147348, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.415637, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.416487, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4174874, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.418023, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4185534, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4189553, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.419594, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4203484, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4218125, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4223344, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4230528, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4237754, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4251266, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.425802, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4263752, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.428084, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4286323, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4296896, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4306183, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4313803, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4336793, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4373097, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4391918, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.440143, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.440549, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4409845, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4413862, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4420865, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.443382, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4441433, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4449174, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4458606, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4461787, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4464853, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4468124, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4471114, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4474084, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4505727, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4520063, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.453522, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4551961, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4562476, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.457447, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4586632, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.460192, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4616137, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4636471, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.464478, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4649134, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.474726, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.476636, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4782567, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4825215, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4854329, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.487909, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4903917, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.491411, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4935372, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4952314, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4969451, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.4986234, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5011513, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5037122, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5063007, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5088317, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5109382, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.513039, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5152438, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.517375, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5212982, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5239234, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5262158, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.528508, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.532177, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5335262, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5356395, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5378, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5398264, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.543254, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5458796, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.549308, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5532072, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5545428, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5553308, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5561879, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.55746, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5602083, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5615952, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5703008, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5720992, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5769649, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.579168, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5812972, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.elementary.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.592852, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.594828, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.5965536, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6002488, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6060917, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.608476, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.612039, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6158004, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6167054, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6188447, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6203477, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6219075, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6246858, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6266954, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6297572, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6313047, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6341214, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6360989, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6391473, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6404557, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.64187, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6460752, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6509228, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.65435, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6569903, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.659058, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.661047, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6640484, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6652935, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6668208, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6703143, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6743357, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.67792, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6813543, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6834662, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6846519, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6863432, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6873326, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6896942, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6908872, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6933978, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6946929, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6958585, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.696169, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6964664, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.696789, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6973872, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6976914, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6979856, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6982865, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.6992147, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.700104, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7010055, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7015238, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7024348, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.702946, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7038195, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7043388, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7184331, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7194302, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7199368, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7207787, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7212636, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7294912, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7321973, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7367275, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7392404, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.elementary.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7516997, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7569156, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7580376, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.761113, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.762282, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7630138, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7636478, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7670474, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7676451, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7752097, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.780058, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.783265, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.791206, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.7931209, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.795771, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.8005748, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.8029122, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.809268, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.8129365, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.8140786, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.815111, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.8171718, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.817872, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.818505, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_table": {"name": "sqlserver__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.8233476, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"name": "sqlserver__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.8261983, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__dropif": {"name": "sqlserver__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.827505, "supported_languages": null}, "macro.dbt_ml_preprocessing.k_bins_discretizer": {"name": "k_bins_discretizer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/k_bins_discretizer.sql", "original_file_path": "macros/k_bins_discretizer.sql", "unique_id": "macro.dbt_ml_preprocessing.k_bins_discretizer", "macro_sql": "{% macro k_bins_discretizer(source_table,source_columns,include_columns='*',n_bins=20,encode='ordinal',strategy='uniform') %}\n{%- if encode!='ordinal' -%}\n    {% set error_message %}\nThe `k_bins_discretizer` macro only supports an 'encode' value of 'ordinal' at this time.\n    {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n{%- if strategy!='uniform' -%}\n    {% set error_message %}\nThe `k_bins_discretizer` macro only supports an 'strategy' value of 'uniform' at this time.\n    {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n{% if source_columns is not iterable or source_columns is string or source_columns is mapping %}\n    {% set error_message %}\nThe `source_columns` parameter must contain a list of column names.\n    {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n{%- if include_columns=='*' -%}\n{%- set all_source_columns = adapter.get_columns_in_relation(source_table) | map(attribute='quoted') -%}\n{% set include_columns = all_source_columns %}\n{%- endif -%}\n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n{% for source_column in source_columns %}\n    {{ source_column }}_aggregates as(\n        select\n            min({{ source_column }}) as min_value,\n            max({{ source_column }}) as max_value\n        from {{ source_table }}\n    )\n{% if not loop.last %}, {% endif %}\n{% endfor %}\n{{ adapter.dispatch('k_bins_discretizer','dbt_ml_preprocessing')(source_table,source_columns,include_columns,n_bins,encode,strategy) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ml_preprocessing.snowflake__k_bins_discretizer"]}, "description": "Bin continuous data into intervals. See scikit-learn's [KBinsDiscretizer](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.KBinsDiscretizer.html#sklearn.preprocessing.KBinsDiscretizer) for full documentation.\n\nWill append a new column with the name &lt;source column&gt;_binned\n\nExample usage:\n#### **`models\\customer_features.yml:`**\n```\n{{ config(materialized='view') }}\n\n{{ dbt_ml_preprocessing.k_bins_discretizer( ref('customer') ,'age') }}\n\n```\nWill produce a model named customer_features, with a new column named ```age_binned``` containing the binned values.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/k_bins_discretizer.yml", "arguments": [{"name": "source_table", "type": "string", "description": "Pass in a ref to the table containing the data you want to transform"}, {"name": "source_columns", "type": "list", "description": "The columns containing the data you want to transform"}, {"name": "include_columns", "type": "string", "description": "Other columns from the source table to be included in the model (defaults to '*' and brings all columns across)"}, {"name": "n_bins", "type": "string", "description": "The number of bins to produce"}, {"name": "encode", "type": "string", "description": "The method used to encode the result, currently only 'ordinal' is supported"}, {"name": "strategy", "type": "string", "description": "Strategy used to define the widths of the bins, currently only 'uniform' is supported"}], "created_at": 1720749449.2034662, "supported_languages": null}, "macro.dbt_ml_preprocessing.snowflake__k_bins_discretizer": {"name": "snowflake__k_bins_discretizer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/k_bins_discretizer.sql", "original_file_path": "macros/k_bins_discretizer.sql", "unique_id": "macro.dbt_ml_preprocessing.snowflake__k_bins_discretizer", "macro_sql": "{% macro snowflake__k_bins_discretizer(source_table,source_columns,include_columns,n_bins,encode,strategy) %}\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n\n{% for source_column in source_columns %}\n    least(width_bucket({{ source_column }},{{ source_column }}_aggregates.min_value,{{ source_column }}_aggregates.max_value,{{ n_bins }}) - 1,{{ n_bins - 1 }}) as {{ source_column }}_binned\n    {% if not loop.last %}, {% endif %}\n{% endfor %}\nfrom \n  {% for source_column in source_columns %}\n      {{ source_column }}_aggregates,\n  {% endfor %}\n  {{ source_table }} as source_table\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/k_bins_discretizer.yml", "arguments": [], "created_at": 1720749449.2053468, "supported_languages": null}, "macro.dbt_ml_preprocessing.bigquery__k_bins_discretizer": {"name": "bigquery__k_bins_discretizer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/k_bins_discretizer.sql", "original_file_path": "macros/k_bins_discretizer.sql", "unique_id": "macro.dbt_ml_preprocessing.bigquery__k_bins_discretizer", "macro_sql": "{% macro bigquery__k_bins_discretizer(source_table,source_columns,include_columns,n_bins,encode,strategy) %}\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n\n{% for source_column in source_columns %}\n    least(RANGE_BUCKET({{ source_column }}, GENERATE_ARRAY({{ source_column }}_aggregates.min_value, {{ source_column }}_aggregates.max_value, ({{ source_column }}_aggregates.max_value - {{ source_column }}_aggregates.min_value)/{{ n_bins }}))-1,{{ n_bins - 1 }}) as {{ source_column }}_binned\n    {% if not loop.last %}, {% endif %}\n{% endfor %}\nfrom \n  {% for source_column in source_columns %}\n      {{ source_column }}_aggregates,\n  {% endfor %}\n  {{ source_table }} as source_table\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/k_bins_discretizer.yml", "arguments": [], "created_at": 1720749449.2044816, "supported_languages": null}, "macro.dbt_ml_preprocessing.sqlserver__k_bins_discretizer": {"name": "sqlserver__k_bins_discretizer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/k_bins_discretizer.sql", "original_file_path": "macros/k_bins_discretizer.sql", "unique_id": "macro.dbt_ml_preprocessing.sqlserver__k_bins_discretizer", "macro_sql": "{% macro sqlserver__k_bins_discretizer(source_table,source_columns,include_columns,n_bins,encode,strategy) %}\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n{% for source_column in source_columns %}\ncase when \n      floor(\n          cast({{ source_column }} - {{ source_column }}_aggregates.min_value as decimal)/ cast( {{ source_column }}_aggregates.max_value - {{ source_column }}_aggregates.min_value as decimal ) * {{ n_bins }} \n      ) < {{ n_bins - 1 }}\n      then floor(\n          cast({{ source_column }} - {{ source_column }}_aggregates.min_value as decimal)/ cast( {{ source_column }}_aggregates.max_value - {{ source_column }}_aggregates.min_value as decimal ) * {{ n_bins }} \n      )\n      else {{ n_bins - 1 }}\n      end as {{ source_column }}_binned\n    {% if not loop.last %}, {% endif %}\n{% endfor %}\nfrom   \n  {% for source_column in source_columns %}\n      {{ source_column }}_aggregates,\n  {% endfor %}\n  {{ source_table }} as source_table\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.8519104, "supported_languages": null}, "macro.dbt_ml_preprocessing.default__k_bins_discretizer": {"name": "default__k_bins_discretizer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/k_bins_discretizer.sql", "original_file_path": "macros/k_bins_discretizer.sql", "unique_id": "macro.dbt_ml_preprocessing.default__k_bins_discretizer", "macro_sql": "{% macro default__k_bins_discretizer(source_table,source_columns,include_columns,n_bins,encode,strategy) %}\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n{% for source_column in source_columns %}\nleast(\n      floor(\n          cast({{ source_column }} - {{ source_column }}_aggregates.min_value as decimal)/ cast( {{ source_column }}_aggregates.max_value - {{ source_column }}_aggregates.min_value as decimal ) * {{ n_bins }} \n      ),\n      {{ n_bins - 1 }}\n  ) as {{ source_column }}_binned\n    {% if not loop.last %}, {% endif %}\n{% endfor %}\nfrom   \n  {% for source_column in source_columns %}\n      {{ source_column }}_aggregates,\n  {% endfor %}\n  {{ source_table }} as source_table\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/k_bins_discretizer.yml", "arguments": [], "created_at": 1720749449.2061737, "supported_languages": null}, "macro.dbt_ml_preprocessing.label_encoder": {"name": "label_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/label_encoder.sql", "original_file_path": "macros/label_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.label_encoder", "macro_sql": "{% macro label_encoder(source_table,source_column, include_columns='*') %}\n{{ adapter.dispatch('label_encoder','dbt_ml_preprocessing')(source_table,source_column,include_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ml_preprocessing.default__label_encoder"]}, "description": "Encode target labels with value between 0 and n_classes-1. See scikit-learn's [LabelEncoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html#sklearn.preprocessing.LabelEncoder) for full documentation.\n\nWill append a new column with the name &lt;source column&gt;_encoded\n\nExample usage:\n#### **`models\\customer_features.yml:`**\n```\n{{ config(materialized='view') }}\n\n{{ dbt_ml_preprocessing.label_encoder( ref('customer') ,'city') }}\n\n```\nWill produce a model named customer_features, with a new column named ```city_encoded``` containing the encoded values.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/label_encoder.yml", "arguments": [{"name": "source_table", "type": "string", "description": "Pass in a ref to the table containing the data you want to transform"}, {"name": "source_column", "type": "string", "description": "The column containing the data you want to transform"}, {"name": "include_columns", "type": "string", "description": "Other columns from the source table to be included in the model (defaults to '*' and brings all columns across)"}], "created_at": 1720749449.2108243, "supported_languages": null}, "macro.dbt_ml_preprocessing.default__label_encoder": {"name": "default__label_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/label_encoder.sql", "original_file_path": "macros/label_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.default__label_encoder", "macro_sql": "{% macro default__label_encoder(source_table,source_column,include_columns) %}\nwith distinct_values as (\n    select array_agg(distinct {{ source_column }}) within group (order by {{ source_column }} asc) as all_values_array from {{ source_table }}\n)\nselect \n{% for column in include_columns %}\n{{ source_table }}.{{ column }},\n{% endfor %}\narray_position({{ source_column }}::variant,all_values_array) as {{ source_column }}_encoded\nfrom distinct_values,{{ source_table }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/label_encoder.yml", "arguments": [], "created_at": 1720749449.213377, "supported_languages": null}, "macro.dbt_ml_preprocessing.bigquery__label_encoder": {"name": "bigquery__label_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/label_encoder.sql", "original_file_path": "macros/label_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.bigquery__label_encoder", "macro_sql": "{% macro bigquery__label_encoder(source_table,source_column,include_columns) %}\nwith distinct_values as (\n    select array_agg(distinct {{ source_column }} order by {{ source_column }} asc) as all_values_array from {{ source_table }}\n),\ndistinct_values_unnested as (\nSELECT *\nFROM distinct_values\nCROSS JOIN UNNEST(distinct_values.all_values_array) AS element\nWITH OFFSET AS offset\nORDER BY offset\n)\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n(select offset from distinct_values_unnested where element={{ source_column }}) as {{ source_column }}_encoded\nfrom distinct_values,{{ source_table }} as source_table\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/label_encoder.yml", "arguments": [], "created_at": 1720749449.2116628, "supported_languages": null}, "macro.dbt_ml_preprocessing.redshift__label_encoder": {"name": "redshift__label_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/label_encoder.sql", "original_file_path": "macros/label_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.redshift__label_encoder", "macro_sql": "{% macro redshift__label_encoder(source_table,source_column,include_columns) %}\nwith distinct_values as (\n    select distinct {{ source_column }} as distinct_value \n    from {{ source_table }}\n),\nnumbered_distinct_values as(\n  select distinct_value,\n  row_number() over (order by distinct_value) - 1 as row_num\n  from distinct_values)\nselect \n{% for column in include_columns %}\n{{ source_table }}.{{ column }},\n{% endfor %}\n(select row_num from numbered_distinct_values where distinct_value={{ source_column }}) as {{ source_column }}_encoded\nfrom {{ source_table }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/label_encoder.yml", "arguments": [], "created_at": 1720749449.2125058, "supported_languages": null}, "macro.dbt_ml_preprocessing.synapse__label_encoder": {"name": "synapse__label_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/label_encoder.sql", "original_file_path": "macros/label_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.synapse__label_encoder", "macro_sql": "{% macro synapse__label_encoder(source_table,source_column,include_columns) %}\n    {% do return( dbt_ml_preprocessing.redshift__label_encoder(source_table,source_column,include_columns)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_ml_preprocessing.redshift__label_encoder"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.8625157, "supported_languages": null}, "macro.dbt_ml_preprocessing.sqlserver__label_encoder": {"name": "sqlserver__label_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/label_encoder.sql", "original_file_path": "macros/label_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.sqlserver__label_encoder", "macro_sql": "{% macro sqlserver__label_encoder(source_table,source_column,include_columns) %}\n    {% do return( dbt_ml_preprocessing.redshift__label_encoder(source_table,source_column,include_columns)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_ml_preprocessing.redshift__label_encoder"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.863214, "supported_languages": null}, "macro.dbt_ml_preprocessing.postgres__label_encoder": {"name": "postgres__label_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/label_encoder.sql", "original_file_path": "macros/label_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.postgres__label_encoder", "macro_sql": "{% macro postgres__label_encoder(source_table,source_column,include_columns) %}\n    {% do return( dbt_ml_preprocessing.redshift__label_encoder(source_table,source_column,include_columns)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ml_preprocessing.redshift__label_encoder"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.8639157, "supported_languages": null}, "macro.dbt_ml_preprocessing.max_abs_scaler": {"name": "max_abs_scaler", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/max_abs_scaler.sql", "original_file_path": "macros/max_abs_scaler.sql", "unique_id": "macro.dbt_ml_preprocessing.max_abs_scaler", "macro_sql": "{% macro max_abs_scaler(source_table,source_columns, include_columns='*') %}\n\n{% if source_columns is not iterable or source_columns is string or source_columns is mapping %}\n    {% set error_message %}\nThe `source_columns` parameter must contain a list of column names.\n    {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n\n{%- if include_columns=='*' -%}\n{%- set all_source_columns = adapter.get_columns_in_relation(source_table) | map(attribute='quoted') -%}\n{% set include_columns = all_source_columns %}\n{%- endif -%}\n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n{% for source_column in source_columns %}\n    {{ source_column }}_aggregates as(\n        select\n            max(abs({{ source_column }})) as max_abs_value\n        from {{ source_table }}\n    )\n{% if not loop.last %}, {% endif %}\n{% endfor %}\n\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n{% for source_column in source_columns %}\n    {{ source_column }} / {{ source_column }}_aggregates.max_abs_value AS {{ source_column }}_scaled\n    {% if not loop.last %}, {% endif %}\n{% endfor %}\n\nfrom \n    {% for source_column in source_columns %}\n        {{ source_column }}_aggregates,\n    {% endfor %}\n    {{ source_table }} as source_table\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Scale each feature by its maximum absolute value. See scikit-learn's [MaxAbsScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MaxAbsScaler.html#sklearn.preprocessing.MaxAbsScaler) for full documentation.\n\nWill append a new column with the name &lt;source column&gt;_scaled\n\nExample usage:\n#### **`models\\customer_features.yml:`**\n```\n{{ config(materialized='view') }}\n\n{{ dbt_ml_preprocessing.max_abs_scaler( ref('customer') ,'age') }}\n\n```\nWill produce a model named customer_features, with a new column named ```age_scaled``` containing the encoded values.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/max_abs_scaler.yml", "arguments": [{"name": "source_table", "type": "string", "description": "Pass in a ref to the table containing the data you want to transform"}, {"name": "source_columns", "type": "list", "description": "The columns containing the data you want to transform"}, {"name": "include_columns", "type": "string", "description": "Other columns from the source table to be included in the model (defaults to '*' and brings all columns across)"}], "created_at": 1720749449.2181602, "supported_languages": null}, "macro.dbt_ml_preprocessing.min_max_scaler": {"name": "min_max_scaler", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/min_max_scaler.sql", "original_file_path": "macros/min_max_scaler.sql", "unique_id": "macro.dbt_ml_preprocessing.min_max_scaler", "macro_sql": "{% macro min_max_scaler(source_table,source_columns, include_columns='*') %}\n\n{% if source_columns is not iterable or source_columns is string or source_columns is mapping %}\n    {% set error_message %}\nThe `source_columns` parameter must contain a list of column names.\n    {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n\n{%- if include_columns=='*' -%}\n{%- set all_source_columns = adapter.get_columns_in_relation(source_table) | map(attribute='quoted') -%}\n{% set include_columns = all_source_columns %}\n{%- endif -%}\n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n{% for source_column in source_columns %}\n    {{ source_column }}_aggregates as(\n        select\n            min({{ source_column }}) as min_value,\n            max({{ source_column }}) as max_value\n        from {{ source_table }}\n    )\n{% if not loop.last %}, {% endif %}\n{% endfor %}\n\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n{% for source_column in source_columns %}\n    ({{ source_column }} - {{ source_column }}_aggregates.min_value) / ({{ source_column }}_aggregates.max_value - {{ source_column }}_aggregates.min_value) AS {{ source_column }}_scaled\n    {% if not loop.last %}, {% endif %}\n{% endfor %}\n\nfrom  \n    {% for source_column in source_columns %}\n        {{ source_column }}_aggregates,\n    {% endfor %}\n    {{ source_table }} as source_table\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Transform features by scaling each feature to a given range. See scikit-learn's [MinMaxScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html#sklearn.preprocessing.MinMaxScaler) for full documentation.\n\nWill append a new column with the name &lt;source column&gt;_scaled\n\nExample usage:\n#### **`models\\customer_features.yml:`**\n```\n{{ config(materialized='view') }}\n\n{{ dbt_ml_preprocessing.min_max_scaler( ref('customer') ,'age') }}\n\n```\nWill produce a model named customer_features, with a new column named ```age_scaled``` containing the encoded values.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/min_max_scaler.yml", "arguments": [{"name": "source_table", "type": "string", "description": "Pass in a ref to the table containing the data you want to transform"}, {"name": "source_columns", "type": "list", "description": "The columns containing the data you want to transform"}, {"name": "include_columns", "type": "string", "description": "Other columns from the source table to be included in the model (defaults to '*' and brings all columns across)"}], "created_at": 1720749449.222742, "supported_languages": null}, "macro.dbt_ml_preprocessing.normalizer": {"name": "normalizer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/normalizer.sql", "original_file_path": "macros/normalizer.sql", "unique_id": "macro.dbt_ml_preprocessing.normalizer", "macro_sql": "{% macro normalizer(source_table,source_columns, include_columns='*') %}\n{%- if include_columns=='*' -%}\n{%- set all_source_columns = adapter.get_columns_in_relation(source_table) | map(attribute='quoted') -%}\n{% set include_columns = all_source_columns %}\n{%- endif -%}\n\nwith magnitude_calcs as (\n    select \n        {% for column in include_columns %}\n        source_table.{{ column }},\n        {% endfor %}\n        SQRT(\n            {% for source_column in source_columns %}\n            {{ source_column }}*{{ source_column }}\n            {% if not loop.last %} + {% endif %}\n            {% endfor %}\n        ) as magnitude_calc\n    from {{ source_table }} as source_table\n)\nselect \n{% for source_column in source_columns %}\ncase magnitude_calc\n    when 0 then 0\n    else {{ source_column }}/magnitude_calc\n    end as {{ source_column }}_normalized\n{% if not loop.last %}, {% endif %}\n{% endfor %}\nfrom magnitude_calcs\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Normalize samples individually to unit norm. See scikit-learn's [Normalizer](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.Normalizer.html#sklearn.preprocessing.Normalizer) for full documentation.\n\nWill append a new column with the name &lt;source column&gt;_normalized\n\nExample usage:\n#### **`models\\customer_features.yml:`**\n```\n{{ config(materialized='view') }}\n\n{{ dbt_ml_preprocessing.normalizer( ref('customer') ,'age') }}\n\n```\nWill produce a model named customer_features, with a new column named ```age_normalized``` containing the encoded values.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/normalizer.yml", "arguments": [{"name": "source_table", "type": "string", "description": "Pass in a ref to the table containing the data you want to transform"}, {"name": "source_columns", "type": "list", "description": "The columns containing the data you want to transform"}, {"name": "include_columns", "type": "string", "description": "Other columns from the source table to be included in the model (defaults to '*' and brings all columns across)"}], "created_at": 1720749449.2272725, "supported_languages": null}, "macro.dbt_ml_preprocessing.one_hot_encoder": {"name": "one_hot_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/one_hot_encoder.sql", "original_file_path": "macros/one_hot_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.one_hot_encoder", "macro_sql": "{% macro one_hot_encoder(source_table, source_column, categories='auto', handle_unknown='error',include_columns='*', exclude_columns=none) %}\n\n    {%- if categories=='auto' -%}\n        {% set category_values_query %}\n            select distinct\n                {{ source_column }}\n            from\n                {{ source_table }}\n            order by {{ source_column }}\n        {% endset %}\n        {% set results = run_query(category_values_query) %}\n        {% if execute %}\n            {# Return the first column #}\n            {% set category_values = results.columns[0].values() %}\n        {% else %}\n            {% set category_values = [] %}\n        {% endif %}\n    {% elif categories is not iterable or categories is string or categories is mapping %}\n        {% set error_message %}\n    The `categories` parameter must contain a list of category values.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- else -%}\n        {% set category_values = categories %}\n    {%- endif -%}\n\n    {%- if handle_unknown!='ignore' and handle_unknown!='error' -%}\n        {% set error_message %}\n    The 'handle_unknown' parameter requires a value of either 'ignore' (when unknown value occurs, all output columns are false) or 'error' (when unknown value occurs, raise an error).\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n\n    {%- if include_columns!='*' and exclude_columns is not none -%}\n        {% set error_message %}\n    If the 'exclude_columns' parameter is set, providing 'include_columns' is invalid and must be left at its default value.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n\n    {%- if exclude_columns is not none and (exclude_columns is not iterable or exclude_columns is string or exclude_columns is mapping) -%}\n        {% set error_message %}\n    The 'exclude_columns' parameter value contain a list of column names.\n        {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n\n    {%- if include_columns!='*' and (include_columns is not iterable or include_columns is string or include_columns is mapping) -%}\n        {% set error_message %}\n    The 'include_columns' parameter value must contain either the string '*' (for all columns in source), or a list of column names.\n        {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n\n    {% set columns = adapter.get_columns_in_relation( source_table ) %}\n\n    {%- if include_columns=='*' and exclude_columns is none -%}\n        {% set col_list = columns %}\n    {%- elif include_columns !='*'-%}\n        {% set col_list = include_columns %}\n    {%- else -%}\n        {% set col_list = [] %}\n        {% for column in columns  %}\n            {%- if column.name | lower not in exclude_columns | lower %}\n                {% do col_list.append(column) %}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {{ adapter.dispatch('one_hot_encoder','dbt_ml_preprocessing')(source_table, source_column, category_values, handle_unknown, col_list) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query", "macro.dbt_ml_preprocessing.default__one_hot_encoder"]}, "description": "Encode categorical features as a one-hot numeric array. See scikit-learn's [OneHotEncoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html#sklearn.preprocessing.OneHotEncoder) for full documentation.\n\nWill append a new boolean column for every category present in the data with the name is_&lt;source column&gt;_&lt;category value&gt;.\n\nExample usage:\n#### **`models\\customer_features.yml:`**\n```\n{{ config(materialized='view') }}\n\n{{ dbt_ml_preprocessing.one_hot_encoder( ref('customer') ,'gender') }}\n\n```\nIf the column contained values 'male' and 'female, it will produce a model named customer_features with two new boolean columns named ```is_gender_male``` and ```is_gender_female```.\n\nAny spaces in the category values will be replaced with underscores, for ease of querying.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/one_hot_encoder.yml", "arguments": [{"name": "source_table", "type": "string", "description": "Pass in a ref to the table containing the data you want to transform"}, {"name": "source_column", "type": "string", "description": "The column containing the data you want to transform"}, {"name": "include_columns", "type": "string", "description": "Other columns from the source table to be included in the model (defaults to '*' and brings all columns across)"}, {"name": "exclude_columns", "type": "string", "description": "A list of columns from the source table to be excluded in the model. Cannot be used in conjunction with 'include_columns'"}, {"name": "categories", "type": "string", "description": "The categories of each feature determined during fitting. Defaults to 'auto', which will encode all values."}, {"name": "handle_unknown", "type": "string", "description": "Whether to raise an error or ignore if an unknown categorical feature is present during transform, defaults to 'error'. If 'ignore' is set and an unknown value is encountered, all output columns will be false."}], "created_at": 1720749449.2355075, "supported_languages": null}, "macro.dbt_ml_preprocessing.default__one_hot_encoder": {"name": "default__one_hot_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/one_hot_encoder.sql", "original_file_path": "macros/one_hot_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.default__one_hot_encoder", "macro_sql": "{% macro default__one_hot_encoder(source_table, source_column, category_values, handle_unknown, col_list) %}\n\n    select\n        {% for column in col_list %}\n            {{ column.name }},\n        {%- endfor -%}\n        {% for category in category_values %}\n            {% set no_whitespace_column_name = category | replace( \" \", \"_\") -%}\n                {%- if handle_unknown=='ignore' %}\n                    case \n                        when {{ source_column }} = '{{ category }}' then true \n                        else false\n                    end as is_{{ source_column }}_{{ no_whitespace_column_name }}\n                {% endif %}\n                {%- if handle_unknown=='error' %}\n                    case \n                        when {{ source_column }} = '{{ category }}' then true \n                        when {{ source_column }} in ('{{ category_values | join(\"','\") }}') then false\n                        else cast('Error: unknown value found and handle_unknown parameter was \"error\"' as boolean)\n                    end as is_{{ source_column }}_{{ no_whitespace_column_name }}\n                {% endif %}\n            {%- if not loop.last %},{% endif -%}\n        {% endfor %}\n    from {{ source_table }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/one_hot_encoder.yml", "arguments": [], "created_at": 1720749449.2363517, "supported_languages": null}, "macro.dbt_ml_preprocessing.sqlserver__one_hot_encoder": {"name": "sqlserver__one_hot_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/one_hot_encoder.sql", "original_file_path": "macros/one_hot_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.sqlserver__one_hot_encoder", "macro_sql": "{% macro sqlserver__one_hot_encoder(source_table, source_column, category_values, handle_unknown, col_list) %}\n\n    select\n        {% for column in col_list %}\n            {{ column.name }},\n        {%- endfor -%}\n        {% for category in category_values %}\n            {% set no_whitespace_column_name = category | replace( \" \", \"_\") -%}\n                {%- if handle_unknown=='ignore' %}\n                    case \n                        when {{ source_column }} = '{{ category }}' then 1 \n                        else 0\n                    end as is_{{ source_column }}_{{ no_whitespace_column_name }}\n                {% endif %}\n                {%- if handle_unknown=='error' %}\n                    case \n                        when {{ source_column }} = '{{ category }}' then 1 \n                        when {{ source_column }} in ('{{ category_values | join(\"','\") }}') then 0\n                        else cast('Error: unknown value found and handle_unknown parameter was \"error\"' as bit)\n                    end as is_{{ source_column }}_{{ no_whitespace_column_name }}\n                {% endif %}\n            {%- if not loop.last %},{% endif -%}\n        {% endfor %}\n    from {{ source_table }}\n      \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.906822, "supported_languages": null}, "macro.dbt_ml_preprocessing.synapse__one_hot_encoder": {"name": "synapse__one_hot_encoder", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/one_hot_encoder.sql", "original_file_path": "macros/one_hot_encoder.sql", "unique_id": "macro.dbt_ml_preprocessing.synapse__one_hot_encoder", "macro_sql": "{% macro synapse__one_hot_encoder(source_table, source_column, category_values, handle_unknown, col_list) %}\n    {% do return( dbt_ml_preprocessing.sqlserver__one_hot_encoder(source_table, source_column, category_values, handle_unknown, col_list)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_ml_preprocessing.sqlserver__one_hot_encoder"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9076798, "supported_languages": null}, "macro.dbt_ml_preprocessing.quantile_transformer": {"name": "quantile_transformer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/quantile_transformer.sql", "original_file_path": "macros/quantile_transformer.sql", "unique_id": "macro.dbt_ml_preprocessing.quantile_transformer", "macro_sql": "{% macro quantile_transformer(source_table,source_column,n_quantiles=10,output_distribution='uniform',subsample=1000,include_columns='*') %}\n{%- if include_columns=='*' -%}\n{%- set all_source_columns = adapter.get_columns_in_relation(source_table) | map(attribute='quoted') -%}\n{% set include_columns = all_source_columns | join(', ') %}\n{%- endif -%}\n{{ adapter.dispatch('quantile_transformer','dbt_ml_preprocessing')(source_table,source_column,n_quantiles,output_distribution,subsample,include_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ml_preprocessing.default__quantile_transformer"]}, "description": "Transform features using quantiles information. See scikit-learn's [QuantileTransformer](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.QuantileTransformer.html#sklearn.preprocessing.QuantileTransformer) for full documentation.\n\nWill append a new column with the name &lt;source column&gt;_transformed.\n\nExample usage:\n#### **`models\\customer_features.yml:`**\n```\n{{ config(materialized='view') }}\n\n{{ dbt_ml_preprocessing.quantile_transformer( ref('customer') ,'age') }}\n\n```\nWill produce a model named customer_features, with a new column named ```age_transformed``` containing the encoded values.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/quantile_transformer.yml", "arguments": [{"name": "source_table", "type": "string", "description": "Pass in a ref to the table containing the data you want to transform"}, {"name": "source_column", "type": "string", "description": "The column containing the data you want to transform"}, {"name": "include_columns", "type": "string", "description": "Other columns from the source table to be included in the model (defaults to '*' and brings all columns across)"}, {"name": "n_quantiles", "type": "string", "description": "Number of quantiles to be computed, defaults to 10."}, {"name": "output_distribution", "type": "string", "description": "Marginal distribution for the transformed data. Only supports the default value of 'uniform' at this time."}, {"name": "subsample", "type": "string", "description": "Maximum number of samples used to estimate the quantiles for computational efficiency, defaults to 1000."}], "created_at": 1720749449.2446115, "supported_languages": null}, "macro.dbt_ml_preprocessing.default__quantile_transformer": {"name": "default__quantile_transformer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/quantile_transformer.sql", "original_file_path": "macros/quantile_transformer.sql", "unique_id": "macro.dbt_ml_preprocessing.default__quantile_transformer", "macro_sql": "{% macro default__quantile_transformer(source_table,source_column,n_quantiles,output_distribution,subsample,include_columns) %}\nwith quantile_values as(\n  {% for quartile_index in range(n_quantiles) %}\n    {% set quartile = quartile_index / (n_quantiles-1) %}\n    select {{ quartile }} as quantile,percentile_cont({{ quartile }})  within group (order by {{ source_column }})as quantile_value from {{ source_table }}\n    {% if not loop.last %} union all {% endif %}\n  {% endfor %}\n),\n-- prepare to apply linear interpolation formula\nlinear_interpolation_variables as(\n  select \n    {{include_columns}},\n    {{ source_column }} as x,\n    (select max(b.quantile) from quantile_values b where b.quantile_value<a.{{ source_column }}) as y1,\n    (select min(b.quantile) from quantile_values b where b.quantile_value>=a.{{ source_column }}) as y2,\n    (select max(b.quantile_value) from quantile_values b where b.quantile_value<a.{{ source_column }}) as x1,\n    (select min(b.quantile_value) from quantile_values b where b.quantile_value>=a.{{ source_column }}) as x2\n  from {{ source_table }} a\n  where {{ source_column }} is not null\n  order by {{ source_column }}\n)\nselect\n{{include_columns}},\ncoalesce(y1 + ((x-x1)/(x2-x1)) * (y2-y1),0) as {{ source_column }}_transformed\nfrom linear_interpolation_variables\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/quantile_transformer.yml", "arguments": [], "created_at": 1720749449.2454796, "supported_languages": null}, "macro.dbt_ml_preprocessing.bigquery__quantile_transformer": {"name": "bigquery__quantile_transformer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/quantile_transformer.sql", "original_file_path": "macros/quantile_transformer.sql", "unique_id": "macro.dbt_ml_preprocessing.bigquery__quantile_transformer", "macro_sql": "{% macro bigquery__quantile_transformer(source_table,source_column,n_quantiles,output_distribution,subsample,include_columns) %}\nwith quantile_values as(\n  {% for quartile_index in range(n_quantiles) %}\n    {% set quartile = quartile_index / (n_quantiles-1) %}\n    select distinct {{ quartile }} as quantile,percentile_cont({{ source_column }},{{ quartile }}) OVER() as quantile_value from {{ source_table }}\n    {% if not loop.last %} union all {% endif %}\n  {% endfor %}\n),\n-- fold all quantiles and quantile values into a single row, an array of structs that we can safely cross join on\nquantile_values_array as(\nselect ARRAY_AGG(struct (quantile, quantile_value)) as quantile_values from quantile_values\n),\n-- prepare to apply linear interpolation formula\nlinear_interpolation_variables as(\n  select \n    {{include_columns}},\n    {{ source_column }} as x,\n    (select max(b.quantile) from UNNEST(quantile_values) b where b.quantile_value<a.{{ source_column }}) as y1,\n    (select min(b.quantile) from UNNEST(quantile_values) b where b.quantile_value>=a.{{ source_column }}) as y2,\n    (select max(b.quantile_value) from UNNEST(quantile_values) b where b.quantile_value<a.{{ source_column }}) as x1,\n    (select min(b.quantile_value) from UNNEST(quantile_values) b where b.quantile_value>=a.{{ source_column }}) as x2\n  from {{ source_table }} a,\n  quantile_values_array\n  where {{ source_column }} is not null\n  order by {{ source_column }}\n)\nselect\n{{include_columns}},\ncoalesce(y1 + ((x-x1)/(x2-x1)) * (y2-y1),0) as {{ source_column }}_transformed\nfrom linear_interpolation_variables\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/quantile_transformer.yml", "arguments": [], "created_at": 1720749449.2463045, "supported_languages": null}, "macro.dbt_ml_preprocessing.redshift__quantile_transformer": {"name": "redshift__quantile_transformer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/quantile_transformer.sql", "original_file_path": "macros/quantile_transformer.sql", "unique_id": "macro.dbt_ml_preprocessing.redshift__quantile_transformer", "macro_sql": "{% macro redshift__quantile_transformer(source_table,source_column,n_quantiles,output_distribution,subsample,include_columns) %}\n{% if execute %}\n{% set error_message %}\nThe `quantile_transformer` macro is only supported on Snowflake and BigQuery at this time. It should work on other DBs, it just requires some rework.\n{% endset %}\n{%- do exceptions.raise_compiler_error(error_message) -%}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9221601, "supported_languages": null}, "macro.dbt_ml_preprocessing.postgre__quantile_transformer": {"name": "postgre__quantile_transformer", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/quantile_transformer.sql", "original_file_path": "macros/quantile_transformer.sql", "unique_id": "macro.dbt_ml_preprocessing.postgre__quantile_transformer", "macro_sql": "{% macro postgre__quantile_transformer(source_table,source_column,n_quantiles,output_distribution,subsample,include_columns) %}\n    {% do return( dbt_ml_preprocessing.bigquery__quantile_transformer(source_table,source_column,n_quantiles,output_distribution,subsample,include_columns)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ml_preprocessing.bigquery__quantile_transformer"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.923051, "supported_languages": null}, "macro.dbt_ml_preprocessing.robust_scaler": {"name": "robust_scaler", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/robust_scaler.sql", "original_file_path": "macros/robust_scaler.sql", "unique_id": "macro.dbt_ml_preprocessing.robust_scaler", "macro_sql": "{% macro robust_scaler(source_table,source_columns,include_columns='*',with_centering=False,quantile_range=[25,75]) %}\n{%- if with_centering!=False -%}\n    {% set error_message %}\nThe `robust_scaler` macro only supports a 'with_centering' value of 'False' at this time.\n    {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n{%- if quantile_range | length !=2 -%}\n    {% set error_message %}\nThe `robust_scaler` macro only supports a 'quantile_range' value with exactly two values.\n    {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n{% if source_columns is not iterable or source_columns is string or source_columns is mapping %}\n    {% set error_message %}\nThe `source_columns` parameter must contain a list of column names.\n    {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n\n{%- if include_columns=='*' -%}\n{%- set all_source_columns = adapter.get_columns_in_relation(source_table) | map(attribute='quoted') -%}\n{% set include_columns = all_source_columns %}\n{%- endif -%}\n{{ adapter.dispatch('robust_scaler','dbt_ml_preprocessing')(source_table,source_columns,include_columns,with_centering,quantile_range) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ml_preprocessing.default__robust_scaler"]}, "description": "Scale features using statistics that are robust to outliers. See scikit-learn's [RobustScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.RobustScaler.html#sklearn.preprocessing.RobustScaler) for full documentation.\n\nWill append a new column with the name &lt;source column&gt;_scaled.\n\nExample usage:\n#### **`models\\customer_features.yml:`**\n```\n{{ config(materialized='view') }}\n\n{{ dbt_ml_preprocessing.robust_scaler( ref('customer') ,'age') }}\n\n```\nWill produce a model named customer_features, with a new column named ```age_scaled``` containing the scaled values.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/robust_scaler.yml", "arguments": [{"name": "source_table", "type": "string", "description": "Pass in a ref to the table containing the data you want to transform"}, {"name": "source_columns", "type": "list", "description": "The columns containing the data you want to transform"}, {"name": "include_columns", "type": "string", "description": "Other columns from the source table to be included in the model (defaults to '*' and brings all columns across)"}, {"name": "with_centering", "type": "string", "description": "If True, center the data before scaling. Only supports the default value of 'False' at this time."}, {"name": "quantile_range", "type": "string", "description": "Quantile range, must be a two-item array containing the first quartile threshold and the third quartile threshold. Defaults to Interquartile Range, which is [25,75]"}], "created_at": 1720749449.2532046, "supported_languages": null}, "macro.dbt_ml_preprocessing.default__robust_scaler": {"name": "default__robust_scaler", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/robust_scaler.sql", "original_file_path": "macros/robust_scaler.sql", "unique_id": "macro.dbt_ml_preprocessing.default__robust_scaler", "macro_sql": "{% macro default__robust_scaler(source_table,source_columns,include_columns,with_centering,quantile_range) %}\nwith \n{% for source_column in source_columns %}\n    {{ source_column }}_quartiles as(\n        select\n            percentile_cont({{ quantile_range[0] / 100 }}) within group (order by {{ source_column }}) as first_quartile,\n            percentile_cont({{ quantile_range[1] / 100 }}) within group (order by {{ source_column }}) as third_quartile\n        from {{ source_table }}\n    )\n{% if not loop.last %}, {% endif %}\n{% endfor %}\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n{% for source_column in source_columns %}\n    ({{ source_column }} / ({{ source_column }}_quartiles.third_quartile - {{ source_column }}_quartiles.first_quartile)) as {{ source_column }}_scaled\n    {% if not loop.last %}, {% endif %}\n{% endfor %}\nfrom \n    {% for source_column in source_columns %}\n        {{ source_column }}_quartiles,\n    {% endfor %}\n    {{ source_table }} as source_table\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/robust_scaler.yml", "arguments": [], "created_at": 1720749449.2548788, "supported_languages": null}, "macro.dbt_ml_preprocessing.bigquery__robust_scaler": {"name": "bigquery__robust_scaler", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/robust_scaler.sql", "original_file_path": "macros/robust_scaler.sql", "unique_id": "macro.dbt_ml_preprocessing.bigquery__robust_scaler", "macro_sql": "{% macro bigquery__robust_scaler(source_table,source_columns,include_columns,with_centering,quantile_range) %}\nwith \n{% for source_column in source_columns %}\n    {{ source_column }}_quartiles as(\n        select\n            percentile_cont({{ source_column }},{{ quantile_range[0] / 100 }}) OVER() as first_quartile,\n            percentile_cont({{ source_column }},{{ quantile_range[1] / 100 }}) OVER() as third_quartile\n        from {{ source_table }}\n    )\n{% if not loop.last %}, {% endif %}\n{% endfor %}\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n{% for source_column in source_columns %}\n    ({{ source_column }} / ({{ source_column }}_quartiles.third_quartile - {{ source_column }}_quartiles.first_quartile)) as {{ source_column }}_scaled\n    {% if not loop.last %}, {% endif %}\n{% endfor %}\nfrom \n    {% for source_column in source_columns %}\n        {{ source_column }}_quartiles,\n    {% endfor %}\n    {{ source_table }} as source_table\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/robust_scaler.yml", "arguments": [], "created_at": 1720749449.2540388, "supported_languages": null}, "macro.dbt_ml_preprocessing.redshift__robust_scaler": {"name": "redshift__robust_scaler", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/robust_scaler.sql", "original_file_path": "macros/robust_scaler.sql", "unique_id": "macro.dbt_ml_preprocessing.redshift__robust_scaler", "macro_sql": "{% macro redshift__robust_scaler(source_table,source_columns,include_columns,with_centering,quantile_range) %}\nwith \n{% for source_column in source_columns %}\n    {{ source_column }}_quartiles as(\n        select\n            percentile_cont({{ quantile_range[0] / 100 }}) within group (order by {{ source_column }}) as first_quartile,\n            percentile_cont({{ quantile_range[1] / 100 }}) within group (order by {{ source_column }}) as third_quartile\n        from {{ source_table }}\n    )\n{% if not loop.last %}, {% endif %}\n{% endfor %}\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n{% for source_column in source_columns %}\n    ({{ source_column }} / ({{ source_column }}_quartiles.third_quartile - {{ source_column }}_quartiles.first_quartile)) as {{ source_column }}_scaled\n    {% if not loop.last %}, {% endif %}\n{% endfor %}\nfrom \n    {% for source_column in source_columns %}\n        {{ source_column }}_quartiles,\n    {% endfor %}\n    {{ source_table }} as source_table\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/robust_scaler.yml", "arguments": [], "created_at": 1720749449.255711, "supported_languages": null}, "macro.dbt_ml_preprocessing.sqlserver__robust_scaler": {"name": "sqlserver__robust_scaler", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/robust_scaler.sql", "original_file_path": "macros/robust_scaler.sql", "unique_id": "macro.dbt_ml_preprocessing.sqlserver__robust_scaler", "macro_sql": "{% macro sqlserver__robust_scaler(source_table,source_columns,include_columns,with_centering,quantile_range) %}\nwith \n{% for source_column in source_columns %}\n    {{ source_column }}_quartiles as(\n        select\n            percentile_cont({{ quantile_range[0] / 100 }}) within group (order by {{ source_column }}) OVER() as first_quartile,\n            percentile_cont({{ quantile_range[1] / 100 }}) within group (order by {{ source_column }}) OVER() as third_quartile\n        from {{ source_table }}\n    )\n{% if not loop.last %}, {% endif %}\n{% endfor %}\nselect \n{% for column in include_columns %}\nsource_table.{{ column }},\n{% endfor %}\n{% for source_column in source_columns %}\n    ({{ source_column }} / ({{ source_column }}_quartiles.third_quartile - {{ source_column }}_quartiles.first_quartile)) as {{ source_column }}_scaled\n    {% if not loop.last %}, {% endif %}\n{% endfor %}\nfrom \n    {% for source_column in source_columns %}\n        {{ source_column }}_quartiles,\n    {% endfor %}\n    {{ source_table }} as source_table\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9542363, "supported_languages": null}, "macro.dbt_ml_preprocessing.standard_scaler": {"name": "standard_scaler", "resource_type": "macro", "package_name": "dbt_ml_preprocessing", "path": "macros/standard_scaler.sql", "original_file_path": "macros/standard_scaler.sql", "unique_id": "macro.dbt_ml_preprocessing.standard_scaler", "macro_sql": "{% macro standard_scaler(source_table,source_columns,include_columns='*',with_mean=True) %}\n{%- if with_mean!=True -%}\n    {% set error_message %}\nThe `standard_scaler` macro only supports a 'with_mean' value of 'True' at this time.\n    {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n{% if source_columns is not iterable or source_columns is string or source_columns is mapping %}\n    {% set error_message %}\nThe `source_columns` parameter must contain a list of column names.\n    {% endset %}\n    {%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n\n{%- if include_columns=='*' -%}\n{%- set all_source_columns = adapter.get_columns_in_relation(source_table) | map(attribute='quoted') -%}\n{% set include_columns = all_source_columns %}\n{%- endif -%}\n\n-- generate a CTE for each source column, a single row containing the aggregates\nwith \n{% for source_column in source_columns %}\n    {{ source_column }}_aggregates as(\n        select\n            avg({{ source_column }}) as avg_value,\n            stddev_pop({{ source_column }}) as stddev_value\n        from {{ source_table }}\n    )\n{% if not loop.last %}, {% endif %}\n{% endfor %}\n\nselect \n    {% for column in include_columns %}\n        source_table.{{ column }},\n    {% endfor %}\n    {% for source_column in source_columns %}\n        ({{ source_column }} - {{ source_column }}_aggregates.avg_value) / {{ source_column }}_aggregates.stddev_value as {{ source_column }}_scaled\n        {% if not loop.last %}, {% endif %}\n    {% endfor %}\nfrom \n    {% for source_column in source_columns %}\n        {{ source_column }}_aggregates,\n    {% endfor %}\n    {{ source_table }} as source_table\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Standardize features by removing the mean and scaling to unit variance. See scikit-learn's [StandardScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html#sklearn.preprocessing.StandardScaler) for full documentation.\n\nWill append a new column with the name &lt;source column&gt;_scaled.\n\nExample usage:\n#### **`models\\customer_features.yml:`**\n```\n{{ config(materialized='view') }}\n\n{{ dbt_ml_preprocessing.standard_scaler( ref('customer') ,'age') }}\n\n```\nWill produce a model named customer_features, with a new column named ```age_scaled``` containing the scaled values.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ml_preprocessing://macros/standard_scaler.yml", "arguments": [{"name": "source_table", "type": "string", "description": "Pass in a ref to the table containing the data you want to transform"}, {"name": "source_column", "type": "list", "description": "The columns containing the data you want to transform"}, {"name": "include_columns", "type": "string", "description": "Other columns from the source table to be included in the model (defaults to '*' and brings all columns across)"}, {"name": "with_mean", "type": "string", "description": "If True, center the data before scaling. Only supports the default value of 'True' at this time."}], "created_at": 1720749449.2618315, "supported_languages": null}, "macro.dbt_utils.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9620476, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.962551, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9631982, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"name": "redshift__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9638464, "supported_languages": null}, "macro.dbt_utils.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9653938, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9659011, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9663916, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"name": "redshift__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.96687, "supported_languages": null}, "macro.dbt_utils.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9687414, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9698763, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9704084, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"name": "redshift__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9709141, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9714277, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"name": "cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9729812, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"name": "default__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9734793, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"name": "postgres__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9744594, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"name": "redshift__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9749556, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"name": "bigquery__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9753516, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9773865, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9778104, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"name": "redshift__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9781117, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9783986, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.979268, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"name": "default__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9797065, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"name": "snowflake__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.980226, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"name": "postgres__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9806283, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"name": "redshift__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9811454, "supported_languages": null}, "macro.dbt_utils.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "unique_id": "macro.dbt_utils.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9820669, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "unique_id": "macro.dbt_utils.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.98303, "supported_languages": null}, "macro.dbt_utils.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "unique_id": "macro.dbt_utils.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9839416, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "unique_id": "macro.dbt_utils.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9849184, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.98579, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9869435, "supported_languages": null}, "macro.dbt_utils.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "unique_id": "macro.dbt_utils.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9878328, "supported_languages": null}, "macro.dbt_utils.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "unique_id": "macro.dbt_utils.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9887884, "supported_languages": null}, "macro.dbt_utils.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.990669, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9915817, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9921618, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.993097, "supported_languages": null}, "macro.dbt_utils.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.993693, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9946074, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9951975, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9961078, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.996705, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9976492, "supported_languages": null}, "macro.dbt_utils.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9982502, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749442.9991536, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "unique_id": "macro.dbt_utils.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0001473, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "unique_id": "macro.dbt_utils.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0011969, "supported_languages": null}, "macro.dbt_utils.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "unique_id": "macro.dbt_utils.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0022967, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "unique_id": "macro.dbt_utils.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.003395, "supported_languages": null}, "macro.dbt_utils.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "unique_id": "macro.dbt_utils.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0044723, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "unique_id": "macro.dbt_utils.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0058, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "unique_id": "macro.dbt_utils.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0067453, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "unique_id": "macro.dbt_utils.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0077126, "supported_languages": null}, "macro.dbt_utils.except": {"name": "except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "unique_id": "macro.dbt_utils.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0085545, "supported_languages": null}, "macro.dbt_utils.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "unique_id": "macro.dbt_utils.default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.009501, "supported_languages": null}, "macro.dbt_utils.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "unique_id": "macro.dbt_utils.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0104184, "supported_languages": null}, "macro.dbt_utils.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "unique_id": "macro.dbt_utils.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.011352, "supported_languages": null}, "macro.dbt_utils.identifier": {"name": "identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "unique_id": "macro.dbt_utils.identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.012856, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"name": "default__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "unique_id": "macro.dbt_utils.default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.013266, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"name": "bigquery__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "unique_id": "macro.dbt_utils.bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.013648, "supported_languages": null}, "macro.dbt_utils.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "unique_id": "macro.dbt_utils.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.014517, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "unique_id": "macro.dbt_utils.default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0154233, "supported_languages": null}, "macro.dbt_utils.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "unique_id": "macro.dbt_utils.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0164344, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "unique_id": "macro.dbt_utils.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0175083, "supported_languages": null}, "macro.dbt_utils.length": {"name": "length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "unique_id": "macro.dbt_utils.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0184398, "supported_languages": null}, "macro.dbt_utils.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "unique_id": "macro.dbt_utils.default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.019388, "supported_languages": null}, "macro.dbt_utils.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "unique_id": "macro.dbt_utils.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0206656, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "unique_id": "macro.dbt_utils.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.021979, "supported_languages": null}, "macro.dbt_utils.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "unique_id": "macro.dbt_utils.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0228848, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "unique_id": "macro.dbt_utils.default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0238357, "supported_languages": null}, "macro.dbt_utils.position": {"name": "position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "unique_id": "macro.dbt_utils.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0248504, "supported_languages": null}, "macro.dbt_utils.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "unique_id": "macro.dbt_utils.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0261157, "supported_languages": null}, "macro.dbt_utils.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "unique_id": "macro.dbt_utils.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0271742, "supported_languages": null}, "macro.dbt_utils.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "unique_id": "macro.dbt_utils.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0282693, "supported_languages": null}, "macro.dbt_utils.right": {"name": "right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "unique_id": "macro.dbt_utils.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0293002, "supported_languages": null}, "macro.dbt_utils.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "unique_id": "macro.dbt_utils.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0303278, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "unique_id": "macro.dbt_utils.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.031313, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "unique_id": "macro.dbt_utils.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.032345, "supported_languages": null}, "macro.dbt_utils.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "unique_id": "macro.dbt_utils.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.033452, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "unique_id": "macro.dbt_utils.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.034579, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning": {"name": "xdb_deprecation_warning", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "unique_id": "macro.dbt_utils.xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.035891, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"name": "xdb_deprecation_warning_without_replacement", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0367713, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0385108, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0400865, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0411544, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.041783, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0432649, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.044366, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0455685, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0466068, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0485792, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0517325, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0531933, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0542157, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0556178, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0563915, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0636337, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0687196, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0703154, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0716155, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0726318, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0732787, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.074532, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.076244, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0774996, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.07857, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.080342, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.081529, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0832932, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.085304, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"name": "test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "unique_id": "macro.dbt_utils.test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.086641, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"name": "default__test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "unique_id": "macro.dbt_utils.default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.087281, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"name": "test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "unique_id": "macro.dbt_utils.test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.088598, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"name": "default__test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "unique_id": "macro.dbt_utils.default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0898724, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0915549, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0937297, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0962286, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0976949, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.0985684, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.099179, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1000495, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1006339, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1015813, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1022692, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1037822, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1170695, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1187665, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"name": "get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1198308, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"name": "default__get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.121553, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"name": "materialization_insert_by_period_default", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1384182, "supported_languages": ["sql"]}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1404998, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1424906, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1433375, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1445324, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1510644, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1518228, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1525373, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.153257, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.153872, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.15448, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1566026, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1580715, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1587543, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.160527, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1634376, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1687207, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.170194, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1726086, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1738284, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.175797, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1776757, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1805034, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1823938, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1852272, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.18635, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1868658, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1873655, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1912174, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1924589, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1949115, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.1968474, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.19814, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.199101, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2000012, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2008936, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.203448, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2043948, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2062974, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2090404, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2101367, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2113051, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2123187, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2135348, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2163756, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2193902, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2206137, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2216475, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2236273, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2268913, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2285795, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2316415, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.237746, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2477384, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2521024, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.258677, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2620363, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2635326, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.265051, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2657309, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2667844, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2682219, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2692738, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2703426, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2716382, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2736104, "supported_languages": null}, "macro.elementary.dump_table": {"name": "dump_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/dump_table.sql", "original_file_path": "macros/commands/dump_table.sql", "unique_id": "macro.elementary.dump_table", "macro_sql": "{% macro dump_table(model_unique_id, output_path, exclude_deprecated_columns=true, since=none, days_back=7) %}\n    {% set node = graph.nodes[model_unique_id] %}\n    {% set relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) %}\n    {% if relation is none %}\n        {% do print(\"Relation '{}' does not exist.\".format(node.relation_name)) %}\n        {% do return([]) %}\n    {% endif %}\n\n    {% set column_names = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | map(\"lower\") | list %}\n    {% if exclude_deprecated_columns %}\n        {% set deprecated_column_names = node.columns.values() | selectattr(\"deprecated\") | map(attribute=\"name\") | map(\"lower\") | list %}\n        {% set column_names = column_names | reject(\"in\", deprecated_column_names) | list %}\n    {% endif %}\n\n    {% set timestamp_column = node.meta.timestamp_column %}\n    {% set query %}\n        select {{ elementary.escape_select(column_names) }} from {{ relation }}\n        {% if timestamp_column %}\n            {% if since %}\n                where {{ elementary.edr_cast_as_timestamp(timestamp_column) }} > {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(since)) }}\n            {% else %}\n                where {{ elementary.edr_datediff(elementary.edr_cast_as_timestamp(timestamp_column), elementary.edr_current_timestamp(), 'day') }} < {{ days_back }}\n            {% endif %}\n        {% endif %}\n    {% endset %}\n    {% set results = elementary.run_query(query) %}\n    {% do results.to_csv(output_path) %}\n    {% do return(results.column_names) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.escape_select", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.edr_datediff", "macro.elementary.edr_current_timestamp", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2809725, "supported_languages": null}, "macro.elementary.generate_elementary_cli_profile": {"name": "generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.generate_elementary_cli_profile", "macro_sql": "{% macro generate_elementary_cli_profile(method=none) %}\n  {% set elementary_database, elementary_schema = elementary.get_package_database_and_schema() %}\n  {{ log('\\n' ~ adapter.dispatch('generate_elementary_cli_profile')(method, elementary_database, elementary_schema), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.snowflake__generate_elementary_cli_profile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2859554, "supported_languages": null}, "macro.elementary.snowflake__generate_elementary_cli_profile": {"name": "snowflake__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.snowflake__generate_elementary_cli_profile", "macro_sql": "{% macro snowflake__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n  outputs:\n    default:\n      type: \"{{ target.type }}\"\n      account: \"{{ target.account }}\"\n      user: \"{{ target.user }}\"\n      password: \"<PASSWORD>\"\n      role: \"{{ target.role }}\"\n      warehouse: \"{{ target.warehouse }}\"\n      database: \"{{ elementary_database }}\"\n      schema: \"{{ elementary_schema }}\"\n      threads: {{ target.threads }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2870076, "supported_languages": null}, "macro.elementary.bigquery__generate_elementary_cli_profile": {"name": "bigquery__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.bigquery__generate_elementary_cli_profile", "macro_sql": "{% macro bigquery__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n  outputs:\n    default:\n      type: \"{{ target.type }}\"\n      method: \"<AUTH_METHOD>\" # Configure your auth method and add the required fields according to https://docs.getdbt.com/reference/warehouse-setups/bigquery-setup#authentication-methods\n      project: \"{{ elementary_database }}\"\n      {%- if method == 'github-actions' %}\n      keyfile: \"/tmp/bigquery_keyfile.json\" # Do not change this, supply `bigquery-keyfile` in `.github/workflows/elementary.yml`.\n      {%- endif %}\n      dataset: \"{{ elementary_schema }}\"\n      threads: {{ target.threads }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2879806, "supported_languages": null}, "macro.elementary.postgres__generate_elementary_cli_profile": {"name": "postgres__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.postgres__generate_elementary_cli_profile", "macro_sql": "{% macro postgres__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n  outputs:\n    default:\n      type: \"{{ target.type }}\"\n      host: \"{{ target.host }}\"\n      port: {{ target.port }}\n      user: \"{{ target.user }}\"\n      password: \"<PASSWORD>\"\n      dbname: \"{{ elementary_database }}\"\n      schema: \"{{ elementary_schema }}\"\n      threads: {{ target.threads }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2889774, "supported_languages": null}, "macro.elementary.databricks__generate_elementary_cli_profile": {"name": "databricks__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.databricks__generate_elementary_cli_profile", "macro_sql": "{% macro databricks__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n  outputs:\n    default:\n      type: \"{{ target.type }}\"\n      host: \"{{ target.host }}\"\n      http_path: \"{{ target.http_path }}\"\n      {%- if elementary_database %}\n      catalog: \"{{ elementary_database }}\"\n      {%- endif %}\n      schema: \"{{ elementary_schema }}\"\n      token: \"<TOKEN>\"\n      threads: {{ target.threads }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2900388, "supported_languages": null}, "macro.elementary.spark__generate_elementary_cli_profile": {"name": "spark__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.spark__generate_elementary_cli_profile", "macro_sql": "{% macro spark__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n  outputs:\n    default:\n      type: \"databricks\"\n      host: \"{{ target.host }}\"\n      http_path: \"<HTTP PATH>\"\n      {%- if elementary_database %}\n      catalog: \"{{ elementary_database }}\"\n      {% endif %}\n      schema: \"{{ elementary_schema }}\"\n      token: \"<TOKEN>\"\n      threads: {{ target.threads }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.2909153, "supported_languages": null}, "macro.elementary.default__generate_elementary_cli_profile": {"name": "default__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.default__generate_elementary_cli_profile", "macro_sql": "{% macro default__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nAdapter \"{{ target.type }}\" is not supported on Elementary.\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.291405, "supported_languages": null}, "macro.elementary.generate_json_schema_test": {"name": "generate_json_schema_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_json_schema_test.sql", "original_file_path": "macros/commands/generate_json_schema_test.sql", "unique_id": "macro.elementary.generate_json_schema_test", "macro_sql": "{% macro generate_json_schema_test(node_name, column_name) %}\n    {% if target.type not in ['snowflake', 'bigquery'] %}\n      {% do exceptions.raise_compiler_error(\"JSON schema test generation is not supported for target: {}\".format(target.type)) %}\n    {% endif %}\n\n    {% set node = elementary.get_node_by_name(node_name) %}\n    {% if node.resource_type not in [\"source\", \"model\"] %}\n      {% do exceptions.raise_compiler_error(\"Only sources and models are supported for this macro, supplied node type: '{}'\".format(node.resource_type)) %}\n    {% endif %}\n\n    {% set node_relation = get_relation_from_node(node) %}\n    {% if not elementary.column_exists_in_relation(node_relation, column_name) %}\n      {% do exceptions.raise_compiler_error(\"Column '{}' does not exist in {} '{}'!\".format(column_name, node.resource_type, node_name)) %}\n    {% endif %}\n\n    {% set elementary_database_name, elementary_schema_name = elementary.get_package_database_and_schema() %}\n\n    {% do node.config.update({\"packages\": [\"genson\"]}) %}\n    {% do node.update({'database': elementary_database_name, 'schema': elementary_schema_name}) %}\n    {% if node.resource_type == 'source' %}\n      {# Source nodes don't have alias, and submit_python_job expects it #}\n      {% do node.update({'alias': \"jsonschemagen_{}_{}\".format(node.source_name, node.name)}) %}\n    {% endif %}\n\n    {% set output_table = api.Relation.create(database=elementary_database_name, schema=elementary_schema_name,\n        identifier='json_schema_tmp__' ~ node.alias).quote(false, false, false) %}\n\n    {% set gen_json_schema_func = elementary.generate_json_schema_py_func(column_name) %}\n    {% set node_relation = node_relation.quote(false, false, false) %}\n    {% set compiled_py_code = adapter.dispatch('compile_py_code', 'elementary')(node_relation, gen_json_schema_func,\n                                                                                output_table, code_type='function') %}\n\n    {% do elementary.run_python(node, compiled_py_code) %}\n    {% set json_schema = elementary.result_value('select result from {}'.format(output_table)) %}\n    {% if json_schema == 'genson_not_installed' %}\n      {% do exceptions.raise_compiler_error(\"The 'genson' python library is missing from your warehouse.\\n\\n\"\n         \"This macro relies on the 'genson' python library for generating JSON schemas. Please follow dbt's instructions here: \\n\"\n         \"https://docs.getdbt.com/docs/building-a-dbt-project/building-models/python-models#specific-data-warehouses\\n\"\n         \"regarding how to install python packages for a {} warehouse.\".format(target.type)\n      ) %}\n    {% endif %}\n\n    {% if not json_schema %}\n        {% do exceptions.raise_compiler_error(\"Not a valid JSON column: {}\".format(column_name)) %}\n    {% endif %}\n\n    {% set json_schema = fromjson(json_schema) %}\n    {% do json_schema.pop('$schema', None) %}\n\n    {% set testyaml %}\ncolumns:\n  - name: {{ column_name }}\n    tests:\n      - elementary.json_schema:\n          {{ toyaml(json_schema) | indent(10) }}\n    {% endset %}\n\n    {% do print(\"Please add the following test to your {} configuration for the column {}:\".format(node.resource_type, column_name)) %}\n    {% do print(testyaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_node_by_name", "macro.elementary.get_relation_from_node", "macro.elementary.column_exists_in_relation", "macro.elementary.get_package_database_and_schema", "macro.elementary.generate_json_schema_py_func", "macro.elementary.snowflake__compile_py_code", "macro.elementary.run_python", "macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3039012, "supported_languages": null}, "macro.elementary.generate_json_schema_py_func": {"name": "generate_json_schema_py_func", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_json_schema_test.sql", "original_file_path": "macros/commands/generate_json_schema_test.sql", "unique_id": "macro.elementary.generate_json_schema_py_func", "macro_sql": "{% macro generate_json_schema_py_func(column_name) %}\nimport json\ntry:\n    import genson\nexcept ImportError:\n    genson = None\n\ndef get_column_name_in_df(df, column_name):\n    matching = [col for col in df.columns if col.lower() == column_name.lower()]\n    if len(matching) > 1:\n        # Case matters, switch to case-sensitive match\n        matching = [col for col in df.columns if col == column_name]\n\n    if len(matching) == 0:\n        raise Exception(\"No column with the name: {}\".format(col))\n    return matching[0]\n\ndef func(model_df, ref, session):\n    if genson is None:\n        return \"genson_not_installed\"\n\n    model_df = model_df.toPandas()\n    builder = genson.SchemaBuilder()\n    column_name = get_column_name_in_df(model_df, \"{{ column_name }}\")\n    for val in set(model_df[column_name]):\n        if val == \"\" or val is None:\n            continue\n        try:\n            builder.add_object(json.loads(val))\n        except json.JSONDecodeError:\n            # Not a valid json column, no schema\n            return None\n    return builder.to_schema()\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3044937, "supported_languages": null}, "macro.elementary.generate_schema_baseline_test": {"name": "generate_schema_baseline_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_schema_baseline_test.sql", "original_file_path": "macros/commands/generate_schema_baseline_test.sql", "unique_id": "macro.elementary.generate_schema_baseline_test", "macro_sql": "{% macro generate_schema_baseline_test(name=none, include_sources=True, include_models=False, fail_on_added=False, enforce_types=False) %}\n  {% if name %}\n    {{ generate_schema_baseline_test_for_node(name, fail_on_added=fail_on_added, enforce_types=enforce_types) }}\n  {% else %}\n    {{ generate_schema_baseline_test_for_all_nodes(include_sources=include_sources, include_models=include_models,\n                                                   fail_on_added=fail_on_added, enforce_types=enforce_types) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.generate_schema_baseline_test_for_node", "macro.elementary.generate_schema_baseline_test_for_all_nodes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3093307, "supported_languages": null}, "macro.elementary.generate_schema_baseline_test_for_all_nodes": {"name": "generate_schema_baseline_test_for_all_nodes", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_schema_baseline_test.sql", "original_file_path": "macros/commands/generate_schema_baseline_test.sql", "unique_id": "macro.elementary.generate_schema_baseline_test_for_all_nodes", "macro_sql": "{% macro generate_schema_baseline_test_for_all_nodes(include_sources=True, include_models=False, fail_on_added=False, enforce_types=False) %}\n  {% set nodes = elementary.get_nodes_from_graph() %}\n  {% for node in nodes %}\n    {% if node.package_name != 'elementary' and\n          ((include_sources and node.resource_type == 'source') or\n           (include_models and node.resource_type == 'model')) %}\n      {% do print(\"Generating schema changes from baseline test for {} '{}':\".format(node.resource_type, node.name)) %}\n      {{ generate_schema_baseline_test_for_node(node, fail_on_added=fail_on_added, enforce_types=enforce_types) }}\n      {% do print('----------------------------------') %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_nodes_from_graph", "macro.elementary.generate_schema_baseline_test_for_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3117032, "supported_languages": null}, "macro.elementary.generate_schema_baseline_test_for_node": {"name": "generate_schema_baseline_test_for_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_schema_baseline_test.sql", "original_file_path": "macros/commands/generate_schema_baseline_test.sql", "unique_id": "macro.elementary.generate_schema_baseline_test_for_node", "macro_sql": "{% macro generate_schema_baseline_test_for_node(node, fail_on_added=False, enforce_types=False) %}\n  {% if node is string %}\n    {% set node_name = node %}\n    {% set node = elementary.get_node_by_name(node_name) %}\n\n    {% if not node %}\n      {% do print(\"Could not find any model or source by the name '{}'!\".format(node_name)) %}\n      {% do return(none) %}\n    {% endif %}\n  {% endif %}\n\n  {% if node.resource_type not in [\"source\", \"model\"] %}\n    {% do print(\"Only sources and models are supported for this macro, supplied node type: '{}'\".format(node.resource_type)) %}\n    {% do return(none) %}\n  {% endif %}\n\n  {% set node_relation = get_relation_from_node(node) %}\n  {% if not node_relation %}\n    {% do print(\"Table not found in the DB! Cannot create schema test.\") %}\n    {% do return(none) %}\n  {% endif %}\n\n  {% set columns = adapter.get_columns_in_relation(node_relation) %}\n\n  {% set test_params = {} %}\n  {% if fail_on_added %}\n    {% do test_params.update({\"fail_on_added\": \"true\"}) %}\n  {% endif %}\n  {% if enforce_types %}\n    {% do test_params.update({\"enforce_types\": \"true\"}) %}\n  {% endif %}\n\n  {# Common yaml for sources and models #}\n  {% set common_yaml %}\n  - name: {{ node.name }}\n    columns:\n    {%- for column in columns %}\n      - name: {{ column.name }}\n        data_type: {{ column.dtype }}\n    {% endfor %}\n    tests:\n      - elementary.schema_changes_from_baseline\n      {%- if test_params %}:\n        {%- for param, param_val in test_params.items() %}\n          {{param}}: {{param_val}}\n        {%- endfor -%}\n      {% endif -%}\n  {% endset %}\n\n  {% set full_yaml %}\n  {%- if node.resource_type == 'source' %}\nsources:\n  - name: {{ node.source_name }}\n    tables:\n      {{- common_yaml }}\n  {% else %}\nmodels:\n  {{- common_yaml }}\n  {% endif -%}\n  {% endset %}\n\n  {% do print(full_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_node_by_name", "macro.elementary.get_relation_from_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.318071, "supported_languages": null}, "macro.elementary.anomaly_detection_description": {"name": "anomaly_detection_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.anomaly_detection_description", "macro_sql": "{% macro anomaly_detection_description() %}\n    case\n        when dimension is not null then {{ elementary.dimension_metric_description() }}\n        when metric_name = 'freshness' then {{ elementary.freshness_description() }}\n        when column_name is null then {{ elementary.table_metric_description() }}\n        when column_name is not null then {{ elementary.column_metric_description() }}\n        else null\n    end as anomaly_description\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.dimension_metric_description", "macro.elementary.freshness_description", "macro.elementary.table_metric_description", "macro.elementary.column_metric_description"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3202624, "supported_languages": null}, "macro.elementary.freshness_description": {"name": "freshness_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.freshness_description", "macro_sql": "{% macro freshness_description() %}\n    'Last update was at ' || anomalous_value || ', ' || abs(round({{ elementary.edr_cast_as_numeric('metric_value/3600') }}, 2)) || ' hours ago. Usually the table is updated within ' || abs(round({{ elementary.edr_cast_as_numeric('training_avg/3600') }}, 2)) || ' hours.'\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3209443, "supported_languages": null}, "macro.elementary.table_metric_description": {"name": "table_metric_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.table_metric_description", "macro_sql": "{% macro table_metric_description() %}\n    'The last ' || metric_name || ' value is ' || round({{ elementary.edr_cast_as_numeric('metric_value') }}, 3) ||\n    '. The average for this metric is ' || round({{ elementary.edr_cast_as_numeric('training_avg') }}, 3) || '.'\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.32158, "supported_languages": null}, "macro.elementary.column_metric_description": {"name": "column_metric_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.column_metric_description", "macro_sql": "{% macro column_metric_description() %}\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || round({{ elementary.edr_cast_as_numeric('metric_value') }}, 3) ||\n    '. The average for this metric is ' || round({{ elementary.edr_cast_as_numeric('training_avg') }}, 3) || '.'\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.322238, "supported_languages": null}, "macro.elementary.dimension_metric_description": {"name": "dimension_metric_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.dimension_metric_description", "macro_sql": "{% macro dimension_metric_description() %}\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || round({{ elementary.edr_cast_as_numeric('metric_value') }}, 3) ||\n    '. The average for this metric is ' || round({{ elementary.edr_cast_as_numeric('training_avg') }}, 3) || '.'\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.322884, "supported_languages": null}, "macro.elementary.dbt_model_run_result_description": {"name": "dbt_model_run_result_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/dbt_run_results_description.sql", "original_file_path": "macros/edr/alerts/dbt_run_results_description.sql", "unique_id": "macro.elementary.dbt_model_run_result_description", "macro_sql": "{% macro dbt_model_run_result_description() %}\n    'The model ' || name || ' returned ' || status || ' at ' || generated_at || ' on run ' || invocation_id\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3233068, "supported_languages": null}, "macro.elementary.construct_metric_properties_dict": {"name": "construct_metric_properties_dict", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/anomaly_detection/construct_metric_properties_dict.sql", "original_file_path": "macros/edr/data_monitoring/anomaly_detection/construct_metric_properties_dict.sql", "unique_id": "macro.elementary.construct_metric_properties_dict", "macro_sql": "{% macro construct_metric_properties_dict(timestamp_column,\n                                          where_expression,\n                                          time_bucket,\n                                          freshness_column=none,\n                                          event_timestamp_column=none,\n                                          dimensions=none) %}\n  {# each one of the params will go into the returned dictionary, unless \"Undefined\" which would be converted to \"None\" #}\n  {%set d = {'timestamp_column': ( timestamp_column if timestamp_column else None ) ,\n             'where_expression': ( where_expression if where_expression else None ) ,\n             'time_bucket':      ( time_bucket if time_bucket else None )           ,\n             'freshness_column': (freshness_column if freshness_column else None  ) ,\n             'event_timestamp_column':(event_timestamp_column if event_timestamp_column else None ),\n             'dimensions':(dimensions if dimensions else None )\n              } %}\n  {% do return(d) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.32571, "supported_languages": null}, "macro.elementary.get_anomaly_scores_query": {"name": "get_anomaly_scores_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/anomaly_detection/get_anomaly_scores_query.sql", "original_file_path": "macros/edr/data_monitoring/anomaly_detection/get_anomaly_scores_query.sql", "unique_id": "macro.elementary.get_anomaly_scores_query", "macro_sql": "{% macro get_anomaly_scores_query(test_metrics_table_relation, model_graph_node, sensitivity, backfill_days, days_back, monitors, column_name = none, columns_only = false, dimensions = none, metric_properties = none, data_monitoring_metrics_table=none, seasonality=none, anomaly_direction='both') %}\n    {%- set anomaly_direction = anomaly_direction | lower %}\n    {%- set full_table_name = elementary.model_node_to_full_name(model_graph_node) %}\n    {%- set test_execution_id = elementary.get_test_execution_id() %}\n    {%- set test_unique_id = elementary.get_test_unique_id() %}\n    {% if not data_monitoring_metrics_table %}\n        {#  data_monitoring_metrics_table is none except for integration-tests that test the get_anomaly_scores_query macro,\n          and in which case it holds mock history metrics #}\n          {% set data_monitoring_metrics_table = ref('data_monitoring_metrics') %}\n    {% endif %}\n\n\n    {% if elementary.is_incremental_model(model_graph_node) %}\n      {% set latest_full_refresh = elementary.get_latest_full_refresh(model_graph_node) %}\n    {% else %}\n      {% set latest_full_refresh = none %}\n    {% endif %}\n\n    {%- if seasonality and seasonality == 'day_of_week' %}\n        {% set bucket_seasonality_expr = elementary.edr_day_of_week_expression('bucket_end') %}\n    {% else %}\n        {% set bucket_seasonality_expr = elementary.const_as_text('no_seasonality') %}\n    {% endif %}\n    {%- set min_bucket_start_expr = elementary.get_trunc_min_bucket_start_expr(metric_properties, days_back) %}\n\n    {% set anomaly_scores_query %}\n\n        with data_monitoring_metrics as (\n\n            select * from {{ data_monitoring_metrics_table }}\n            {# We use bucket_end because non-timestamp tests have only bucket_end field. #}\n            where\n                bucket_end > {{ min_bucket_start_expr }}\n                and metric_properties = {{ elementary.dict_to_quoted_json(metric_properties) }}\n                {% if latest_full_refresh %}\n                    and updated_at > {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(latest_full_refresh)) }}\n                {% endif %}\n                and upper(full_table_name) = upper('{{ full_table_name }}')\n                and metric_name in {{ elementary.strings_list_to_tuple(monitors) }}\n                {%- if column_name %}\n                    and upper(column_name) = upper('{{ column_name }}')\n                {%- endif %}\n                {%- if columns_only %}\n                    and column_name is not null\n                {%- endif %}\n                {% if dimensions %}\n                    and dimension = {{ elementary.edr_quote(elementary.join_list(dimensions, '; ')) }}\n                {% endif %}\n        ),\n\n        union_metrics as (\n\n            select * from data_monitoring_metrics\n            union all\n            select * from {{ test_metrics_table_relation }}\n\n        ),\n\n        grouped_metrics_duplicates as (\n\n            select\n                id,\n                full_table_name,\n                column_name,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_duration_hours,\n                updated_at,\n                dimension,\n                dimension_value,\n                row_number() over (partition by id order by updated_at desc) as row_number\n            from union_metrics\n\n        ),\n\n        grouped_metrics as (\n\n            select\n                id as metric_id,\n                full_table_name,\n                column_name,\n                dimension,\n                dimension_value,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                {{ bucket_seasonality_expr }} as bucket_seasonality,\n                bucket_duration_hours,\n                updated_at\n            from grouped_metrics_duplicates\n            where row_number = 1\n\n        ),\n\n        time_window_aggregation as (\n\n            select\n                metric_id,\n                full_table_name,\n                column_name,\n                dimension,\n                dimension_value,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_seasonality,\n                bucket_duration_hours,\n                updated_at,\n                avg(metric_value) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value, bucket_seasonality order by bucket_end asc rows between unbounded preceding and current row) as training_avg,\n                stddev(metric_value) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value, bucket_seasonality order by bucket_end asc rows between unbounded preceding and current row) as training_stddev,\n                count(metric_value) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value, bucket_seasonality order by bucket_end asc rows between unbounded preceding and current row) as training_set_size,\n                last_value(bucket_end) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value, bucket_seasonality order by bucket_end asc rows between unbounded preceding and current row) training_end,\n                first_value(bucket_end) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value, bucket_seasonality order by bucket_end asc rows between unbounded preceding and current row) as training_start\n            from grouped_metrics\n            {{ dbt_utils.group_by(13) }}\n        ),\n\n        anomaly_scores as (\n\n            select\n                {{ elementary.generate_surrogate_key([\n                 'metric_id',\n                 elementary.const_as_string(test_execution_id)\n                ]) }} as id,\n                metric_id,\n                {{ elementary.const_as_string(test_execution_id) }} as test_execution_id,\n                {{ elementary.const_as_string(test_unique_id) }} as test_unique_id,\n                {{ elementary.current_timestamp_column() }} as detected_at,\n                full_table_name,\n                column_name,\n                metric_name,\n                case\n                    when training_stddev is null then null\n                    when training_stddev = 0 then 0\n                    else (metric_value - training_avg) / (training_stddev)\n                end as anomaly_score,\n                {{ sensitivity }} as anomaly_score_threshold,\n                source_value as anomalous_value,\n                bucket_start,\n                bucket_end,\n                bucket_seasonality,\n                metric_value,\n                case\n                    when training_stddev is null then null\n                    else (-1) * {{ sensitivity }} * training_stddev + training_avg\n                end as min_metric_value,\n                case \n                    when training_stddev is null then null\n                    else {{ sensitivity }} * training_stddev + training_avg\n                end as max_metric_value,\n                training_avg,\n                training_stddev,\n                training_set_size,\n                training_start,\n                training_end,\n                dimension,\n                dimension_value\n            from time_window_aggregation\n            where\n                metric_value is not null\n                and training_avg is not null\n        )\n\n        select * from anomaly_scores\n\n    {% endset %}\n    {{ return(anomaly_scores_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.model_node_to_full_name", "macro.elementary.get_test_execution_id", "macro.elementary.get_test_unique_id", "macro.elementary.is_incremental_model", "macro.elementary.get_latest_full_refresh", "macro.elementary.edr_day_of_week_expression", "macro.elementary.const_as_text", "macro.elementary.get_trunc_min_bucket_start_expr", "macro.elementary.dict_to_quoted_json", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.strings_list_to_tuple", "macro.elementary.join_list", "macro.dbt_utils.group_by", "macro.elementary.generate_surrogate_key", "macro.elementary.const_as_string", "macro.elementary.current_timestamp_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3424256, "supported_languages": null}, "macro.elementary.get_trunc_min_bucket_start_expr": {"name": "get_trunc_min_bucket_start_expr", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_trunc_min_bucket_start_expr", "macro_sql": "{% macro get_trunc_min_bucket_start_expr(metric_properties, days_back) %}\n    {%- set untruncated_min = (elementary.get_run_started_at() - modules.datetime.timedelta(days_back | int)).strftime(\"%Y-%m-%d 00:00:00\") %}\n    {%- set trunc_min_bucket_start_expr = elementary.edr_date_trunc(metric_properties.time_bucket.period, elementary.edr_cast_as_timestamp(elementary.edr_quote(untruncated_min)))%}\n    {{ return(trunc_min_bucket_start_expr) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_run_started_at", "macro.elementary.edr_date_trunc", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3493984, "supported_languages": null}, "macro.elementary.get_backfill_bucket_start": {"name": "get_backfill_bucket_start", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_backfill_bucket_start", "macro_sql": "{% macro get_backfill_bucket_start(backfill_days, metric_properties) %}\n    {% do return((elementary.get_run_started_at() - modules.datetime.timedelta(backfill_days)).strftime(\"%Y-%m-%d 00:00:00\")) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_run_started_at"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3504434, "supported_languages": null}, "macro.elementary.get_test_buckets_min_and_max": {"name": "get_test_buckets_min_and_max", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_test_buckets_min_and_max", "macro_sql": "{% macro get_test_buckets_min_and_max(model_relation, backfill_days, days_back, monitors=none, column_name=none, metric_properties=none, unit_test=false, unit_test_relation=none) %}\n\n    {%- set run_start_expr = elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.run_started_at_as_string())) %}\n    {%- set trunc_min_bucket_start_expr = elementary.get_trunc_min_bucket_start_expr(metric_properties, days_back) %}\n    {%- set backfill_bucket_start = elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_backfill_bucket_start(backfill_days))) %}\n    {%- set full_table_name = elementary.relation_to_full_name(model_relation) %}\n\n    {%- if monitors %}\n        {%- set monitors_tuple = elementary.strings_list_to_tuple(monitors) %}\n    {%- endif %}\n\n    {%- if unit_test %}\n        {%- set monitors_runs_relation = dbt.load_relation(unit_test_relation) %}\n    {%- else %}\n        {%- set monitors_runs_relation = ref('monitors_runs') %}\n    {%- endif %}\n\n    {%- set regular_bucket_times_query %}\n        with bucket_times as (\n            select\n            {{ trunc_min_bucket_start_expr }} as days_back_start\n           , {{ run_start_expr }} as run_started\n        ),\n        full_buckets_calc as (\n            select *,\n                floor({{ elementary.edr_datediff('days_back_start', 'run_started', metric_properties.time_bucket.period) }} / {{ metric_properties.time_bucket.count }}) * {{ metric_properties.time_bucket.count }} as periods_until_max\n            from bucket_times\n        )\n        select\n             days_back_start as min_bucket_start,\n             {{ elementary.edr_timeadd(metric_properties.time_bucket.period, 'periods_until_max', 'days_back_start') }} {# Add full buckets to last_max_bucket_end #}\n        as max_bucket_end\n        from full_buckets_calc\n    {%- endset %}\n\n    {%- set incremental_bucket_times_query %}\n        with bucket_times as (\n            select min(last_bucket_end) as last_max_bucket_end,\n                   min(first_bucket_end) as last_min_bucket_end,\n                   {{ trunc_min_bucket_start_expr }} as days_back_start,\n                   {{ backfill_bucket_start }} as backfill_start,\n                   {{ run_start_expr }} as run_started\n            from {{ monitors_runs_relation }}\n            where upper(full_table_name) = upper('{{ full_table_name }}')\n              and metric_properties = {{ elementary.dict_to_quoted_json(metric_properties) }}\n            {%- if monitors %}\n                and metric_name in {{ monitors_tuple }}\n            {%- endif %}\n            {%- if column_name %}\n                and upper(column_name) = upper('{{ column_name }}')\n            {%- endif %}\n            ),\n        full_buckets_calc as (\n            select *,\n                {# How many periods we need to reduce from last_max_bucket_end to backfill full time buckets #}\n                case\n                    when last_max_bucket_end is not null\n                    then least(ceil({{ elementary.edr_datediff('last_max_bucket_end', 'backfill_start', metric_properties.time_bucket.period) }} / {{ metric_properties.time_bucket.count }}), -1) * {{ metric_properties.time_bucket.count }}\n                    else 0\n                end as periods_to_backfill,\n                {# How many periods we need to add to last run time to get only full time buckets #}\n                case\n                    when last_max_bucket_end is not null and last_max_bucket_end > days_back_start and last_min_bucket_end < days_back_start\n                    then floor({{ elementary.edr_datediff('last_max_bucket_end', 'run_started', metric_properties.time_bucket.period) }} / {{ metric_properties.time_bucket.count }}) * {{ metric_properties.time_bucket.count }}\n                    else floor({{ elementary.edr_datediff('days_back_start', 'run_started', metric_properties.time_bucket.period) }} / {{ metric_properties.time_bucket.count }}) * {{ metric_properties.time_bucket.count }}\n                end as periods_until_max\n            from bucket_times\n        )\n        select\n            case\n                {# This prevents gaps in buckets for the metric #}\n                when last_max_bucket_end is null then days_back_start {# When this is the first run of this metric #}\n                when last_max_bucket_end < days_back_start then days_back_start {# When the metric was not collected for a period longer than days_back #}\n                when last_min_bucket_end > days_back_start then days_back_start {# When the metric was collected recently, but for a period that is smaller than days_back #}\n                when last_max_bucket_end < backfill_start then last_max_bucket_end {# When the metric was not collected for a period longer than backfill_days #}\n                else {{ elementary.edr_cast_as_timestamp(elementary.edr_timeadd(metric_properties.time_bucket.period, 'periods_to_backfill', 'last_max_bucket_end')) }} {# When backfill reduce full time buckets from last_max_bucket_end to backfill #}\n            end as min_bucket_start,\n            case\n                {# This makes sure we collect only full bucket #}\n                when last_max_bucket_end is null or last_max_bucket_end < days_back_start or last_min_bucket_end > days_back_start\n                then {{ elementary.edr_cast_as_timestamp(elementary.edr_timeadd(metric_properties.time_bucket.period, 'periods_until_max', 'days_back_start')) }} {# Add full buckets to days_back_start #}\n                else {{ elementary.edr_cast_as_timestamp(elementary.edr_timeadd(metric_properties.time_bucket.period, 'periods_until_max', 'last_max_bucket_end')) }} {# Add full buckets to last_max_bucket_end #}\n            end as max_bucket_end\n        from full_buckets_calc\n    {%- endset %}\n\n    {# We assume we should also cosider sources as incremental #}\n    {% if not (elementary.is_incremental_model(elementary.get_model_graph_node(model), source_included=true) or unit_test) %}\n        {%- set buckets = elementary.agate_to_dicts(run_query(regular_bucket_times_query))[0] %}\n    {%- else %}\n        {%- set buckets = elementary.agate_to_dicts(run_query(incremental_bucket_times_query))[0] %}\n    {% endif %}\n\n    {%- if buckets %}\n        {%- set min_bucket_start = elementary.edr_quote(buckets.get('min_bucket_start')) %}\n        {%- set max_bucket_end = elementary.edr_quote(buckets.get('max_bucket_end')) %}\n        {{ return([min_bucket_start, max_bucket_end]) }}\n    {%- else %}\n        {{ exceptions.raise_compiler_error(\"Failed to calc test buckets min and max\") }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.run_started_at_as_string", "macro.elementary.get_trunc_min_bucket_start_expr", "macro.elementary.get_backfill_bucket_start", "macro.elementary.relation_to_full_name", "macro.elementary.strings_list_to_tuple", "macro.dbt.load_relation", "macro.elementary.edr_datediff", "macro.elementary.edr_timeadd", "macro.elementary.dict_to_quoted_json", "macro.elementary.is_incremental_model", "macro.elementary.get_model_graph_node", "macro.elementary.agate_to_dicts", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.36121, "supported_languages": null}, "macro.elementary.get_column_obj_and_monitors": {"name": "get_column_obj_and_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.get_column_obj_and_monitors", "macro_sql": "{% macro get_column_obj_and_monitors(model_relation, column_name, column_tests=none) %}\n\n    {% set column_obj_and_monitors = [] %}\n    {% set column_objects = adapter.get_columns_in_relation(model_relation) %}\n    {% for column_obj in column_objects %}\n        {% if column_obj.name | lower == column_name | lower %}\n            {% set column_monitors = elementary.column_monitors_by_type(column_obj.dtype, column_tests) %}\n            {% set column_item = {'column': column_obj, 'monitors': column_monitors} %}\n            {{ return(column_item) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.column_monitors_by_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3673222, "supported_languages": null}, "macro.elementary.get_all_column_obj_and_monitors": {"name": "get_all_column_obj_and_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.get_all_column_obj_and_monitors", "macro_sql": "{% macro get_all_column_obj_and_monitors(model_relation, column_tests=none) %}\n\n    {% set column_obj_and_monitors = [] %}\n    {% set column_objects = adapter.get_columns_in_relation(model_relation) %}\n\n    {% for column_obj in column_objects %}\n        {% set column_monitors = elementary.column_monitors_by_type(column_obj.dtype, column_tests) %}\n        {% set column_item = {'column': column_obj, 'monitors': column_monitors} %}\n        {% do column_obj_and_monitors.append(column_item) %}\n    {% endfor %}\n\n    {{ return(column_obj_and_monitors) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.column_monitors_by_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3693292, "supported_languages": null}, "macro.elementary.column_monitors_by_type": {"name": "column_monitors_by_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.column_monitors_by_type", "macro_sql": "{% macro column_monitors_by_type(data_type, column_tests=none) %}\n    {% set normalized_data_type = elementary.normalize_data_type(data_type) %}\n    {% set monitors = [] %}\n    {% set chosen_monitors = column_tests or elementary.get_agg_column_monitors(only_defaults=true) %}\n    {% set available_monitors = elementary.get_available_monitors() %}\n\n    {% set any_type_monitors = elementary.lists_intersection(chosen_monitors, available_monitors[\"column_any_type\"]) %}\n    {% do monitors.extend(any_type_monitors) %}\n    {% if normalized_data_type == 'numeric' %}\n        {% set numeric_monitors = elementary.lists_intersection(chosen_monitors, available_monitors[\"column_numeric\"]) %}\n        {% do monitors.extend(numeric_monitors) %}\n    {% elif normalized_data_type == 'string' %}\n        {% set string_monitors = elementary.lists_intersection(chosen_monitors, available_monitors[\"column_string\"]) %}\n        {% do monitors.extend(string_monitors) %}\n    {% endif %}\n    {{ return(monitors | unique | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.normalize_data_type", "macro.elementary.get_agg_column_monitors", "macro.elementary.get_available_monitors", "macro.elementary.lists_intersection"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3727632, "supported_languages": null}, "macro.elementary.get_agg_column_monitors": {"name": "get_agg_column_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.get_agg_column_monitors", "macro_sql": "{% macro get_agg_column_monitors(only_defaults=false) %}\n    {% set agg_column_monitors = [] %}\n    {% if only_defaults %}\n        {% set monitors = elementary.get_default_monitors() %}\n    {% else %}\n        {% set monitors = elementary.get_available_monitors() %}\n    {% endif %}\n    {% do agg_column_monitors.extend(monitors['column_any_type']) %}\n    {% do agg_column_monitors.extend(monitors['column_string']) %}\n    {% do agg_column_monitors.extend(monitors['column_numeric']) %}\n    {{ return(agg_column_monitors) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_default_monitors", "macro.elementary.get_available_monitors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3748033, "supported_languages": null}, "macro.elementary.get_is_column_timestamp": {"name": "get_is_column_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_is_column_timestamp.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_is_column_timestamp.sql", "unique_id": "macro.elementary.get_is_column_timestamp", "macro_sql": "{% macro get_is_column_timestamp(table_relation,timestamp_column,timestamp_column_data_type) %}\n    {%- if timestamp_column_data_type == 'string' %}\n        {%- set is_timestamp = elementary.try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {%- elif timestamp_column_data_type == 'timestamp' %}\n        {%- set is_timestamp = true %}\n    {%- else %}\n        {%- set is_timestamp = false %}\n    {%- endif %}\n    {{ return(is_timestamp) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.try_cast_column_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3765655, "supported_languages": null}, "macro.elementary.get_final_table_monitors": {"name": "get_final_table_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "unique_id": "macro.elementary.get_final_table_monitors", "macro_sql": "{% macro get_final_table_monitors(table_anomalies) %}\n    {%- set final_table_monitors = [] %}\n\n    {%- if table_anomalies and table_anomalies | length > 0 %}\n        {%- set allowed_table_monitors = elementary.get_allowed_table_monitors() %}\n        {%- set final_table_monitors = elementary.lists_intersection(table_anomalies, allowed_table_monitors) %}\n    {%- else %}\n        {%- set final_table_monitors = elementary.get_default_table_monitors() %}\n    {%- endif %}\n    {{ return(final_table_monitors) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_allowed_table_monitors", "macro.elementary.lists_intersection", "macro.elementary.get_default_table_monitors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3787575, "supported_languages": null}, "macro.elementary.get_default_table_monitors": {"name": "get_default_table_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "unique_id": "macro.elementary.get_default_table_monitors", "macro_sql": "{% macro get_default_table_monitors() %}\n    {%- set default_table_monitors = elementary.get_config_var('edr_monitors')['table'] | list %}\n    {{ return(default_table_monitors) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.379541, "supported_languages": null}, "macro.elementary.get_allowed_table_monitors": {"name": "get_allowed_table_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "unique_id": "macro.elementary.get_allowed_table_monitors", "macro_sql": "{% macro get_allowed_table_monitors() %}\n    {% do return([\"row_count\", \"freshness\", \"event_freshness\"]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3801482, "supported_languages": null}, "macro.elementary.is_incremental_model": {"name": "is_incremental_model", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/is_incremental_model.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/is_incremental_model.sql", "unique_id": "macro.elementary.is_incremental_model", "macro_sql": "{% macro is_incremental_model(model_node, source_included=false) %}\n  {% do return(\n    (source_included and model_node.resource_type == \"source\")\n    or\n    (model_node.resource_type == \"model\" and model_node.config.materialized == \"incremental\")\n  ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3813572, "supported_languages": null}, "macro.elementary.get_daily_time_bucket": {"name": "get_daily_time_bucket", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "unique_id": "macro.elementary.get_daily_time_bucket", "macro_sql": "{% macro get_daily_time_bucket() %}\n  {% do return({\"period\": \"day\", \"count\": 1}) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.382242, "supported_languages": null}, "macro.elementary.get_default_time_bucket": {"name": "get_default_time_bucket", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "unique_id": "macro.elementary.get_default_time_bucket", "macro_sql": "{% macro get_default_time_bucket() %}\n  {% do return(elementary.get_daily_time_bucket()) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_daily_time_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3827775, "supported_languages": null}, "macro.elementary.null_count": {"name": "null_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "unique_id": "macro.elementary.null_count", "macro_sql": "{% macro null_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 else 0 end), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.383397, "supported_languages": null}, "macro.elementary.null_percent": {"name": "null_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "unique_id": "macro.elementary.null_percent", "macro_sql": "{% macro null_percent(column_name) %}\n    {{ elementary.edr_percent(elementary.null_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_percent", "macro.elementary.null_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.38406, "supported_languages": null}, "macro.elementary.max": {"name": "max", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.max", "macro_sql": "{% macro max(column_name) -%}\n    max(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3859594, "supported_languages": null}, "macro.elementary.min": {"name": "min", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.min", "macro_sql": "{% macro min(column_name) -%}\n    min(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3865132, "supported_languages": null}, "macro.elementary.average": {"name": "average", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.average", "macro_sql": "{% macro average(column_name) -%}\n    avg(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3870401, "supported_languages": null}, "macro.elementary.zero_count": {"name": "zero_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.zero_count", "macro_sql": "{% macro zero_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 when cast({{ column_name }} as {{ elementary.edr_type_float() }}) = 0 then 1 else 0 end), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.387634, "supported_languages": null}, "macro.elementary.zero_percent": {"name": "zero_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.zero_percent", "macro_sql": "{% macro zero_percent(column_name) %}\n    {{ elementary.edr_percent(elementary.zero_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_percent", "macro.elementary.zero_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3882933, "supported_languages": null}, "macro.elementary.standard_deviation": {"name": "standard_deviation", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.standard_deviation", "macro_sql": "{% macro standard_deviation(column_name) -%}\n    stddev(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3888586, "supported_languages": null}, "macro.elementary.variance": {"name": "variance", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.variance", "macro_sql": "{% macro variance(column_name) -%}\n    variance(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3893833, "supported_languages": null}, "macro.elementary.sum": {"name": "sum", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.sum", "macro_sql": "{% macro sum(column_name) -%}\n    sum(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3899117, "supported_languages": null}, "macro.elementary.max_length": {"name": "max_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.max_length", "macro_sql": "{% macro max_length(column_name) -%}\n    max(length({{ column_name }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3909254, "supported_languages": null}, "macro.elementary.min_length": {"name": "min_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.min_length", "macro_sql": "{% macro min_length(column_name) -%}\n    min(length({{ column_name }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.391537, "supported_languages": null}, "macro.elementary.average_length": {"name": "average_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.average_length", "macro_sql": "{% macro average_length(column_name) -%}\n    avg(length({{ column_name }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3919275, "supported_languages": null}, "macro.elementary.missing_count": {"name": "missing_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.missing_count", "macro_sql": "{% macro missing_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 when trim({{ column_name }}, ' ') = '' then 1 when lower({{ column_name }}) = 'null' then 1 else 0 end), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3924477, "supported_languages": null}, "macro.elementary.missing_percent": {"name": "missing_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.missing_percent", "macro_sql": "{% macro missing_percent(column_name) %}\n    {{ elementary.edr_percent(elementary.missing_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_percent", "macro.elementary.missing_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.393145, "supported_languages": null}, "macro.elementary.get_available_monitors": {"name": "get_available_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/monitors.sql", "unique_id": "macro.elementary.get_available_monitors", "macro_sql": "{% macro get_available_monitors() %}\n    {% do return({\n      'table': ['row_count', 'freshness'],\n      'column_any_type': ['null_count', 'null_percent'],\n      'column_string': ['min_length', 'max_length', 'average_length', 'missing_count', 'missing_percent'],\n      'column_numeric': ['min', 'max', 'zero_count', 'zero_percent', 'average', 'standard_deviation', 'variance', 'sum']\n    }) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3952668, "supported_languages": null}, "macro.elementary.get_default_monitors": {"name": "get_default_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/monitors.sql", "unique_id": "macro.elementary.get_default_monitors", "macro_sql": "{% macro get_default_monitors() %}\n    {% do return({\n      'table': ['row_count', 'freshness'],\n      'column_any_type': ['null_count', 'null_percent'],\n      'column_string': ['min_length', 'max_length', 'average_length', 'missing_count', 'missing_percent'],\n      'column_numeric': ['min', 'max', 'zero_count', 'zero_percent', 'average', 'standard_deviation', 'variance']\n    }) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3967586, "supported_languages": null}, "macro.elementary.row_count": {"name": "row_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/table_monitors.sql", "unique_id": "macro.elementary.row_count", "macro_sql": "{% macro row_count() -%}\n    count(*)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.3971674, "supported_languages": null}, "macro.elementary.column_monitoring_query": {"name": "column_monitoring_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/column_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/column_monitoring_query.sql", "unique_id": "macro.elementary.column_monitoring_query", "macro_sql": "{% macro column_monitoring_query(monitored_table_relation, min_bucket_start, max_bucket_end, days_back, column_obj, column_monitors, metric_properties) %}\n    {%- set full_table_name_str = elementary.edr_quote(elementary.relation_to_full_name(monitored_table_relation)) %}\n    {%- set timestamp_column = metric_properties.timestamp_column %}\n\n\n    with monitored_table as (\n        select * from {{ monitored_table_relation }}\n            {% if metric_properties.where_expression %} where {{ metric_properties.where_expression }} {% endif %}\n    ),\n\n    {% if timestamp_column -%}\n         buckets as (\n             select edr_bucket_start, edr_bucket_end\n             from ({{ elementary.complete_buckets_cte(metric_properties, min_bucket_start, max_bucket_end) }}) results\n             where edr_bucket_start >= {{ elementary.edr_cast_as_timestamp(min_bucket_start) }}\n               and edr_bucket_end <= {{ elementary.edr_cast_as_timestamp(max_bucket_end) }}\n         ),\n\n         filtered_monitored_table as (\n            select {{ column_obj.quoted }},\n                   {{ elementary.get_start_bucket_in_data(timestamp_column, min_bucket_start, metric_properties.time_bucket) }} as start_bucket_in_data\n            from monitored_table\n            where\n                {{ elementary.edr_cast_as_timestamp(timestamp_column) }} >= (select min(edr_bucket_start) from buckets)\n                and {{ elementary.edr_cast_as_timestamp(timestamp_column) }} < (select max(edr_bucket_end) from buckets)\n        ),\n    {%- else %}\n        filtered_monitored_table as (\n            select {{ column_obj.quoted }},\n                   {{ elementary.null_timestamp() }} as start_bucket_in_data\n            from {{ monitored_table_relation }}\n        ),\n    {% endif %}\n\n    column_monitors as (\n\n        {%- if column_monitors %}\n            {%- set column = column_obj.quoted -%}\n                select\n                    {%- if timestamp_column %}\n                        edr_bucket_start as bucket_start,\n                        edr_bucket_end as bucket_end,\n                        {{ elementary.timediff(\"hour\", \"edr_bucket_start\", \"edr_bucket_end\") }} as bucket_duration_hours,\n                    {%- else %}\n                        {{ elementary.null_timestamp() }} as bucket_start,\n                        {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.run_started_at_as_string())) }} as bucket_end,\n                        {{ elementary.null_int() }} as bucket_duration_hours,\n                    {%- endif %}\n                    {{ elementary.const_as_string(column_obj.name) }} as edr_column_name,\n                    {%- if 'null_count' in column_monitors -%} {{ elementary.null_count(column) }} {%- else -%} null {% endif %} as null_count,\n                    {%- if 'null_percent' in column_monitors -%} {{ elementary.null_percent(column) }} {%- else -%} null {% endif %} as null_percent,\n                    {%- if 'max' in column_monitors -%} {{ elementary.max(column) }} {%- else -%} null {% endif %} as max,\n                    {%- if 'min' in column_monitors -%} {{ elementary.min(column) }} {%- else -%} null {% endif %} as min,\n                    {%- if 'average' in column_monitors -%} {{ elementary.average(column) }} {%- else -%} null {% endif %} as average,\n                    {%- if 'zero_count' in column_monitors -%} {{ elementary.zero_count(column) }} {%- else -%} null {% endif %} as zero_count,\n                    {%- if 'zero_percent' in column_monitors -%} {{ elementary.zero_percent(column) }} {%- else -%} null {% endif %} as zero_percent,\n                    {%- if 'standard_deviation' in column_monitors -%} {{ elementary.standard_deviation(column) }} {%- else -%} null {% endif %} as standard_deviation,\n                    {%- if 'variance' in column_monitors -%} {{ elementary.variance(column) }} {%- else -%} null {% endif %} as variance,\n                    {%- if 'max_length' in column_monitors -%} {{ elementary.max_length(column) }} {%- else -%} null {% endif %} as max_length,\n                    {%- if 'min_length' in column_monitors -%} {{ elementary.min_length(column) }} {%- else -%} null {% endif %} as min_length,\n                    {%- if 'average_length' in column_monitors -%} {{ elementary.average_length(column) }} {%- else -%} null {% endif %} as average_length,\n                    {%- if 'missing_count' in column_monitors -%} {{ elementary.missing_count(column) }} {%- else -%} null {% endif %} as missing_count,\n                    {%- if 'missing_percent' in column_monitors -%} {{ elementary.missing_percent(column) }} {%- else -%} null {% endif %} as missing_percent,\n                    {%- if 'sum' in column_monitors -%} {{ elementary.sum(column) }} {%- else -%} null {% endif %} as sum\n                from filtered_monitored_table\n                {%- if timestamp_column %}\n                    left join buckets on (edr_bucket_start = start_bucket_in_data)\n                {%- endif %}\n                group by 1,2,3,4\n        {%- else %}\n            {{ elementary.empty_column_monitors_cte() }}\n        {%- endif %}\n\n    ),\n\n    column_monitors_unpivot as (\n\n        {%- if column_monitors %}\n            {% for monitor in column_monitors %}\n                select edr_column_name, bucket_start, bucket_end, bucket_duration_hours, {{ elementary.edr_cast_as_string(elementary.edr_quote(monitor)) }} as metric_name, {{ elementary.edr_cast_as_float(monitor) }} as metric_value from column_monitors where {{ monitor }} is not null\n                {% if not loop.last %} union all {% endif %}\n            {%- endfor %}\n        {%- else %}\n            {{ elementary.empty_table([('edr_column_name','string'),('bucket_start','timestamp'),('bucket_end','timestamp'),('bucket_duration_hours','int'),('metric_name','string'),('metric_value','float')]) }}\n        {%- endif %}\n\n    ),\n\n    metrics_final as (\n\n        select\n            {{ elementary.edr_cast_as_string(full_table_name_str) }} as full_table_name,\n            edr_column_name as column_name,\n            metric_name,\n            {{ elementary.edr_cast_as_float('metric_value') }} as metric_value,\n            {{ elementary.null_string() }} as source_value,\n            bucket_start,\n            bucket_end,\n            bucket_duration_hours,\n            {{ elementary.null_string() }} as dimension,\n            {{ elementary.null_string() }} as dimension_value,\n            {{elementary.dict_to_quoted_json(metric_properties) }} as metric_properties\n        from column_monitors_unpivot\n\n    )\n\n    select\n        {{ elementary.generate_surrogate_key([\n            'full_table_name',\n            'column_name',\n            'metric_name',\n            'bucket_end',\n            'metric_properties'\n        ]) }} as id,\n        full_table_name,\n        column_name,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        {{ elementary.edr_current_timestamp_in_utc() }} as updated_at,\n        dimension,\n        dimension_value,\n        metric_properties\n    from metrics_final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_quote", "macro.elementary.relation_to_full_name", "macro.elementary.complete_buckets_cte", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.get_start_bucket_in_data", "macro.elementary.null_timestamp", "macro.elementary.timediff", "macro.elementary.run_started_at_as_string", "macro.elementary.null_int", "macro.elementary.const_as_string", "macro.elementary.null_count", "macro.elementary.null_percent", "macro.elementary.max", "macro.elementary.min", "macro.elementary.average", "macro.elementary.zero_count", "macro.elementary.zero_percent", "macro.elementary.standard_deviation", "macro.elementary.variance", "macro.elementary.max_length", "macro.elementary.min_length", "macro.elementary.average_length", "macro.elementary.missing_count", "macro.elementary.missing_percent", "macro.elementary.sum", "macro.elementary.empty_column_monitors_cte", "macro.elementary.edr_cast_as_string", "macro.elementary.edr_cast_as_float", "macro.elementary.empty_table", "macro.elementary.null_string", "macro.elementary.dict_to_quoted_json", "macro.elementary.generate_surrogate_key", "macro.elementary.edr_current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.4363723, "supported_languages": null}, "macro.elementary.dimension_monitoring_query": {"name": "dimension_monitoring_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/dimension_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/dimension_monitoring_query.sql", "unique_id": "macro.elementary.dimension_monitoring_query", "macro_sql": "{% macro dimension_monitoring_query(monitored_table_relation, dimensions, min_bucket_start, max_bucket_end, days_back, metric_properties) %}\n    {% set metric_name = 'dimension' %}\n    {% set full_table_name_str = elementary.edr_quote(elementary.relation_to_full_name(monitored_table_relation)) %}\n    {% set dimensions_string = elementary.join_list(dimensions, '; ') %}\n    {% set concat_dimensions_sql_expression = elementary.list_concat_with_separator(dimensions, '; ') %}\n\n    {% set timestamp_column = metric_properties.timestamp_column %}\n\n    {% if timestamp_column %}\n        with buckets as (\n          select\n            edr_bucket_start,\n            edr_bucket_end,\n            1 as joiner\n          from ({{ elementary.complete_buckets_cte(metric_properties, min_bucket_start, max_bucket_end) }}) results\n          where edr_bucket_start >= {{ elementary.edr_cast_as_timestamp(min_bucket_start) }}\n            and edr_bucket_end <= {{ elementary.edr_cast_as_timestamp(max_bucket_end) }}\n        ),\n\n        filtered_monitored_table as (\n            select *,\n                   {{ concat_dimensions_sql_expression }} as dimension_value,\n                   {{ elementary.get_start_bucket_in_data(timestamp_column, min_bucket_start, metric_properties.time_bucket) }} as start_bucket_in_data\n            from {{ monitored_table_relation }}\n            where\n                {{ elementary.edr_cast_as_timestamp(timestamp_column) }} >= (select min(edr_bucket_start) from buckets)\n                and {{ elementary.edr_cast_as_timestamp(timestamp_column) }} < (select max(edr_bucket_end) from buckets)\n            {% if metric_properties.where_expression %}\n                and {{ metric_properties.where_expression }}\n            {% endif %}\n        ),\n\n        {# Outdated dimension values are dimensions with all metrics of 0 in the range of the test time #}\n        dimension_values_without_outdated as (\n            select distinct \n                dimension_value,\n                sum(metric_value)\n            from {{ ref('data_monitoring_metrics') }}\n            where full_table_name = {{ full_table_name_str }}\n                and metric_name = {{ elementary.edr_quote(metric_name) }}\n                and dimension = {{ elementary.edr_quote(dimensions_string) }}\n                and {{ elementary.edr_cast_as_timestamp('bucket_end') }} >= {{ elementary.edr_cast_as_timestamp(min_bucket_start) }}\n            group by 1\n            having sum(metric_value) > 0\n        ),\n\n        dimension_values_union as (\n            select distinct *\n            from (\n                select distinct \n                    dimension_value,\n                    1 as joiner\n                from dimension_values_without_outdated\n                union all\n                select distinct\n                    dimension_value,\n                    1 as joiner\n                from filtered_monitored_table\n            ) results\n        ),\n\n        {# Created buckets for each dimension value #}\n        dimensions_buckets as (\n            select edr_bucket_start, edr_bucket_end, dimension_value\n            from buckets left join dimension_values_union on buckets.joiner = dimension_values_union.joiner\n        ),\n\n        {# Calculating the row count for the value of each dimension #}\n        filtered_row_count_values as (\n            select \n                start_bucket_in_data,\n                {{ concat_dimensions_sql_expression }} as dimension_value, \n                {{ elementary.edr_cast_as_float(elementary.row_count()) }} as row_count_value\n            from filtered_monitored_table\n            {{ dbt_utils.group_by(2) }}\n        ),\n\n        {# Merging between the row count and the dimensions buckets #}\n        {# This way we make sure that if a dimension has no rows in a day, it will get a metric with value 0 #}\n        row_count_values as (\n            select edr_bucket_start,\n                   edr_bucket_end,\n                   start_bucket_in_data,\n                   dimensions_buckets.dimension_value,\n                   case when start_bucket_in_data is null then\n                       0\n                   else row_count_value end as row_count_value\n            from dimensions_buckets left join filtered_row_count_values on (edr_bucket_start = start_bucket_in_data and dimensions_buckets.dimension_value = filtered_row_count_values.dimension_value)\n        ),\n\n        row_count as (\n            select edr_bucket_start,\n                   edr_bucket_end,\n                   {{ elementary.const_as_string(metric_name) }} as metric_name,\n                   {{ elementary.null_string() }} as source_value,\n                   row_count_value as metric_value,\n                   {{ elementary.const_as_string(dimensions_string) }} as dimension,\n                   dimension_value,\n                   {{elementary.dict_to_quoted_json(metric_properties) }} as metric_properties\n            from row_count_values\n        ),\n\n        metrics_final as (\n\n        select\n            {{ elementary.edr_cast_as_string(full_table_name_str) }} as full_table_name,\n            {{ elementary.null_string() }} as column_name,\n            metric_name,\n            {{ elementary.edr_cast_as_float('metric_value') }} as metric_value,\n            source_value,\n            edr_bucket_start as bucket_start,\n            edr_bucket_end as bucket_end,\n            {{ elementary.timediff(\"hour\", \"edr_bucket_start\", \"edr_bucket_end\") }} as bucket_duration_hours,\n            dimension,\n            dimension_value,\n            metric_properties\n        from\n            row_count\n        where (metric_value is not null and cast(metric_value as {{ elementary.edr_type_int() }}) < {{ elementary.get_config_var('max_int') }}) or\n            metric_value is null\n        )\n\n    {% else %}\n        with filtered_monitored_table as (\n            select *,\n                   {{ concat_dimensions_sql_expression }} as dimension_value\n            from {{ monitored_table_relation }}\n        {% if metric_properties.where_expression %}\n            where {{ metric_properties.where_expression }}\n        {% endif %}\n        ),\n        \n        {# Get all of the dimension anomally metrics that were created for the test until this run #}\n        last_dimension_metrics as (\n            select \n                bucket_end,\n                dimension_value,\n                metric_value\n            from {{ ref('data_monitoring_metrics') }}\n            where full_table_name = {{ full_table_name_str }}\n                and metric_name = {{ elementary.edr_quote(metric_name) }}\n                and dimension = {{ elementary.edr_quote(dimensions_string) }}\n                and {{ elementary.edr_cast_as_timestamp('bucket_end') }} >= {{ elementary.edr_timeadd(metric_properties.time_bucket.period,\n                                                                                              metric_properties.time_bucket.count,\n                                                                                              elementary.edr_cast_as_timestamp(min_bucket_start)) }}\n        ),\n\n        {# Outdated dimension values are dimensions with all metrics of 0 in the range of the test time #}\n        dimension_values_without_outdated as (\n            select\n                bucket_end,\n                dimension_value,\n                metric_value\n            from last_dimension_metrics\n            where dimension_value in (\n                select dimension_value\n                from (\n                    select distinct \n                        dimension_value,\n                        sum(metric_value)\n                    from last_dimension_metrics\n                    group by 1\n                    having sum(metric_value) > 0\n                ) results\n            )\n        ),\n        \n\n        dimension_values_union as (\n            select distinct *\n            from (\n                select distinct \n                    dimension_value,\n                    1 as joiner\n                from dimension_values_without_outdated\n                union all\n                select distinct \n                    dimension_value,\n                    1 as joiner\n                from filtered_monitored_table\n            ) results\n        ),\n\n        {# Create buckets for each day from max(first metric time, min bucket end) until max bucket end #}\n        buckets as (\n          select\n            edr_bucket_start,\n            edr_bucket_end,\n            1 as joiner\n          from ({{ elementary.complete_buckets_cte(metric_properties, min_bucket_start, max_bucket_end) }}) results\n          where edr_bucket_start >= {{ elementary.edr_cast_as_timestamp(min_bucket_start) }}\n            and edr_bucket_end <= {{ elementary.edr_cast_as_timestamp(max_bucket_end) }}\n        ),\n\n        {# Get all of the metrics for all of the dimensions that were create for the test until this run, #}\n        {# \"hydrated\" with metrics with value 0 for dimensions with no row count in the given time range. #}\n        hydrated_last_dimension_metrics as (\n            select \n                edr_bucket_end as bucket_end,\n                dimension_values_union.dimension_value as dimension_value,\n                case when metric_value is not null then metric_value else 0 end as metric_value\n            from buckets left join dimension_values_union on buckets.joiner = dimension_values_union.joiner\n                left outer join dimension_values_without_outdated on (buckets.edr_bucket_end = dimension_values_without_outdated.bucket_end and dimension_values_union.dimension_value = dimension_values_without_outdated.dimension_value)\n        ),\n\n        {# Union between current row count for each dimension, and the \"hydrated\" metrics of the test until this run #}\n        row_count as (\n            select \n                bucket_end,\n                dimension_value,\n                metric_value\n            from hydrated_last_dimension_metrics\n            union all\n            select\n                {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.run_started_at_as_string())) }} as bucket_end,\n                {{ concat_dimensions_sql_expression }} as dimension_value,\n                {{ elementary.row_count() }} as metric_value\n            from {{ monitored_table_relation }}\n            {% if metric_properties.where_expression %}\n                where {{ metric_properties.where_expression }}\n            {% endif %}\n            {{ dbt_utils.group_by(2) }}\n        ),\n\n        metrics_final as (\n            select\n                {{ elementary.edr_cast_as_string(full_table_name_str) }} as full_table_name,\n                {{ elementary.null_string() }} as column_name,\n                {{ elementary.const_as_string(metric_name) }} as metric_name,\n                {{ elementary.edr_cast_as_float('metric_value') }} as metric_value,\n                {{ elementary.null_string() }} as source_value,\n                {{ elementary.null_timestamp() }} as bucket_start,\n                bucket_end,\n                {{ elementary.null_int() }} as bucket_duration_hours,\n                {{ elementary.const_as_string(dimensions_string) }} as dimension,\n                dimension_value,\n                {{ elementary.dict_to_quoted_json(metric_properties) }} as metric_properties\n            from row_count\n        )\n    {% endif %}\n\n    select\n        {{ elementary.generate_surrogate_key([\n            'full_table_name',\n            'column_name',\n            'metric_name',\n            'dimension',\n            'dimension_value',\n            'bucket_end',\n            'metric_properties']) }} as id,\n        full_table_name,\n        column_name,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        {{ elementary.edr_current_timestamp_in_utc() }} as updated_at,\n        dimension,\n        dimension_value,\n        metric_properties\n    from metrics_final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_quote", "macro.elementary.relation_to_full_name", "macro.elementary.join_list", "macro.elementary.list_concat_with_separator", "macro.elementary.complete_buckets_cte", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.get_start_bucket_in_data", "macro.elementary.edr_cast_as_float", "macro.elementary.row_count", "macro.dbt_utils.group_by", "macro.elementary.const_as_string", "macro.elementary.null_string", "macro.elementary.dict_to_quoted_json", "macro.elementary.edr_cast_as_string", "macro.elementary.timediff", "macro.elementary.edr_type_int", "macro.elementary.get_config_var", "macro.elementary.edr_timeadd", "macro.elementary.run_started_at_as_string", "macro.elementary.null_timestamp", "macro.elementary.null_int", "macro.elementary.generate_surrogate_key", "macro.elementary.edr_current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.4604342, "supported_languages": null}, "macro.elementary.get_latest_full_refresh": {"name": "get_latest_full_refresh", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/get_latest_full_refresh.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/get_latest_full_refresh.sql", "unique_id": "macro.elementary.get_latest_full_refresh", "macro_sql": "{% macro get_latest_full_refresh(model_node) %}\n    {% set query %}\n        select generated_at from {{ ref('dbt_run_results') }}\n        where\n          unique_id = '{{ model_node.unique_id }}' and\n          full_refresh = true\n        order by generated_at desc\n        limit 1\n    {% endset %}\n    {% do return(elementary.result_value(query)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.461835, "supported_languages": null}, "macro.elementary.get_start_bucket_in_data": {"name": "get_start_bucket_in_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/get_start_bucket_in_data.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/get_start_bucket_in_data.sql", "unique_id": "macro.elementary.get_start_bucket_in_data", "macro_sql": "{% macro get_start_bucket_in_data(timestamp_column, min_bucket_start, time_bucket) %}\n    {% set bucket_start_datediff_expr %}\n      floor({{ elementary.edr_datediff(min_bucket_start, elementary.edr_cast_as_timestamp(timestamp_column), time_bucket.period) }} / {{ time_bucket.count }}) * {{ time_bucket.count }}\n    {% endset %}\n    {% do return(elementary.edr_cast_as_timestamp(elementary.edr_timeadd(time_bucket.period, elementary.edr_cast_as_int(bucket_start_datediff_expr), min_bucket_start))) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_datediff", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_timeadd", "macro.elementary.edr_cast_as_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.4637225, "supported_languages": null}, "macro.elementary.table_monitoring_query": {"name": "table_monitoring_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.table_monitoring_query", "macro_sql": "{% macro table_monitoring_query(monitored_table_relation, min_bucket_start, max_bucket_end, table_monitors, days_back, metric_properties) %}\n\n    {%- set full_table_name_str = elementary.edr_quote(elementary.relation_to_full_name(monitored_table_relation)) %}\n    {%- set timestamp_column = metric_properties.timestamp_column %}\n\n    with monitored_table as (\n        select * from {{ monitored_table_relation }}\n        {% if metric_properties.where_expression %} where {{ metric_properties.where_expression }} {% endif %}\n    ),\n\n    {% if timestamp_column %}\n        buckets as (\n            select edr_bucket_start, edr_bucket_end\n            from ({{ elementary.complete_buckets_cte(metric_properties, min_bucket_start, max_bucket_end) }}) results\n            where edr_bucket_start >= {{ elementary.edr_cast_as_timestamp(min_bucket_start) }}\n              and edr_bucket_end <= {{ elementary.edr_cast_as_timestamp(max_bucket_end) }}\n        ),\n\n        time_filtered_monitored_table as (\n            select *,\n                   {{ elementary.get_start_bucket_in_data(timestamp_column, min_bucket_start, metric_properties.time_bucket) }} as start_bucket_in_data\n            from monitored_table\n            where\n                {{ elementary.edr_cast_as_timestamp(timestamp_column) }} >= (select min(edr_bucket_start) from buckets)\n                and {{ elementary.edr_cast_as_timestamp(timestamp_column) }} < (select max(edr_bucket_end) from buckets)\n        ),\n    {% endif %}\n\n    metrics as (\n        {{ elementary.get_unified_metrics_query(metrics=table_monitors,\n                                                metric_properties=metric_properties) }}\n    ),\n\n    {% if timestamp_column %}\n        metrics_final as (\n\n        select\n            {{ elementary.edr_cast_as_string(full_table_name_str) }} as full_table_name,\n            {{ elementary.null_string() }} as column_name,\n            metric_name,\n            {{ elementary.edr_cast_as_float('metric_value') }} as metric_value,\n            source_value,\n            edr_bucket_start as bucket_start,\n            edr_bucket_end as bucket_end,\n            {{ elementary.timediff(\"hour\", \"edr_bucket_start\", \"edr_bucket_end\") }} as bucket_duration_hours,\n            {{ elementary.null_string() }} as dimension,\n            {{ elementary.null_string() }} as dimension_value,\n            {{elementary.dict_to_quoted_json(metric_properties) }} as metric_properties\n        from\n            metrics\n        where (metric_value is not null and cast(metric_value as {{ elementary.edr_type_int() }}) < {{ elementary.get_config_var('max_int') }}) or\n            metric_value is null\n        )\n    {% else %}\n        metrics_final as (\n\n        select\n            {{ elementary.edr_cast_as_string(full_table_name_str) }} as full_table_name,\n            {{ elementary.null_string() }} as column_name,\n            metric_name,\n            {{ elementary.edr_cast_as_float('metric_value') }} as metric_value,\n            {{ elementary.null_string() }} as source_value,\n            {{ elementary.null_timestamp() }} as bucket_start,\n            {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.run_started_at_as_string())) }} as bucket_end,\n            {{ elementary.null_int() }} as bucket_duration_hours,\n            {{ elementary.null_string() }} as dimension,\n            {{ elementary.null_string() }} as dimension_value,\n            {{elementary.dict_to_quoted_json(metric_properties) }} as metric_properties\n        from metrics\n\n        )\n    {% endif %}\n\n    select\n       {{ elementary.generate_surrogate_key([\n                  'full_table_name',\n                  'column_name',\n                  'metric_name',\n                  'bucket_end',\n                  'metric_properties'\n                  ]) }}  as id,\n        full_table_name,\n        column_name,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        {{ elementary.edr_current_timestamp_in_utc() }} as updated_at,\n        dimension,\n        dimension_value,\n        metric_properties\n    from metrics_final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_quote", "macro.elementary.relation_to_full_name", "macro.elementary.complete_buckets_cte", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.get_start_bucket_in_data", "macro.elementary.get_unified_metrics_query", "macro.elementary.edr_cast_as_string", "macro.elementary.null_string", "macro.elementary.edr_cast_as_float", "macro.elementary.timediff", "macro.elementary.dict_to_quoted_json", "macro.elementary.edr_type_int", "macro.elementary.get_config_var", "macro.elementary.null_timestamp", "macro.elementary.run_started_at_as_string", "macro.elementary.null_int", "macro.elementary.generate_surrogate_key", "macro.elementary.edr_current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.500122, "supported_languages": null}, "macro.elementary.get_unified_metrics_query": {"name": "get_unified_metrics_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.get_unified_metrics_query", "macro_sql": "{% macro get_unified_metrics_query(metrics, metric_properties) %}\n    {%- set included_monitors = {} %}\n    {%- for metric_name in metrics %}\n        {%- set metric_query = elementary.get_metric_query(metric_name, metric_properties) %}\n        {%- if metric_query %}\n            {% do included_monitors.update({metric_name: metric_query}) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {% if not included_monitors %}\n        {% if metric_properties.timestamp_column %}\n            {% do return(elementary.empty_table([('edr_bucket_start','timestamp'),('edr_bucket_end','timestamp'),('metric_name','string'),('source_value','string'),('metric_value','int')])) %}\n        {% else %}\n            {% do return(elementary.empty_table([('metric_name','string'),('metric_value','int')])) %}\n        {% endif %}\n    {% endif %}\n\n    with\n    {%- for metric_name, metric_query in included_monitors.items() %}\n        {{ metric_name }} as (\n            {{ metric_query }}\n        ){% if not loop.last %},{% endif %}\n    {%- endfor %}\n\n    {%- for metric_name in included_monitors %}\n    select * from {{ metric_name }}\n    {% if not loop.last %} union all {% endif %}\n    {%- endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_metric_query", "macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.504633, "supported_languages": null}, "macro.elementary.get_metric_query": {"name": "get_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.get_metric_query", "macro_sql": "{% macro get_metric_query(metric_name, metric_properties) %}\n    {%- set metrics_macro_mapping = {\n        \"row_count\": elementary.row_count_metric_query,\n        \"freshness\": elementary.freshness_metric_query,\n        \"event_freshness\": elementary.event_freshness_metric_query\n    } %}\n\n    {%- set metric_macro = metrics_macro_mapping.get(metric_name) %}\n    {%- if not metric_macro %}\n        {%- do return(none) %}\n    {%- endif %}\n\n    {%- set metric_query = metric_macro(metric_properties) %}\n    {%- if not metric_query %}\n        {%- do return(none) %}\n    {%- endif %}\n\n    {{ metric_query }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.506577, "supported_languages": null}, "macro.elementary.row_count_metric_query": {"name": "row_count_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.row_count_metric_query", "macro_sql": "{% macro row_count_metric_query(metric_properties) %}\n{% if metric_properties.timestamp_column %}\n    with row_count_values as (\n        select edr_bucket_start,\n               edr_bucket_end,\n               start_bucket_in_data,\n               case when start_bucket_in_data is null then\n                   0\n               else {{ elementary.edr_cast_as_float(elementary.row_count()) }} end as row_count_value\n        from buckets left join time_filtered_monitored_table on (edr_bucket_start = start_bucket_in_data)\n        group by 1,2,3\n    )\n\n    select edr_bucket_start,\n           edr_bucket_end,\n           {{ elementary.const_as_string('row_count') }} as metric_name,\n           {{ elementary.null_string() }} as source_value,\n           row_count_value as metric_value\n    from row_count_values\n{% else %}\n    select\n        {{ elementary.const_as_string('row_count') }} as metric_name,\n        {{ elementary.row_count() }} as metric_value\n    from monitored_table\n    group by 1\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_float", "macro.elementary.row_count", "macro.elementary.const_as_string", "macro.elementary.null_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5080185, "supported_languages": null}, "macro.elementary.freshness_metric_query": {"name": "freshness_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.freshness_metric_query", "macro_sql": "{% macro freshness_metric_query(metric_properties) %}\n{% if metric_properties.timestamp_column %}\n    {%- set freshness_column = metric_properties.freshness_column %}\n    {%- if not freshness_column %}\n        {%- set freshness_column = metric_properties.timestamp_column %}\n    {%- endif %}\n\n    -- get ordered consecutive update timestamps in the source data\n    with unique_timestamps as (\n        select distinct {{ elementary.edr_cast_as_timestamp(freshness_column) }} as timestamp_val\n        from monitored_table\n        order by 1\n    ),\n\n    -- compute freshness for every update as the time difference from the previous update\n    consecutive_updates_freshness as (\n        select\n            timestamp_val as update_timestamp,\n            {{ elementary.timediff('second', 'lag(timestamp_val) over (order by timestamp_val)', 'timestamp_val') }} as freshness\n        from unique_timestamps\n        where timestamp_val >= (select min(edr_bucket_start) from buckets)\n    ),\n\n    -- divide the freshness metrics above to buckets\n    bucketed_consecutive_updates_freshness as (\n        select\n            edr_bucket_start, edr_bucket_end, update_timestamp, freshness\n        from buckets cross join consecutive_updates_freshness\n        where update_timestamp >= edr_bucket_start AND update_timestamp < edr_bucket_end\n    ),\n\n    -- we also want to record the freshness at the end of each bucket as an additional point. By this we mean\n    -- the time that passed since the last update in the bucket and the end of the bucket.\n    bucket_end_freshness as (\n        select\n            edr_bucket_start,\n            edr_bucket_end,\n            max(timestamp_val) as update_timestamp,\n            {{ elementary.timediff('second', elementary.edr_cast_as_timestamp('max(timestamp_val)'), \"least(edr_bucket_end, {})\".format(elementary.current_timestamp_column())) }} as freshness\n        from buckets cross join unique_timestamps\n        where timestamp_val < edr_bucket_end\n        group by 1,2\n    ),\n\n    -- create a single table with all the freshness values\n    bucket_all_freshness_metrics as (\n        select * from bucketed_consecutive_updates_freshness\n        union all\n        select * from bucket_end_freshness\n    ),\n\n    -- get all the freshness values, ranked by size (we use partition by and not group by, because we also want to have\n    -- the associated timestamp as source value)\n    bucket_freshness_ranked as (\n        select\n            *,\n            row_number () over (partition by edr_bucket_end order by freshness is null, freshness desc) as row_number\n        from bucket_all_freshness_metrics\n    )\n\n    select\n        edr_bucket_start,\n        edr_bucket_end,\n        {{ elementary.const_as_string('freshness') }} as metric_name,\n        {{ elementary.edr_cast_as_string('update_timestamp') }} as source_value,\n        freshness as metric_value\n    from bucket_freshness_ranked\n    where row_number = 1\n{% else %}\n    {% do exceptions.raise_compiler_error(\"freshness_anomalies test is not supported whitout timestamp_column.\") %}\n    {# TODO: We can enhance this test for models to use model_run_results in case a timestamp column is not defined #}\n    {% do return(none) %}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp", "macro.elementary.timediff", "macro.elementary.current_timestamp_column", "macro.elementary.const_as_string", "macro.elementary.edr_cast_as_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5109143, "supported_languages": null}, "macro.elementary.event_freshness_metric_query": {"name": "event_freshness_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.event_freshness_metric_query", "macro_sql": "{% macro event_freshness_metric_query(metric_properties) %}\n{% set event_timestamp_column = metric_properties.event_timestamp_column %}\n{% set update_timestamp_column = metric_properties.timestamp_column %}\n\n{% if update_timestamp_column %}\n    select\n        edr_bucket_start,\n        edr_bucket_end,\n        {{ elementary.const_as_string('event_freshness') }} as metric_name,\n        {{ elementary.edr_cast_as_string('max({})'.format(event_timestamp_column)) }} as source_value,\n        {{ 'coalesce(max({}), {})'.format(\n                elementary.timediff('second', elementary.edr_cast_as_timestamp(event_timestamp_column), elementary.edr_cast_as_timestamp(update_timestamp_column)),\n                elementary.timediff('second', 'edr_bucket_start', 'edr_bucket_end')\n            ) }} as metric_value\n    from buckets left join time_filtered_monitored_table on (edr_bucket_start = start_bucket_in_data)\n    group by 1,2\n{% else %}\n    select\n        {{ elementary.const_as_string('event_freshness') }} as metric_name,\n        {{ elementary.timediff('second', elementary.edr_cast_as_timestamp(\"max({})\".format(event_timestamp_column)), elementary.edr_quote(elementary.get_run_started_at())) }} as metric_value\n    from monitored_table\n    group by 1\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.const_as_string", "macro.elementary.edr_cast_as_string", "macro.elementary.timediff", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.get_run_started_at"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.51369, "supported_languages": null}, "macro.elementary.get_columns_changes_from_last_run_query": {"name": "get_columns_changes_from_last_run_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "unique_id": "macro.elementary.get_columns_changes_from_last_run_query", "macro_sql": "{% macro get_columns_changes_from_last_run_query(full_table_name, temp_columns_snapshot_relation) %}\n    {%- set previous_schema_time_query -%}\n        (select max(detected_at) from {{ ref('schema_columns_snapshot') }} where lower(full_table_name) = lower('{{ full_table_name }}'))\n    {%- endset %}\n\n    {% set cur %}\n        {# This is the current snapshot of the columns. #}\n        select full_table_name, column_name, data_type, is_new, detected_at\n        from {{ temp_columns_snapshot_relation }}\n    {% endset %}\n\n    {% set pre %}\n        {# This is the previous snapshot of the columns. #}\n        select full_table_name, column_name, data_type, detected_at\n        from {{ ref('schema_columns_snapshot') }}\n        where lower(full_table_name) = lower('{{ full_table_name }}')\n            and detected_at = {{ previous_schema_time_query }}\n        order by detected_at desc\n    {% endset %}\n\n    {{ elementary.get_columns_changes_query_generic(full_table_name, cur, pre) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_columns_changes_query_generic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5192316, "supported_languages": null}, "macro.elementary.get_column_changes_from_baseline_query": {"name": "get_column_changes_from_baseline_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "unique_id": "macro.elementary.get_column_changes_from_baseline_query", "macro_sql": "{% macro get_column_changes_from_baseline_query(full_table_name, model_baseline_relation, include_added=False) %}\n    {% set cur %}\n        with baseline as (\n            select lower(column_name) as column_name, data_type\n            from {{ model_baseline_relation }}\n        )\n\n        select\n            info_schema.full_table_name,\n            lower(info_schema.column_name) as column_name,\n            info_schema.data_type,\n            (baseline.column_name IS NULL) as is_new,\n            {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at\n        from {{ ref('filtered_information_schema_columns') }} info_schema\n        left join baseline on (\n            lower(info_schema.column_name) = lower(baseline.column_name)\n        )\n        where lower(info_schema.full_table_name) = lower('{{ full_table_name }}')\n    {% endset %}\n\n    {% set pre %}\n        select\n            {{ elementary.const_as_string(full_table_name) }} as full_table_name,\n            column_name,\n            data_type,\n            {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at\n        from {{ model_baseline_relation }}\n    {% endset %}\n\n    {{ elementary.get_columns_changes_query_generic(full_table_name, cur, pre, include_added=include_added) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.datetime_now_utc_as_timestamp_column", "macro.elementary.const_as_string", "macro.elementary.get_columns_changes_query_generic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5211384, "supported_languages": null}, "macro.elementary.get_columns_changes_query_generic": {"name": "get_columns_changes_query_generic", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "unique_id": "macro.elementary.get_columns_changes_query_generic", "macro_sql": "{% macro get_columns_changes_query_generic(full_table_name, cur, pre, include_added=True) %}\n    {%- set test_execution_id = elementary.get_test_execution_id() %}\n    {%- set test_unique_id = elementary.get_test_unique_id() %}\n\n    with cur as (\n        {{ cur }}\n    ),\n\n    pre as (\n        {{ pre }}\n    ),\n\n    type_changes as (\n\n        {# Finding the columns that have changed type. #}\n        select\n            cur.full_table_name,\n            'type_changed' as change,\n            cur.column_name,\n            cur.data_type as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at\n        from cur inner join pre\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where pre.data_type IS NOT NULL AND lower(cur.data_type) != lower(pre.data_type)\n\n    ),\n\n    {% if include_added %}\n    columns_added as (\n\n        {# This is the columns that have been added. #}\n        select\n            full_table_name,\n            'column_added' as change,\n            column_name,\n            data_type,\n            {{ elementary.null_string() }} as pre_data_type,\n            detected_at as detected_at\n        from cur\n        where is_new = true\n\n    ),\n    {% endif %}\n\n    columns_removed as (\n\n        {# This is finding the columns that have been removed. #}\n        select\n            pre.full_table_name,\n            'column_removed' as change,\n            pre.column_name as column_name,\n            {{ elementary.null_string() }} as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at as detected_at\n        from pre left join cur\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where cur.full_table_name is null and cur.column_name is null\n\n    ),\n\n    columns_removed_filter_deleted_tables as (\n\n        {# This is filtering out the columns of tables that have been deleted. #}\n        select\n            removed.full_table_name,\n            removed.change,\n            removed.column_name,\n            removed.data_type,\n            removed.pre_data_type,\n            removed.detected_at\n        from columns_removed as removed join cur\n            on (lower(removed.full_table_name) = lower(cur.full_table_name))\n\n    ),\n\n    all_column_changes as (\n\n        {# Combining the results of the three queries into one table. #}\n        select * from type_changes\n        union all\n        select * from columns_removed_filter_deleted_tables\n        {% if include_added %}\n        union all\n        select * from columns_added\n        {% endif %}\n    ),\n\n    column_changes_test_results as (\n\n        {# This is the query that is creating the test results table, by formatting a description and adding id + detection time #}\n        select\n            {{ elementary.generate_surrogate_key(['full_table_name', 'column_name', 'change', 'detected_at']) }} as data_issue_id,\n            {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at,\n            {{ elementary.full_name_split('database_name') }},\n            {{ elementary.full_name_split('schema_name') }},\n            {{ elementary.full_name_split('table_name') }},\n            column_name,\n            'schema_change' as test_type,\n            change as test_sub_type,\n            case\n                when change = 'column_added'\n                    then 'The column \"' || column_name || '\" was added'\n                when change= 'column_removed'\n                    then 'The column \"' || column_name || '\" was removed'\n                when change= 'type_changed'\n                    then 'The type of \"' || column_name || '\" was changed from ' || pre_data_type || ' to ' || data_type\n                else NULL\n            end as test_results_description\n        from all_column_changes\n        {{ dbt_utils.group_by(9) }}\n\n    )\n\n        {# Creating a unique id for each row in the table, and adding execution id #}\n    select {{ elementary.generate_surrogate_key([\n                     'data_issue_id',\n                     elementary.const_as_string(test_execution_id)\n                ]) }} as id,\n        {{ elementary.const_as_string(test_execution_id) }} as test_execution_id,\n        {{ elementary.const_as_string(test_unique_id) }} as test_unique_id,\n        *\n    from column_changes_test_results\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.get_test_execution_id", "macro.elementary.get_test_unique_id", "macro.elementary.null_string", "macro.elementary.generate_surrogate_key", "macro.elementary.datetime_now_utc_as_timestamp_column", "macro.elementary.full_name_split", "macro.dbt_utils.group_by", "macro.elementary.const_as_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5249357, "supported_languages": null}, "macro.elementary.get_columns_snapshot_query": {"name": "get_columns_snapshot_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_snapshot_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_snapshot_query.sql", "unique_id": "macro.elementary.get_columns_snapshot_query", "macro_sql": "{% macro get_columns_snapshot_query(full_table_name) %}\n\n    {%- set known_columns_query %}\n        select full_column_name from {{ ref('schema_columns_snapshot') }}\n        where detected_at = (select max(detected_at) from {{ ref('schema_columns_snapshot') }} where lower(full_table_name) = lower('{{ full_table_name }}'))\n        and lower(full_table_name) = lower('{{ full_table_name }}')\n    {% endset %}\n\n    {%- set known_tables_query %}\n        select distinct full_table_name from {{ ref('schema_columns_snapshot') }}\n        where detected_at = (select max(detected_at) from {{ ref('schema_columns_snapshot') }} where lower(full_table_name) = lower('{{ full_table_name }}'))\n        and lower(full_table_name) = lower('{{ full_table_name }}')\n    {% endset %}\n\n\n    with information_schema_columns as (\n\n        select * from {{ ref('filtered_information_schema_columns') }}\n        where lower(full_table_name) = lower('{{ full_table_name }}')\n\n    ),\n\n    columns_snapshot as (\n\n        select\n            full_table_name,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            cast(data_type as {{ elementary.edr_type_string() }}) as data_type,\n            {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at,\n            case when\n                    {{ elementary.full_column_name() }} not in ({{ known_columns_query }})\n                    and full_table_name in ({{ known_tables_query }})\n                then true\n                else false\n            end as is_new\n        from information_schema_columns\n\n    ),\n\n    columns_snapshot_with_id as (\n\n        select\n            {{ elementary.generate_surrogate_key([\n              'full_table_name',\n              'column_name',\n              'data_type'\n            ]) }} as column_state_id,\n            {{ elementary.full_column_name() }} as full_column_name,\n            full_table_name,\n            column_name,\n            data_type,\n            is_new,\n            detected_at\n        from columns_snapshot\n        group by 1,2,3,4,5,6,7\n\n    )\n\n    select\n        {{ elementary.edr_cast_as_string('column_state_id') }} as column_state_id,\n        {{ elementary.edr_cast_as_string('full_column_name') }} as full_column_name,\n        {{ elementary.edr_cast_as_string('full_table_name') }} as full_table_name,\n        {{ elementary.edr_cast_as_string('column_name') }} as column_name,\n        {{ elementary.edr_cast_as_string('data_type') }} as data_type,\n        {{ elementary.edr_cast_as_bool('is_new') }} as is_new,\n        {{ elementary.edr_cast_as_timestamp('detected_at') }} as detected_at\n    from columns_snapshot_with_id\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_string", "macro.elementary.datetime_now_utc_as_timestamp_column", "macro.elementary.full_column_name", "macro.elementary.generate_surrogate_key", "macro.elementary.edr_cast_as_string", "macro.elementary.edr_cast_as_bool", "macro.elementary.edr_cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.53228, "supported_languages": null}, "macro.elementary.get_last_schema_changes_time": {"name": "get_last_schema_changes_time", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_last_schema_changes_time.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_last_schema_changes_time.sql", "unique_id": "macro.elementary.get_last_schema_changes_time", "macro_sql": "{% macro get_last_schema_changes_time() %}\n    -- depends_on: {{ ref('elementary_test_results') }}\n    {%- if execute -%}\n        {%- set last_schema_changes_time_query %}\n            select max(detected_at) as last_alert_time\n            from {{ ref('elementary_test_results') }}\n            where test_type = 'schema_change' and test_sub_type != 'table_added'\n        {%- endset %}\n\n        {%- set last_schema_changes_query_result = elementary.result_value(last_schema_changes_time_query) %}\n\n        {%- if last_schema_changes_query_result %}\n            {{ return(last_schema_changes_query_result) }}\n        {%- else %}\n            {{ return(none) }}\n        {%- endif %}\n    {%- endif -%}\n    {{- return(none) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5345507, "supported_languages": null}, "macro.elementary.get_artifact_metadata_hash": {"name": "get_artifact_metadata_hash", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/get_artifact_metadata_hash.sql", "original_file_path": "macros/edr/dbt_artifacts/get_artifact_metadata_hash.sql", "unique_id": "macro.elementary.get_artifact_metadata_hash", "macro_sql": "{% macro get_artifact_metadata_hash(artifact) %}\n  {% if not local_md5 %}\n    {% do return(none) %}\n  {% endif %}\n\n  {% set time_excluded_artifact = artifact.copy() %}\n  {% do time_excluded_artifact.pop(\"generated_at\") %}\n  {% do return(local_md5(tojson(time_excluded_artifact, sort_keys=true))) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5362163, "supported_languages": null}, "macro.elementary.upload_artifacts_to_table": {"name": "upload_artifacts_to_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_artifacts_to_table.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_artifacts_to_table.sql", "unique_id": "macro.elementary.upload_artifacts_to_table", "macro_sql": "{% macro upload_artifacts_to_table(table_relation, artifacts, flatten_artifact_callback, append=False, should_commit=False, metadata_hashes=None) %}\n    {% set flatten_artifact_dicts = [] %}\n    {% do elementary.file_log(\"[{}] Flattening the artifacts.\".format(table_relation.identifier)) %}\n    {% for artifact in artifacts %}\n        {% set flatten_artifact_dict = flatten_artifact_callback(artifact) %}\n        {% if flatten_artifact_dict is not none %}\n            {% do flatten_artifact_dicts.append(flatten_artifact_dict) %}\n        {% endif %}\n    {% endfor %}\n    {% do elementary.file_log(\"[{}] Flattened {} artifacts.\".format(table_relation.identifier, flatten_artifact_dicts | length)) %}\n\n    {% if append %}\n        {# In append mode, just insert, and no need to be atomic #}\n        {% do elementary.insert_rows(table_relation, flatten_artifact_dicts, should_commit, elementary.get_config_var('dbt_artifacts_chunk_size')) %}\n    {% else %}\n        {% if metadata_hashes is not none and elementary.get_config_var(\"cache_artifacts\") %}\n            {% do elementary.file_log(\"[{}] Comparing the artifacts state.\".format(table_relation.identifier)) %}\n            {% set new_metadata_hashes = flatten_artifact_dicts | map(attribute=\"metadata_hash\") | sort %}\n            {% if new_metadata_hashes == metadata_hashes %}\n                {% do elementary.file_log(\"[{}] Artifacts did not change.\".format(table_relation.identifier)) %}\n            {% else %}\n                {% do elementary.file_log(\"[{}] Artifacts changed.\".format(table_relation.identifier)) %}\n                {% set upload_artifacts_method = elementary.get_config_var(\"upload_artifacts_method\") %}\n                {% if upload_artifacts_method == \"diff\" %}\n                    {% set added_artifacts = flatten_artifact_dicts | rejectattr(\"metadata_hash\", \"in\", metadata_hashes) | list %}\n                    {% set removed_artifact_hashes = metadata_hashes | reject(\"in\", new_metadata_hashes) | list %}\n                    {% do elementary.delete_and_insert(table_relation, insert_rows=added_artifacts, delete_values=removed_artifact_hashes, delete_column_key=\"metadata_hash\") %}\n                {% elif upload_artifacts_method == \"replace\" %}\n                    {% do elementary.replace_table_data(table_relation, flatten_artifact_dicts) %}\n                {% else %}\n                    {% do exceptions.raise_compiler_error(\"Invalid var('upload_artifacts_method') provided.\") %}\n                {% endif %}\n            {% endif %}\n        {% else %}\n            {% do elementary.replace_table_data(table_relation, flatten_artifact_dicts) %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.file_log", "macro.elementary.insert_rows", "macro.elementary.get_config_var", "macro.elementary.delete_and_insert", "macro.elementary.replace_table_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5454853, "supported_languages": null}, "macro.elementary.upload_dbt_artifacts": {"name": "upload_dbt_artifacts", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "unique_id": "macro.elementary.upload_dbt_artifacts", "macro_sql": "{% macro upload_dbt_artifacts() %}\n  {% if execute and results %}\n    {% set model_upload_func_map = {\n      \"dbt_models\": elementary.upload_dbt_models,\n      \"dbt_tests\": elementary.upload_dbt_tests,\n      \"dbt_sources\": elementary.upload_dbt_sources,\n      \"dbt_snapshots\": elementary.upload_dbt_snapshots,\n      \"dbt_metrics\": elementary.upload_dbt_metrics,\n      \"dbt_exposures\": elementary.upload_dbt_exposures,\n      \"dbt_seeds\": elementary.upload_dbt_seeds,\n      }\n    %}\n\n    {% set artifacts_hashes = elementary.get_artifacts_hashes() %}\n    {% do elementary.file_log(\"Uploading dbt artifacts.\") %}\n    {% for artifacts_model, upload_artifacts_func in model_upload_func_map.items() %}\n      {% if not elementary.get_result_node(artifacts_model) %}\n        {% if elementary.get_elementary_relation(artifacts_model) %}\n          {% if artifacts_hashes is not none %}\n            {% do upload_artifacts_func(should_commit=true, metadata_hashes=artifacts_hashes.get(artifacts_model, [])) %}\n          {% else %}\n            {% do upload_artifacts_func(should_commit=true) %}\n          {% endif %}\n        {% endif %}\n      {% else %}\n        {% do elementary.file_log('[{}] Artifacts already ran.'.format(artifacts_model)) %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_artifacts_hashes", "macro.elementary.file_log", "macro.elementary.get_result_node", "macro.elementary.get_elementary_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5510566, "supported_languages": null}, "macro.elementary.get_artifacts_hashes": {"name": "get_artifacts_hashes", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "unique_id": "macro.elementary.get_artifacts_hashes", "macro_sql": "{% macro get_artifacts_hashes() %}\n    {# The stored hashes are only needed if it can be compared later to the local hashes. #}\n    {% if not local_md5 %}\n        {% do return(none) %}\n    {% endif %}\n\n    {% set database_name, schema_name = elementary.get_package_database_and_schema() %}\n    {% set artifacts_hash_relation = adapter.get_relation(database_name, schema_name, \"dbt_artifacts_hashes\") %}\n    {% if not artifacts_hash_relation %}\n        {% do return(none) %}\n    {% endif %}\n\n    {% set stored_artifacts_query %}\n    select artifacts_model, metadata_hash from {{ artifacts_hash_relation }}\n    order by metadata_hash\n    {% endset %}\n    {% set artifacts_hashes_results = elementary.run_query(stored_artifacts_query) %}\n    {% set artifact_agate_hashes = artifacts_hashes_results.group_by(\"artifacts_model\") %}\n    {% set artifacts_hashes = {} %}\n    {% for artifacts_model, metadata_hashes in artifact_agate_hashes.items() %}\n        {% do artifacts_hashes.update({artifacts_model: metadata_hashes.columns[\"metadata_hash\"]}) %}\n    {% endfor %}\n    {% do return(artifacts_hashes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5543175, "supported_languages": null}, "macro.elementary.upload_dbt_exposures": {"name": "upload_dbt_exposures", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "unique_id": "macro.elementary.upload_dbt_exposures", "macro_sql": "{%- macro upload_dbt_exposures(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_exposures') %}\n    {% if execute and relation %}\n        {% set exposures = graph.exposures.values() | selectattr('resource_type', '==', 'exposure') %}\n        {% do elementary.upload_artifacts_to_table(relation, exposures, elementary.flatten_exposure, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5615437, "supported_languages": null}, "macro.elementary.get_dbt_exposures_empty_table_query": {"name": "get_dbt_exposures_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "unique_id": "macro.elementary.get_dbt_exposures_empty_table_query", "macro_sql": "{% macro get_dbt_exposures_empty_table_query() %}\n    {% set dbt_exposures_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                     ('name', 'string'),\n                                                                     ('maturity', 'string'),\n                                                                     ('type', 'string'),\n                                                                     ('owner_email', 'string'),\n                                                                     ('owner_name', 'string'),\n                                                                     ('url', 'long_string'),\n                                                                     ('depends_on_macros', 'long_string'),\n                                                                     ('depends_on_nodes', 'long_string'),\n                                                                     ('description', 'long_string'),\n                                                                     ('tags', 'long_string'),\n                                                                     ('meta', 'long_string'),\n                                                                     ('package_name', 'string'),\n                                                                     ('original_path', 'long_string'),\n                                                                     ('path', 'string'),\n                                                                     ('generated_at', 'string'),\n                                                                     ('metadata_hash', 'string'),\n                                                                     ]) %}\n    {{ return(dbt_exposures_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5642374, "supported_languages": null}, "macro.elementary.flatten_exposure": {"name": "flatten_exposure", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "unique_id": "macro.elementary.flatten_exposure", "macro_sql": "{% macro flatten_exposure(node_dict) %}\n    {% set owner_dict = elementary.safe_get_with_default(node_dict, 'owner', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% set tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set flatten_exposure_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'name': node_dict.get('name'),\n        'maturity': node_dict.get('maturity'),\n        'type': node_dict.get('type'),\n        'owner_email': owner_dict.get('email'),\n        'owner_name': owner_dict.get('name'),\n        'url': node_dict.get('url'),\n        'depends_on_macros': elementary.filter_none_and_sort(depends_on_dict.get('macros', [])),\n        'depends_on_nodes': elementary.filter_none_and_sort(depends_on_dict.get('nodes', [])),\n        'description': node_dict.get('description'),\n        'tags': elementary.filter_none_and_sort(tags),\n        'meta': meta_dict,\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': elementary.datetime_now_utc_as_string()\n      }%}\n    {% do flatten_exposure_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_exposure_metadata_dict)}) %}\n    {{ return(flatten_exposure_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.filter_none_and_sort", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.569357, "supported_languages": null}, "macro.elementary.upload_dbt_invocation": {"name": "upload_dbt_invocation", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.upload_dbt_invocation", "macro_sql": "{% macro upload_dbt_invocation() %}\n  {% set relation = elementary.get_elementary_relation('dbt_invocations') %}\n  {% if not execute or not relation %}\n    {{ return('') }}\n  {% endif %}\n\n  {% do elementary.file_log(\"Uploading dbt invocation.\") %}\n  {% set now_str = elementary.datetime_now_utc_as_string() %}\n  {% set dbt_invocation = {\n      'invocation_id': invocation_id,\n      'run_started_at': elementary.run_started_at_as_string(),\n      'run_completed_at': now_str,\n      'generated_at': now_str,\n      'command': flags.WHICH,\n      'dbt_version': dbt_version,\n      'elementary_version': elementary.get_elementary_package_version(),\n      'full_refresh': flags.FULL_REFRESH,\n      'invocation_vars': elementary.get_invocation_vars(),\n      'vars': elementary.get_all_vars(),\n      'target_name': target.name,\n      'target_database': elementary.target_database(),\n      'target_schema': target.schema,\n      'target_profile_name': target.profile_name,\n      'threads': target.threads,\n      'selected': elementary.get_invocation_select_filter(),\n      'yaml_selector': elementary.get_invocation_yaml_selector(),\n      'project_name': elementary.get_project_name(),\n      'job_id': elementary.get_first_env_var([\"DBT_JOB_ID\", \"DBT_CLOUD_JOB_ID\"]),\n      'job_run_id': elementary.get_first_env_var([\"DBT_JOB_RUN_ID\", \"DBT_CLOUD_RUN_ID\", \"GITHUB_RUN_ID\"]),\n      'job_name': elementary.get_first_env_var([\"DBT_JOB_NAME\"]),\n      'env': elementary.get_first_env_var([\"DBT_ENV\"]),\n      'env_id': elementary.get_first_env_var([\"DBT_ENV_ID\"]),\n      'project_id': elementary.get_first_env_var([\"DBT_PROJECT_ID\", \"DBT_CLOUD_PROJECT_ID\", \"GITHUB_REPOSITORY\"]),\n      'cause_category': elementary.get_first_env_var([\"DBT_CAUSE_CATEGORY\", \"DBT_CLOUD_RUN_REASON_CATEGORY\", \"GITHUB_EVENT_NAME\"]),\n      'cause': elementary.get_first_env_var([\"DBT_CAUSE\", \"DBT_CLOUD_RUN_REASON\"]),\n      'pull_request_id': elementary.get_first_env_var([\"DBT_PULL_REQUEST_ID\", \"DBT_CLOUD_PR_ID\", \"GITHUB_HEAD_REF\"]),\n      'git_sha': elementary.get_first_env_var([\"DBT_GIT_SHA\", \"DBT_CLOUD_GIT_SHA\", \"GITHUB_SHA\"]),\n      'orchestrator': elementary.get_orchestrator(),\n      'dbt_user': elementary.get_first_env_var([\"DBT_USER\"]),\n  } %}\n  {% do elementary.insert_rows(relation, [dbt_invocation], should_commit=true) %}\n  {% do elementary.file_log(\"Uploaded dbt invocation successfully.\") %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.file_log", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.run_started_at_as_string", "macro.elementary.get_elementary_package_version", "macro.elementary.get_invocation_vars", "macro.elementary.get_all_vars", "macro.elementary.target_database", "macro.elementary.get_invocation_select_filter", "macro.elementary.get_invocation_yaml_selector", "macro.elementary.get_project_name", "macro.elementary.get_first_env_var", "macro.elementary.get_orchestrator", "macro.elementary.insert_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5889592, "supported_languages": null}, "macro.elementary.get_project_name": {"name": "get_project_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_project_name", "macro_sql": "{% macro get_project_name() %}\n    {% set project_name = elementary.get_config_var(\"project_name\") %}\n    {% if project_name %}\n        {{ return(project_name) }}\n    {% endif %}\n\n    {% set config = elementary.get_runtime_config() %}\n    {% do return(config.project_name) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_runtime_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5904112, "supported_languages": null}, "macro.elementary.get_invocation_select_filter": {"name": "get_invocation_select_filter", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_invocation_select_filter", "macro_sql": "\n\n{%- macro get_invocation_select_filter() -%}\n    {% set config = elementary.get_runtime_config() %}\n    {%- if invocation_args_dict and invocation_args_dict.select -%}\n        {{- return(invocation_args_dict.select) -}}\n    {%- elif config.args and config.args.select -%}\n        {{- return(config.args.select) -}}\n    {%- else -%}\n        {{- return([]) -}}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_runtime_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5917783, "supported_languages": null}, "macro.elementary.get_invocation_yaml_selector": {"name": "get_invocation_yaml_selector", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_invocation_yaml_selector", "macro_sql": "{%- macro get_invocation_yaml_selector() -%}\n    {% set config = elementary.get_runtime_config() %}\n    {%- if invocation_args_dict and invocation_args_dict.selector_name -%}\n        {{- return(invocation_args_dict.selector_name) -}}\n    {%- elif config.args and config.args.selector_name -%}\n        {{- return(config.args.selector_name) -}}\n    {%- else -%}\n        {{- return([]) -}}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_runtime_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5931706, "supported_languages": null}, "macro.elementary.get_invocation_vars": {"name": "get_invocation_vars", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_invocation_vars", "macro_sql": "{% macro get_invocation_vars() %}\n    {% set config = elementary.get_runtime_config() %}\n    {% set invocation_vars = {} %}\n    {% if invocation_args_dict and invocation_args_dict.vars %}\n        {% if invocation_args_dict.vars is mapping %}\n            {% set invocation_vars = invocation_args_dict.vars %}\n        {% else %}\n            {% set invocation_vars = fromyaml(invocation_args_dict.vars) %}\n        {% endif %}\n    {% elif config.cli_vars %}\n        {% set invocation_vars = config.cli_vars %}\n    {% endif %}\n    {{ return(elementary.to_primitive(invocation_vars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_runtime_config", "macro.elementary.to_primitive"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5952225, "supported_languages": null}, "macro.elementary.get_all_vars": {"name": "get_all_vars", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_all_vars", "macro_sql": "\n\n{%- macro get_all_vars() -%}\n    {% set all_vars = {} %}\n    {% set config = elementary.get_runtime_config() %}\n    {%- if config.vars -%}\n        {% do all_vars.update(config.vars.to_dict()) %}\n    {%- endif -%}\n    {% do all_vars.update(elementary.get_invocation_vars()) %}\n    {{- return(all_vars) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_runtime_config", "macro.elementary.get_invocation_vars"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5965786, "supported_languages": null}, "macro.elementary.get_orchestrator": {"name": "get_orchestrator", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_orchestrator", "macro_sql": "{% macro get_orchestrator() %}\n  {% set orchestrator_env_map = {\n    \"airflow\": [\"AIRFLOW_HOME\"],\n    \"dbt_cloud\": [\"DBT_CLOUD_PROJECT_ID\"],\n    \"github_actions\": [\"GITHUB_ACTIONS\"],\n  } %}\n  {% for orchestrator, env_vars in orchestrator_env_map.items() %}\n    {% if elementary.get_first_env_var(env_vars) %}\n      {% do return(orchestrator) %}\n    {% endif %}\n  {% endfor %}\n  {% do return(elementary.get_first_env_var([\"DBT_ORCHESTRATOR\"])) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_first_env_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.5984895, "supported_languages": null}, "macro.elementary.get_dbt_invocations_empty_table_query": {"name": "get_dbt_invocations_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_dbt_invocations_empty_table_query", "macro_sql": "{% macro get_dbt_invocations_empty_table_query() %}\n    {{ return(elementary.empty_table([\n      ('invocation_id', 'long_string'),\n      ('job_id', 'long_string'),\n      ('job_name', 'long_string'),\n      ('job_run_id', 'long_string'),\n      ('run_started_at', 'string'),\n      ('run_completed_at', 'string'),\n      ('generated_at', 'string'),\n      ('command', 'string'),\n      ('dbt_version', 'string'),\n      ('elementary_version', 'string'),\n\t  ('full_refresh', 'boolean'),\n      ('invocation_vars', 'long_string'),\n      ('vars', 'long_string'),\n      ('target_name', 'string'),\n      ('target_database', 'string'),\n      ('target_schema', 'string'),\n      ('target_profile_name', 'string'),\n      ('threads', 'int'),\n      ('selected', 'long_string'),\n      ('yaml_selector', 'long_string'),\n      ('project_id', 'string'),\n      ('project_name', 'string'),\n      ('env', 'string'),\n      ('env_id', 'string'),\n      ('cause_category', 'string'),\n      ('cause', 'long_string'),\n      ('pull_request_id', 'string'),\n      ('git_sha', 'string'),\n      ('orchestrator', 'string'),\n      ('dbt_user', 'string')\n    ])) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6026142, "supported_languages": null}, "macro.elementary.upload_dbt_metrics": {"name": "upload_dbt_metrics", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "unique_id": "macro.elementary.upload_dbt_metrics", "macro_sql": "{%- macro upload_dbt_metrics(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_metrics') %}\n    {% if execute and relation %}\n        {% set metrics = graph.metrics.values() | selectattr('resource_type', '==', 'metric') %}\n        {% do elementary.upload_artifacts_to_table(relation, metrics, elementary.flatten_metric, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.610493, "supported_languages": null}, "macro.elementary.get_dbt_metrics_empty_table_query": {"name": "get_dbt_metrics_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "unique_id": "macro.elementary.get_dbt_metrics_empty_table_query", "macro_sql": "{% macro get_dbt_metrics_empty_table_query() %}\n    {% set dbt_metrics_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                   ('name', 'string'),\n                                                                   ('label', 'string'),\n                                                                   ('model', 'string'),\n                                                                   ('type', 'string'),\n                                                                   ('sql', 'long_string'),\n                                                                   ('timestamp', 'string'),\n                                                                   ('filters', 'long_string'),\n                                                                   ('time_grains', 'long_string'),\n                                                                   ('dimensions', 'long_string'),\n                                                                   ('depends_on_macros', 'long_string'),\n                                                                   ('depends_on_nodes', 'long_string'),\n                                                                   ('description', 'long_string'),\n                                                                   ('tags', 'long_string'),\n                                                                   ('meta', 'long_string'),\n                                                                   ('package_name', 'string'),\n                                                                   ('original_path', 'long_string'),\n                                                                   ('path', 'string'),\n                                                                   ('generated_at', 'string'),\n                                                                   ('metadata_hash', 'string'),\n                                                                   ]) %}\n    {{ return(dbt_metrics_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6136525, "supported_languages": null}, "macro.elementary.flatten_metric": {"name": "flatten_metric", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "unique_id": "macro.elementary.flatten_metric", "macro_sql": "{% macro flatten_metric(node_dict) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% set tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set flatten_metric_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'name': node_dict.get('name'),\n        'label': node_dict.get('label'),\n        'model': node_dict.get('model'),\n        'type': node_dict.get('type'),\n        'sql': node_dict.get('sql'),\n        'timestamp': node_dict.get('timestamp'),\n        'filters': node_dict.get('filters', {}),\n        'time_grains': elementary.filter_none_and_sort(node_dict.get('time_grains', [])),\n        'dimensions': elementary.filter_none_and_sort(node_dict.get('dimensions', [])),\n        'depends_on_macros': elementary.filter_none_and_sort(depends_on_dict.get('macros', [])),\n        'depends_on_nodes': elementary.filter_none_and_sort(depends_on_dict.get('nodes', [])),\n        'description': node_dict.get('description'),\n        'tags': elementary.filter_none_and_sort(tags),\n        'meta': meta_dict,\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': elementary.datetime_now_utc_as_string()\n    }%}\n    {% do flatten_metric_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_metric_metadata_dict)}) %}\n    {{ return(flatten_metric_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.filter_none_and_sort", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6193955, "supported_languages": null}, "macro.elementary.upload_dbt_models": {"name": "upload_dbt_models", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "unique_id": "macro.elementary.upload_dbt_models", "macro_sql": "{%- macro upload_dbt_models(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_models') %}\n    {% if execute and relation %}\n        {% set models = graph.nodes.values() | selectattr('resource_type', '==', 'model') %}\n        {% do elementary.upload_artifacts_to_table(relation, models, elementary.flatten_model, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6288834, "supported_languages": null}, "macro.elementary.get_dbt_models_empty_table_query": {"name": "get_dbt_models_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "unique_id": "macro.elementary.get_dbt_models_empty_table_query", "macro_sql": "{% macro get_dbt_models_empty_table_query() %}\n    {% set dbt_models_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                  ('alias', 'string'),\n                                                                  ('checksum', 'string'),\n                                                                  ('materialization', 'string'),\n                                                                  ('tags', 'long_string'),\n                                                                  ('meta', 'long_string'),\n                                                                  ('owner', 'string'),\n                                                                  ('database_name', 'string'),\n                                                                  ('schema_name', 'string'),\n                                                                  ('depends_on_macros', 'long_string'),\n                                                                  ('depends_on_nodes', 'long_string'),\n                                                                  ('description', 'long_string'),\n                                                                  ('name', 'string'),\n                                                                  ('package_name', 'string'),\n                                                                  ('original_path', 'long_string'),\n                                                                  ('path', 'string'),\n                                                                  ('generated_at', 'string'),\n                                                                  ('metadata_hash', 'string'),\n                                                                  ]) %}\n    {{ return(dbt_models_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6316967, "supported_languages": null}, "macro.elementary.flatten_model": {"name": "flatten_model", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "unique_id": "macro.elementary.flatten_model", "macro_sql": "{% macro flatten_model(node_dict) %}\n    {% set checksum_dict = elementary.safe_get_with_default(node_dict, 'checksum', {}) %}\n    {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n    {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(config_meta_dict) %}\n    {% set formatted_owner = [] %}\n    {% set raw_owner = meta_dict.get('owner') %}\n    {% if raw_owner is string %}\n        {% set owners = raw_owner.split(',') %}\n        {% for owner in owners %}\n            {% do formatted_owner.append(owner | trim) %}  \n        {% endfor %}\n    {% elif raw_owner is iterable %}\n        {% do formatted_owner.extend(raw_owner) %}\n    {% endif %}\n    {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n    {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(config_tags, global_tags) %}\n    {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n    {% set flatten_model_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'alias': node_dict.get('alias'),\n        'checksum': checksum_dict.get('checksum'),\n        'materialization': config_dict.get('materialized'),\n        'tags': elementary.filter_none_and_sort(tags),\n        'meta': meta_dict,\n        'owner': elementary.filter_none_and_sort(formatted_owner),\n        'database_name': node_dict.get('database'),\n        'schema_name': node_dict.get('schema'),\n        'depends_on_macros': elementary.filter_none_and_sort(depends_on_dict.get('macros', [])),\n        'depends_on_nodes': elementary.filter_none_and_sort(depends_on_dict.get('nodes', [])),\n        'description': node_dict.get('description'),\n        'name': node_dict.get('name'),\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': elementary.datetime_now_utc_as_string()\n    }%}\n    {% do flatten_model_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_model_metadata_dict)}) %}\n    {{ return(flatten_model_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists", "macro.elementary.filter_none_and_sort", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.640544, "supported_languages": null}, "macro.elementary.upload_dbt_seeds": {"name": "upload_dbt_seeds", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "unique_id": "macro.elementary.upload_dbt_seeds", "macro_sql": "{%- macro upload_dbt_seeds(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_seeds') %}\n    {% if execute and relation %}\n        {% set seeds = graph.nodes.values() | selectattr('resource_type', '==', 'seed') %}\n        {% do elementary.upload_artifacts_to_table(relation, seeds, elementary.flatten_seed, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6490726, "supported_languages": null}, "macro.elementary.get_dbt_seeds_empty_table_query": {"name": "get_dbt_seeds_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "unique_id": "macro.elementary.get_dbt_seeds_empty_table_query", "macro_sql": "{% macro get_dbt_seeds_empty_table_query() %}\n    {% set dbt_seeds_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                  ('alias', 'string'),\n                                                                  ('checksum', 'string'),\n                                                                  ('tags', 'long_string'),\n                                                                  ('meta', 'long_string'),\n                                                                  ('owner', 'string'),\n                                                                  ('database_name', 'string'),\n                                                                  ('schema_name', 'string'),\n                                                                  ('description', 'long_string'),\n                                                                  ('name', 'string'),\n                                                                  ('package_name', 'string'),\n                                                                  ('original_path', 'long_string'),\n                                                                  ('path', 'string'),\n                                                                  ('generated_at', 'string'),\n                                                                  ('metadata_hash', 'string'),\n                                                                  ]) %}\n    {{ return(dbt_seeds_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6515734, "supported_languages": null}, "macro.elementary.flatten_seed": {"name": "flatten_seed", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "unique_id": "macro.elementary.flatten_seed", "macro_sql": "{% macro flatten_seed(node_dict) %}\n    {% set checksum_dict = elementary.safe_get_with_default(node_dict, 'checksum', {}) %}\n    {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n    {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(config_meta_dict) %}\n    {% set formatted_owner = [] %}\n    {% set raw_owner = meta_dict.get('owner') %}\n    {% if raw_owner is string %}\n        {% set owners = raw_owner.split(',') %}\n        {% for owner in owners %}\n            {% do formatted_owner.append(owner | trim) %}\n        {% endfor %}\n    {% elif raw_owner is iterable %}\n        {% do formatted_owner.extend(raw_owner) %}\n    {% endif %}\n    {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n    {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(config_tags, global_tags) %}\n    {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n    {% set flatten_seed_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'alias': node_dict.get('alias'),\n        'checksum': checksum_dict.get('checksum'),\n        'tags': elementary.filter_none_and_sort(tags),\n        'meta': meta_dict,\n        'owner': elementary.filter_none_and_sort(formatted_owner),\n        'database_name': node_dict.get('database'),\n        'schema_name': node_dict.get('schema'),\n        'description': node_dict.get('description'),\n        'name': node_dict.get('name'),\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': elementary.datetime_now_utc_as_string()\n    }%}\n    {% do flatten_seed_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_seed_metadata_dict)}) %}\n    {{ return(flatten_seed_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists", "macro.elementary.filter_none_and_sort", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6598198, "supported_languages": null}, "macro.elementary.upload_dbt_snapshots": {"name": "upload_dbt_snapshots", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_snapshots.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_snapshots.sql", "unique_id": "macro.elementary.upload_dbt_snapshots", "macro_sql": "{%- macro upload_dbt_snapshots(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_snapshots') %}\n    {% if execute and relation %}\n        {% set snapshots = graph.nodes.values() | selectattr('resource_type', '==', 'snapshot') %}\n        {% do elementary.upload_artifacts_to_table(relation, snapshots, elementary.flatten_model, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.662133, "supported_languages": null}, "macro.elementary.upload_dbt_sources": {"name": "upload_dbt_sources", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "unique_id": "macro.elementary.upload_dbt_sources", "macro_sql": "{%- macro upload_dbt_sources(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_sources') %}\n    {% if execute and relation %}\n        {% set sources = graph.sources.values() | selectattr('resource_type', '==', 'source') %}\n        {% do elementary.upload_artifacts_to_table(relation, sources, elementary.flatten_source, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6709294, "supported_languages": null}, "macro.elementary.get_dbt_sources_empty_table_query": {"name": "get_dbt_sources_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "unique_id": "macro.elementary.get_dbt_sources_empty_table_query", "macro_sql": "{% macro get_dbt_sources_empty_table_query() %}\n    {% set dbt_sources_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                   ('database_name', 'string'),\n                                                                   ('schema_name', 'string'),\n                                                                   ('source_name', 'string'),\n                                                                   ('name', 'string'),\n                                                                   ('identifier', 'string'),\n                                                                   ('loaded_at_field', 'string'),\n                                                                   ('freshness_warn_after', 'string'),\n                                                                   ('freshness_error_after', 'string'),\n                                                                   ('freshness_filter', 'long_string'),\n                                                                   ('relation_name', 'string'),\n                                                                   ('tags', 'long_string'),\n                                                                   ('meta', 'long_string'),\n                                                                   ('owner', 'string'),\n                                                                   ('package_name', 'string'),\n                                                                   ('original_path', 'long_string'),\n                                                                   ('path', 'string'),\n                                                                   ('source_description', 'long_string'),\n                                                                   ('description', 'long_string'),\n                                                                   ('generated_at', 'string'),\n                                                                   ('metadata_hash', 'string'),\n                                                                   ]) %}\n    {{ return(dbt_sources_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6741817, "supported_languages": null}, "macro.elementary.flatten_source": {"name": "flatten_source", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "unique_id": "macro.elementary.flatten_source", "macro_sql": "{% macro flatten_source(node_dict) %}\n    {% set freshness_dict = elementary.safe_get_with_default(node_dict, 'freshness', {}) %}\n    {% set source_meta_dict = elementary.safe_get_with_default(node_dict, 'source_meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(source_meta_dict) %}\n    {% set owner = meta_dict.get('owner') %}\n    {% set node_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(node_tags, meta_tags) %}\n    {% set flatten_source_metadata_dict = {\n         'unique_id': node_dict.get('unique_id'),\n         'database_name': node_dict.get('database'),\n         'schema_name': node_dict.get('schema'),\n         'source_name': node_dict.get('source_name'),\n         'name': node_dict.get('name'),\n         'identifier': node_dict.get('identifier'),\n         'loaded_at_field': node_dict.get('loaded_at_field'),\n         'freshness_warn_after': freshness_dict.get('warn_after', {}),\n         'freshness_error_after': freshness_dict.get('error_after', {}),\n         'freshness_filter': freshness_dict.get('filter'),\n         'relation_name': node_dict.get('relation_name'),\n         'tags': elementary.filter_none_and_sort(tags),\n         'meta': meta_dict,\n         'owner': owner,\n         'package_name': node_dict.get('package_name'),\n         'original_path': node_dict.get('original_file_path'),\n         'path': node_dict.get('path'),\n         'source_description': node_dict.get('source_description'),\n         'description': node_dict.get('description'),\n         'generated_at': elementary.datetime_now_utc_as_string()\n     }%}\n    {% do flatten_source_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_source_metadata_dict)}) %}\n    {{ return(flatten_source_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists", "macro.elementary.filter_none_and_sort", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.6808572, "supported_languages": null}, "macro.elementary.upload_dbt_tests": {"name": "upload_dbt_tests", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.upload_dbt_tests", "macro_sql": "{%- macro upload_dbt_tests(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_tests') %}\n    {% if execute and relation %}\n        {% set tests = graph.nodes.values() | selectattr('resource_type', '==', 'test') %}\n        {% do elementary.upload_artifacts_to_table(relation, tests, elementary.flatten_test, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.7093127, "supported_languages": null}, "macro.elementary.get_dbt_tests_empty_table_query": {"name": "get_dbt_tests_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_dbt_tests_empty_table_query", "macro_sql": "{% macro get_dbt_tests_empty_table_query() %}\n    {% set dbt_tests_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                 ('database_name', 'string'),\n                                                                 ('schema_name', 'string'),\n                                                                 ('name', 'string'),\n                                                                 ('short_name', 'string'),\n                                                                 ('alias', 'string'),\n                                                                 ('test_column_name', 'string'),\n                                                                 ('severity', 'string'),\n                                                                 ('warn_if', 'string'),\n                                                                 ('error_if', 'string'),\n                                                                 ('test_params', 'long_string'),\n                                                                 ('test_namespace', 'string'),\n                                                                 ('tags', 'long_string'),\n                                                                 ('model_tags', 'long_string'),\n                                                                 ('model_owners', 'long_string'),\n                                                                 ('meta', 'long_string'),\n                                                                 ('depends_on_macros', 'long_string'),\n                                                                 ('depends_on_nodes', 'long_string'),\n                                                                 ('parent_model_unique_id', 'string'),\n                                                                 ('description', 'long_string'),\n                                                                 ('package_name', 'string'),\n                                                                 ('type', 'string'),\n                                                                 ('original_path', 'long_string'),\n                                                                 ('path', 'string'),\n                                                                 ('generated_at', 'string'),\n                                                                 ('metadata_hash', 'string'),\n                                                                 ]) %}\n    {{ return(dbt_tests_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.7131987, "supported_languages": null}, "macro.elementary.flatten_test": {"name": "flatten_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.flatten_test", "macro_sql": "{% macro flatten_test(node_dict) %}\n    {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n    {% set test_metadata = elementary.safe_get_with_default(node_dict, 'test_metadata', {}) %}\n    {% set test_namespace = test_metadata.get('namespace') %}\n    {% set test_short_name = elementary.get_test_short_name(node_dict, test_metadata) %}\n\n    {% set default_description = elementary.get_default_description(test_short_name, test_namespace) %}\n\n    {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n    {% set meta_dict = {} %}\n    {% if default_description %}\n        {% set meta_dict =  {'description': default_description} %} \n    {% endif %}\n    {% do meta_dict.update(elementary.safe_get_with_default(node_dict, 'meta', {})) %}\n    {% do meta_dict.update(config_meta_dict) %}\n\n    {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n    {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(config_tags, global_tags) %}\n    {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n    {% set test_model_unique_ids = elementary.get_parent_model_unique_ids_from_test_node(node_dict) %}\n    {% set test_model_nodes = elementary.get_nodes_by_unique_ids(test_model_unique_ids) %}\n    {% set test_models_owners = [] %}\n    {% set test_models_tags = [] %}\n    {% for test_model_node in test_model_nodes %}\n        {% set flatten_test_model_node = elementary.flatten_model(test_model_node) %}\n        {% set test_model_owner = flatten_test_model_node.get('owner') %}\n        {% if test_model_owner %}\n            {% if test_model_owner is string %}\n                {% set owners = test_model_owner.split(',') %}\n                {% for owner in owners %}\n                    {% do test_models_owners.append(owner | trim) %}  \n                {% endfor %}\n            {% elif test_model_owner is iterable %}\n                {% do test_models_owners.extend(test_model_owner) %}\n            {% endif %}\n        {% endif %}\n        {% set test_model_tags = flatten_test_model_node.get('tags') %}\n        {% if test_model_tags and test_model_tags is sequence %}\n            {% do test_models_tags.extend(test_model_tags) %}\n        {% endif %}\n    {% endfor %}\n    {% set test_models_owners = test_models_owners | unique | list %}\n    {% set test_models_tags = test_models_tags | unique | list %}\n\n    {% set test_kwargs = elementary.safe_get_with_default(test_metadata, 'kwargs', {}) %}\n\n    {% set primary_test_model_id = namespace(data=none) %}\n    {% if test_model_unique_ids | length == 1 %}\n        {# if only one parent model for this test, simply use this model #}\n        {% set primary_test_model_id.data = test_model_unique_ids[0] %}\n    {% else %}\n      {% set test_model_jinja = test_kwargs.get('model') %}\n      {% if test_model_jinja %}\n        {% set test_model_name_matches = modules.re.findall(\"ref\\(['\\\"](\\w+)['\\\"]\\)\", test_model_jinja) %}\n        {% if test_model_name_matches | length == 1 %}\n          {% set test_model_name = test_model_name_matches[0] %}\n          {% for test_model_unique_id in test_model_unique_ids %}\n              {% set split_test_model_unique_id = test_model_unique_id.split('.') %}\n              {% if split_test_model_unique_id and split_test_model_unique_id | length > 0 %}\n                  {% set test_node_model_name = split_test_model_unique_id[-1] %}\n                  {% if test_node_model_name == test_model_name %}\n                    {% set primary_test_model_id.data = test_model_unique_id %}\n                  {% endif %}\n              {% endif %}\n          {% endfor %}\n        {% endif %}\n      {% endif %}\n    {% endif %}\n\n    {% set primary_test_model_database = none %}\n    {% set primary_test_model_schema = none %}\n    {%- if primary_test_model_id.data is not none -%}\n        {% set tested_model_node = elementary.get_node(primary_test_model_id.data) %}\n        {%- if tested_model_node -%}\n            {% set primary_test_model_database = tested_model_node.get('database') %}\n            {% set primary_test_model_schema = tested_model_node.get('schema') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if primary_test_model_database is none or primary_test_model_schema is none -%}\n        {# This is mainly here to support singular test cases with multiple referred models, in this case the tested node is being used to extract the db and schema #}\n        {% set primary_test_model_database, primary_test_model_schema = elementary.get_model_database_and_schema_from_test_node(node_dict) %}\n    {%- endif -%}\n\n    {% set original_file_path = node_dict.get('original_file_path') %}\n    {% set flatten_test_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'short_name': test_short_name,\n        'alias': node_dict.get('alias'),\n        'test_column_name': node_dict.get('column_name'),\n        'severity': config_dict.get('severity'),\n        'warn_if': config_dict.get('warn_if'),\n        'error_if': config_dict.get('error_if'),\n        'test_params': test_kwargs,\n        'test_namespace': test_namespace,\n        'tags': elementary.filter_none_and_sort(tags),\n        'model_tags': elementary.filter_none_and_sort(test_models_tags),\n        'model_owners': elementary.filter_none_and_sort(test_models_owners),\n        'meta': meta_dict,\n        'database_name': primary_test_model_database,\n        'schema_name': primary_test_model_schema,\n        'depends_on_macros': elementary.filter_none_and_sort(depends_on_dict.get('macros', [])),\n        'depends_on_nodes': elementary.filter_none_and_sort(depends_on_dict.get('nodes', [])),\n        'parent_model_unique_id': primary_test_model_id.data,\n        'description': meta_dict.get('description'),\n        'name': node_dict.get('name'),\n        'package_name': node_dict.get('package_name'),\n        'type': elementary.get_test_sub_type(original_file_path, test_namespace),\n        'original_path': original_file_path,\n        'compiled_code': elementary.get_compiled_code(node_dict),\n        'path': node_dict.get('path'),\n        'generated_at': elementary.datetime_now_utc_as_string()\n    }%}\n    {% do flatten_test_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_test_metadata_dict)}) %}\n    {{ return(flatten_test_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.get_test_short_name", "macro.elementary.get_default_description", "macro.elementary.union_lists", "macro.elementary.get_parent_model_unique_ids_from_test_node", "macro.elementary.get_nodes_by_unique_ids", "macro.elementary.flatten_model", "macro.elementary.get_node", "macro.elementary.get_model_database_and_schema_from_test_node", "macro.elementary.filter_none_and_sort", "macro.elementary.get_test_sub_type", "macro.elementary.get_compiled_code", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.7324712, "supported_languages": null}, "macro.elementary.get_test_sub_type": {"name": "get_test_sub_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_test_sub_type", "macro_sql": "{% macro get_test_sub_type(test_path, test_namespace = none) %}\n    {% set test_type = 'generic' %}\n    {%- if test_namespace == 'dbt_expectations' -%}\n        {% set test_type = 'expectation' %}\n    {%- elif 'tests/generic' in test_path or 'macros/' in test_path -%}\n        {% set test_type = 'generic' %}\n    {%- elif 'tests/' in test_path -%}\n        {% set test_type = 'singular' %}\n    {%- endif -%}\n    {{- return(test_type) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.7342763, "supported_languages": null}, "macro.elementary.get_test_short_name": {"name": "get_test_short_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_test_short_name", "macro_sql": "{% macro get_test_short_name(node_dict, test_metadata) %}\n    {#\n    If there is a custom name it overrides the dbt auto generated long name.\n    This is a best effort to extract custom names.\n    dbt automated name generation -\n        - Generic test long name starts with the generic name or source_generic\n        - Generic tests from packages long name starts with the package_generic or package_source_generic\n    #}\n\n    {% set generic_test_name = test_metadata.get('name') %} {# 'unique', 'relationships', 'volume_anomalies' etc #}\n    {% set test_package_name = test_metadata.get('namespace') %}\n    {% set test_instance_name = node_dict.get('name') %} {# Test custom name or dbt auto generated long name #}\n    {%- if generic_test_name %}\n        {%- if test_package_name == 'elementary' %}\n            {{ return(generic_test_name) }}\n        {%- elif test_package_name %}\n            {% set test_short_name =\n                generic_test_name if (test_instance_name.startswith(test_package_name + '_' + generic_test_name) or test_instance_name.startswith(test_package_name + '_source_' + generic_test_name))\n                else test_instance_name\n            %}\n        {%- else %}\n            {% set test_short_name =\n                generic_test_name if (test_instance_name.startswith(generic_test_name) or test_instance_name.startswith('source_' + generic_test_name))\n                else test_instance_name\n            %}\n        {%- endif %}\n        {{ return(test_short_name) }}\n    {%- else %}\n        {{ return(test_instance_name) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.7375348, "supported_languages": null}, "macro.elementary.get_default_description": {"name": "get_default_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_default_description", "macro_sql": "{% macro get_default_description(short_name, test_namespace = none) %}\n    {# Relevant for dbt_expectations 0.8.0 #}\n    {% set dbt_expectations_descriptions_map = {\n        \"expect_column_to_exist\": \"Expect the specified column to exist.\",\n        \"expect_row_values_to_have_recent_data\": \"Expect the model to have rows that are at least as recent as the defined interval prior to the current timestamp. Optionally gives the possibility to apply filters on the results.\",\n        \"expect_grouped_row_values_to_have_recent_data\": \"Expect the model to have grouped rows that are at least as recent as the defined interval prior to the current timestamp. Use this to test whether there is recent data for each grouped row defined by `group_by` (which is a list of columns) and a `timestamp_column`. Optionally gives the possibility to apply filters on the results.\",\n        \"expect_table_column_count_to_be_between\": \"Expect the number of columns in a model to be between two values.\",\n        \"expect_table_column_count_to_equal_other_table\": \"Expect the number of columns in a model to match another model.\",\n        \"expect_table_columns_to_not_contain_set\": \"Expect the columns in a model not to contain a given list.\",\n        \"expect_table_columns_to_contain_set\": \"Expect the columns in a model to contain a given list.\",\n        \"expect_table_column_count_to_equal\": \"Expect the number of columns in a model to be equal to `expected_number_of_columns`.\",\n        \"expect_table_columns_to_match_ordered_list\": \"Expect the columns to exactly match a specified list.\",\n        \"expect_table_columns_to_match_set\": \"Expect the columns in a model to match a given list.\",\n        \"expect_table_row_count_to_be_between\": \"Expect the number of rows in a model to be between two values.\",\n        \"expect_table_row_count_to_equal_other_table\": \"Expect the number of rows in a model match another model.\",\n        \"expect_table_row_count_to_equal_other_table_times_factor\": \"Expect the number of rows in a model to match another model times a preconfigured factor.\",\n        \"expect_table_row_count_to_equal\": \"Expect the number of rows in a model to be equal to expected_number_of_rows.\",\n        \"expect_column_values_to_be_unique\": \"Expect each column value to be unique.\",\n        \"expect_column_values_to_not_be_null\": \"Expect column values to not be null.\",\n        \"expect_column_values_to_be_null\": \"Expect column values to be null.\",\n        \"expect_column_values_to_be_of_type\": \"Expect a column to be of a specified data type.\",\n        \"expect_column_values_to_be_in_type_list\": \"Expect a column to be one of a specified type list.\",\n        \"expect_column_values_to_have_consistent_casing\": \"Expect a column to have consistent casing. By setting `display_inconsistent_columns` to true, the number of inconsistent values in the column will be displayed in the terminal whereas the inconsistent values themselves will be returned if the SQL compiled test is run.\",\n        \"expect_column_values_to_be_in_set\": \"Expect each column value to be in a given set.\",\n        \"expect_column_values_to_be_between\": \"Expect each column value to be between two values.\",\n        \"expect_column_values_to_not_be_in_set\": \"Expect each column value not to be in a given set.\",\n        \"expect_column_values_to_be_increasing\": \"Expect column values to be increasing. If `strictly: True`, then this expectation is only satisfied if each consecutive value is strictly increasing \u2013 equal values are treated as failures.\",\n        \"expect_column_values_to_be_decreasing\": \"Expect column values to be decreasing. If `strictly=True`, then this expectation is only satisfied if each consecutive value is strictly decreasing \u2013 equal values are treated as failures.\",\n        \"expect_column_value_lengths_to_be_between\": \"Expect column entries to be strings with length between a min_value value and a max_value value (inclusive).\",\n        \"expect_column_value_lengths_to_equal\": \"Expect column entries to be strings with length equal to the provided value.\",\n        \"expect_column_values_to_match_regex\": 'Expect column entries to be strings that match a given regular expression. Valid matches can be found anywhere in the string, for example \"[at]+\" will identify the following strings as expected: \"cat\", \"hat\", \"aa\", \"a\", and \"t\", and the following strings as unexpected: \"fish\", \"dog\". Optionally, `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.',\n        \"expect_column_values_to_not_match_regex\": 'Expect column entries to be strings that do NOT match a given regular expression. The regex must not match any portion of the provided string. For example, \"[at]+\" would identify the following strings as expected: \"fish\u201d, \"dog\u201d, and the following as unexpected: \"cat\u201d, \"hat\u201d. Optionally, `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.',\n        \"expect_column_values_to_match_regex_list\": 'Expect the column entries to be strings that can be matched to either any of or all of a list of regular expressions. Matches can be anywhere in the string. Optionally, `is_raw` indicates the `regex` patterns are \"raw\" strings and should be escaped. The default is `False`.',\n        \"expect_column_values_to_not_match_regex_list\": 'Expect the column entries to be strings that do not match any of a list of regular expressions. Matches can be anywhere in the string. Optionally, `is_raw` indicates the `regex` patterns are \"raw\" strings and should be escaped. The default is `False`.',\n        \"expect_column_values_to_match_like_pattern\": \"Expect column entries to be strings that match a given SQL like pattern.\",\n        \"expect_column_values_to_not_match_like_pattern\": \"Expect column entries to be strings that do not match a given SQL like pattern.\",\n        \"expect_column_values_to_match_like_pattern_list\": \"Expect the column entries to be strings that match any of a list of SQL like patterns.\",\n        \"expect_column_values_to_not_match_like_pattern_list\": \"Expect the column entries to be strings that do not match any of a list of SQL like patterns.\",\n        \"expect_column_distinct_count_to_equal\": \"Expect the number of distinct column values to be equal to a given value.\",\n        \"expect_column_distinct_count_to_be_greater_than\": \"Expect the number of distinct column values to be greater than a given value.\",\n        \"expect_column_distinct_count_to_be_less_than\": \"Expect the number of distinct column values to be less than a given value.\",\n        \"expect_column_distinct_values_to_be_in_set\": \"Expect the set of distinct column values to be contained by a given set.\",\n        \"expect_column_distinct_values_to_contain_set\": \"Expect the set of distinct column values to contain a given set. In contrast to `expect_column_values_to_be_in_set` this ensures not that all column values are members of the given set but that values from the set must be present in the column.\",\n        \"expect_column_distinct_values_to_equal_set\": \"Expect the set of distinct column values to equal a given set. In contrast to `expect_column_distinct_values_to_contain_set` this ensures not only that a certain set of values are present in the column but that these and only these values are present.\",\n        \"expect_column_distinct_count_to_equal_other_table\": \"Expect the number of distinct column values to be equal to number of distinct values in another model.\",\n        \"expect_column_mean_to_be_between\": \"Expect the column mean to be between a min_value value and a max_value value (inclusive).\",\n        \"expect_column_median_to_be_between\": \"Expect the column median to be between a min_value value and a max_value value (inclusive).\",\n        \"expect_column_quantile_values_to_be_between\": \"Expect specific provided column quantiles to be between provided min_value and max_value values.\",\n        \"expect_column_stdev_to_be_between\": \"Expect the column standard deviation to be between a min_value value and a max_value value. Uses sample standard deviation (normalized by N-1).\",\n        \"expect_column_unique_value_count_to_be_between\": \"Expect the number of unique values to be between a min_value value and a max_value value.\",\n        \"expect_column_proportion_of_unique_values_to_be_between\": \"Expect the proportion of unique values to be between a min_value value and a max_value value. For example, in a column containing [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], there are 4 unique values and 10 total values for a proportion of 0.4.\",\n        \"expect_column_most_common_value_to_be_in_set\": \"Expect the most common value to be within the designated value set.\",\n        \"expect_column_max_to_be_between\": \"Expect the column max to be between a min and max value.\",\n        \"expect_column_min_to_be_between\": \"Expect the column min to be between a min and max value.\",\n        \"expect_column_sum_to_be_between\": \"Expect the column to sum to be between a min and max value.\",\n        \"expect_column_pair_values_A_to_be_greater_than_B\": \"Expect values in column A to be greater than column B.\",\n        \"expect_column_pair_values_to_be_equal\": \"Expect the values in column A to be the same as column B.\",\n        \"expect_column_pair_values_to_be_in_set\": \"Expect paired values from columns A and B to belong to a set of valid pairs. Note: value pairs are expressed as lists within lists\",\n        \"expect_select_column_values_to_be_unique_within_record\": \"Expect the values for each record to be unique across the columns listed. Note that records can be duplicated.\",\n        \"expect_multicolumn_sum_to_equal\": \"Expects that sum of all rows for a set of columns is equal to a specific value\",\n        \"expect_compound_columns_to_be_unique\": \"Expect that the columns are unique together, e.g. a multi-column primary key.\",\n        \"expect_column_values_to_be_within_n_moving_stdevs\": \"A simple anomaly test based on the assumption that differences between periods in a given time series follow a log-normal distribution. Thus, we would expect the logged differences (vs N periods ago) in metric values to be within Z sigma away from a moving average. By applying a list of columns in the `group_by` parameter, you can also test for deviations within a group.\",\n        \"expect_column_values_to_be_within_n_stdevs\": \"Expects (optionally grouped & summed) metric values to be within Z sigma away from the column average\",\n        \"expect_row_values_to_have_data_for_every_n_datepart\": \"Expects model to have values for every grouped `date_part`.\"\n    } %}\n\n    {% set dbt_tests_descriptions_map = {\n        \"not_null\": \"This test validates that there are no `null` values present in a column.\",\n        \"unique\": \"This test validates that there are no duplicate values present in a field.\",\n        \"accepted_values\": \"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\",\n        \"relationships\": 'This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".'\n    } %}\n\n    {% set default_description = none %}\n    {% if test_namespace == 'dbt_expectations' %}\n        {% set default_description = dbt_expectations_descriptions_map.get(short_name) %}\n    {% elif test_namespace == 'dbt' or test_namespace is none %}\n        {% set default_description = dbt_tests_descriptions_map.get(short_name) %}\n    {% endif %}\n\n    {{ return(default_description) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.745558, "supported_languages": null}, "macro.elementary.upload_run_results": {"name": "upload_run_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_run_results.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_run_results.sql", "unique_id": "macro.elementary.upload_run_results", "macro_sql": "{% macro upload_run_results() %}\n    {% set relation = elementary.get_elementary_relation('dbt_run_results') %}\n    {% if execute and relation %}\n        {{ elementary.file_log(\"Uploading run results.\") }}\n        {% do elementary.upload_artifacts_to_table(relation, results, elementary.flatten_run_result, append=True, should_commit=True) %}\n        {{ elementary.file_log(\"Uploaded run results successfully.\") }}\n    {% endif %}\n    {{ return ('') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.file_log", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.7548091, "supported_languages": null}, "macro.elementary.get_dbt_run_results_empty_table_query": {"name": "get_dbt_run_results_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_run_results.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_run_results.sql", "unique_id": "macro.elementary.get_dbt_run_results_empty_table_query", "macro_sql": "{% macro get_dbt_run_results_empty_table_query() %}\n    {% set dbt_run_results_empty_table_query = elementary.empty_table([('model_execution_id', 'long_string'),\n                                                                       ('unique_id', 'long_string'),\n                                                                       ('invocation_id', 'string'),\n                                                                       ('generated_at', 'string'),\n                                                                       ('name', 'long_string'),\n                                                                       ('message', 'long_string'),\n                                                                       ('status', 'string'),\n                                                                       ('resource_type', 'string'),\n                                                                       ('execution_time', 'float'),\n                                                                       ('execute_started_at', 'string'),\n                                                                       ('execute_completed_at', 'string'),\n                                                                       ('compile_started_at', 'string'),\n                                                                       ('compile_completed_at', 'string'),\n                                                                       ('rows_affected', 'bigint'),\n                                                                       ('full_refresh', 'boolean'),\n                                                                       ('compiled_code', 'long_string'),\n                                                                       ('failures', 'bigint'),\n                                                                       ('query_id', 'string'),\n                                                                       ('thread_id', 'string')\n                                                                       ]) %}\n    {{ return(dbt_run_results_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.7578459, "supported_languages": null}, "macro.elementary.flatten_run_result": {"name": "flatten_run_result", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_run_results.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_run_results.sql", "unique_id": "macro.elementary.flatten_run_result", "macro_sql": "{% macro flatten_run_result(run_result) %}\n    {% set run_result_dict = run_result.to_dict() %}\n    {% set node = elementary.safe_get_with_default(run_result_dict, 'node', {}) %}\n    {% set flatten_run_result_dict = {\n        'model_execution_id': elementary.get_node_execution_id(node),\n        'invocation_id': invocation_id,\n        'unique_id': node.get('unique_id'),\n        'name': node.get('name'),\n        'message': run_result_dict.get('message'),\n        'generated_at': elementary.datetime_now_utc_as_string(),\n        'rows_affected': run_result_dict.get('adapter_response', {}).get('rows_affected'),\n        'execution_time': run_result_dict.get('execution_time'),\n        'status': run_result_dict.get('status'),\n        'resource_type': node.get('resource_type'),\n        'execute_started_at': none,\n        'execute_completed_at': none,\n        'compile_started_at': none,\n        'compile_completed_at': none,\n        'full_refresh': flags.FULL_REFRESH,\n        'compiled_code': elementary.get_compiled_model_code_text(node),\n        'failures': run_result_dict.get('failures'),\n        'query_id': run_result_dict.get('adapter_response', {}).get('query_id'),\n        'thread_id': run_result_dict.get('thread_id')\n    }%}\n\n    {% set timings = elementary.safe_get_with_default(run_result_dict, 'timing', []) %}\n    {% if timings %}\n        {% for timing in timings %}\n            {% if timing is mapping %}\n                {% if timing.get('name') == 'execute' %}\n                    {% do flatten_run_result_dict.update({'execute_started_at': timing.get('started_at'), 'execute_completed_at': timing.get('completed_at')}) %}\n                {% elif timing.get('name') == 'compile' %}\n                    {% do flatten_run_result_dict.update({'compile_started_at': timing.get('started_at'), 'compile_completed_at': timing.get('completed_at')}) %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    {{ return(flatten_run_result_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.get_node_execution_id", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_compiled_model_code_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.7646239, "supported_languages": null}, "macro.elementary.upload_source_freshness": {"name": "upload_source_freshness", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "unique_id": "macro.elementary.upload_source_freshness", "macro_sql": "{% macro upload_source_freshness() %}\n  {% if not flags.Path %}\n    {% do exceptions.raise_compiler_error(\"Unable to upload source freshness using this operation on dbt 1.3.2 onwards.\") %}\n  {% endif %}\n\n  {% set source_freshness_results_relation = ref('dbt_source_freshness_results') %}\n  {% set sources_json_path = flags.Path(elementary.get_runtime_config().target_path).joinpath('sources.json') %}\n  {% if not sources_json_path.exists() %}\n    {% do exceptions.raise_compiler_error('Source freshness artifact (sources.json) does not exist, please run `dbt source freshness`.') %}\n  {% endif %}\n  {% set source_freshess_results_dicts = fromjson(sources_json_path.read_text())['results'] %}\n  {% do elementary.upload_artifacts_to_table(source_freshness_results_relation, source_freshess_results_dicts, elementary.flatten_source_freshness, append=True, should_commit=True) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_runtime_config", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.7693002, "supported_languages": null}, "macro.elementary.flatten_source_freshness": {"name": "flatten_source_freshness", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "unique_id": "macro.elementary.flatten_source_freshness", "macro_sql": "{% macro flatten_source_freshness(node_dict) %}\n  {% set compile_timing = {} %}\n  {% set execute_timing = {} %}\n  {% for timing in node_dict['timing'] %}\n    {% if timing['name'] == 'compile' %}\n      {% do compile_timing.update(timing) %}\n    {% elif timing['name'] == 'execute' %}\n      {% do execute_timing.update(timing) %}\n    {% endif %}\n  {% endfor %}\n  {% set flatten_source_freshness_dict = {\n       'source_freshness_execution_id': [invocation_id, node_dict.get('unique_id')] | join('.'),\n       'unique_id': node_dict.get('unique_id'),\n       'max_loaded_at': node_dict.get('max_loaded_at'),\n       'snapshotted_at': node_dict.get('snapshotted_at'),\n       'max_loaded_at_time_ago_in_s': node_dict.get('max_loaded_at_time_ago_in_s'),\n       'status': node_dict.get('status'),\n       'error': node_dict.get('error'),\n       'generated_at': elementary.datetime_now_utc_as_string(),\n       'invocation_id': invocation_id,\n       'compile_started_at': compile_timing.get('started_at'),\n       'compile_completed_at': compile_timing.get('completed_at'),\n       'execute_started_at': execute_timing.get('started_at'),\n       'execute_completed_at': execute_timing.get('completed_at'),\n   } %}\n  {{ return(flatten_source_freshness_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.datetime_now_utc_as_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.7736504, "supported_languages": null}, "macro.elementary.query_test_result_rows": {"name": "query_test_result_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.query_test_result_rows", "macro_sql": "{% macro query_test_result_rows(sample_limit=none) %}\n  {% set query %}\n    with test_results as (\n      {{ sql }}\n    )\n    select * from test_results {% if sample_limit is not none %} limit {{ sample_limit }} {% endif %}\n  {% endset %}\n  {% do return(elementary.agate_to_dicts(elementary.run_query(query))) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.agate_to_dicts", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8131857, "supported_languages": null}, "macro.elementary.cache_elementary_test_results_rows": {"name": "cache_elementary_test_results_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.cache_elementary_test_results_rows", "macro_sql": "{% macro cache_elementary_test_results_rows(elementary_test_results_rows) %}\n  {% do elementary.get_cache(\"elementary_test_results\").update({model.unique_id: elementary_test_results_rows}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_cache"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8139427, "supported_languages": null}, "macro.elementary.handle_anomaly_test": {"name": "handle_anomaly_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.handle_anomaly_test", "macro_sql": "{% macro handle_anomaly_test(flattened_test) %}\n  {% set metrics_tables_cache = elementary.get_cache(\"tables\").get(\"metrics\") %}\n  {% set metrics_table = elementary.get_elementary_test_table(elementary.get_elementary_test_table_name(), 'metrics') %}\n  {% if metrics_table %}\n    {% do metrics_tables_cache.append(metrics_table) %}\n  {% endif %}\n\n  {% set anomaly_scores_groups_rows = {} %}\n  {% set anomaly_scores_rows = elementary.query_test_result_rows() %}\n  {% for anomaly_scores_row in anomaly_scores_rows %}\n    {% set anomaly_scores_group = (anomaly_scores_row.full_table_name, anomaly_scores_row.column_name, anomaly_scores_row.metric_name) %}\n    {% do anomaly_scores_groups_rows.setdefault(anomaly_scores_group, []) %}\n    {% do anomaly_scores_groups_rows[anomaly_scores_group].append(anomaly_scores_row) %}\n  {% endfor %}\n\n  {% set elementary_test_results_rows = [] %}\n  {% for anomaly_scores_group, anomaly_scores_rows in anomaly_scores_groups_rows.items() %}\n    {% do elementary.debug_log(\"Found {} anomaly scores for group {}.\".format(anomaly_scores_rows | length, anomaly_scores_group)) %}\n    {% do elementary_test_results_rows.append(elementary.get_anomaly_test_result_row(flattened_test, anomaly_scores_rows)) %}\n  {% endfor %}\n  {% do elementary.cache_elementary_test_results_rows(elementary_test_results_rows) %}\n\n  {% do context.update({\"sql\": elementary.get_anomaly_query(flattened_test)}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_cache", "macro.elementary.get_elementary_test_table", "macro.elementary.get_elementary_test_table_name", "macro.elementary.query_test_result_rows", "macro.elementary.debug_log", "macro.elementary.get_anomaly_test_result_row", "macro.elementary.cache_elementary_test_results_rows", "macro.elementary.get_anomaly_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8183122, "supported_languages": null}, "macro.elementary.handle_schema_changes_test": {"name": "handle_schema_changes_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.handle_schema_changes_test", "macro_sql": "{% macro handle_schema_changes_test(flattened_test) %}\n  {% set schema_snapshots_tables_cache = elementary.get_cache(\"tables\").get(\"schema_snapshots\") %}\n  {% set schema_snapshots_table = elementary.get_elementary_test_table(elementary.get_elementary_test_table_name(), 'schema_changes') %}\n  {% if schema_snapshots_table %}\n    {% do schema_snapshots_tables_cache.append(schema_snapshots_table) %}\n  {% endif %}\n\n  {% set elementary_test_results_rows = [] %}\n  {% set schema_changes_rows = elementary.query_test_result_rows() %}\n  {% for schema_changes_row in schema_changes_rows %}\n    {% do elementary_test_results_rows.append(elementary.get_schema_changes_test_result_row(flattened_test, schema_changes_row, schema_changes_rows)) %}\n  {% endfor %}\n  {% do elementary.cache_elementary_test_results_rows(elementary_test_results_rows) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_cache", "macro.elementary.get_elementary_test_table", "macro.elementary.get_elementary_test_table_name", "macro.elementary.query_test_result_rows", "macro.elementary.get_schema_changes_test_result_row", "macro.elementary.cache_elementary_test_results_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8207874, "supported_languages": null}, "macro.elementary.handle_dbt_test": {"name": "handle_dbt_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.handle_dbt_test", "macro_sql": "{% macro handle_dbt_test(flattened_test) %}\n  {% set result_rows = elementary.query_test_result_rows(sample_limit=elementary.get_config_var('test_sample_row_count')) %}\n  {% set elementary_test_results_row = elementary.get_dbt_test_result_row(flattened_test, result_rows) %}\n  {% do elementary.cache_elementary_test_results_rows([elementary_test_results_row]) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.query_test_result_rows", "macro.elementary.get_config_var", "macro.elementary.get_dbt_test_result_row", "macro.elementary.cache_elementary_test_results_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8220267, "supported_languages": null}, "macro.elementary.materialize_test": {"name": "materialize_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.materialize_test", "macro_sql": "{% macro materialize_test() %}\n  {% if not elementary.is_elementary_enabled() %}\n    {% do return(none) %}\n  {% endif %}\n\n  {% set flattened_test = elementary.flatten_test(model) %}\n  {% set test_type = elementary.get_test_type(flattened_test) %}\n  {% set test_type_handler_map = {\n    \"anomaly_detection\": elementary.handle_anomaly_test,\n    \"schema_change\": elementary.handle_schema_changes_test,\n    \"dbt_test\": elementary.handle_dbt_test\n  } %}\n  {% set test_type_handler = test_type_handler_map.get(test_type) %}\n  {% if not test_type_handler %}\n    {% do exceptions.raise_compiler_error(\"Unknown test type: {}\".format(test_type)) %}\n  {% endif %}\n  {% do test_type_handler(flattened_test) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.is_elementary_enabled", "macro.elementary.flatten_test", "macro.elementary.get_test_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8244817, "supported_languages": null}, "macro.elementary.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.materialization_test_default", "macro_sql": "{% materialization test, default %}\n  {% do elementary.materialize_test() %}\n  {{ return(dbt.materialization_test_default()) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.elementary.materialize_test", "macro.dbt.materialization_test_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8252084, "supported_languages": ["sql"]}, "macro.elementary.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.materialization_test_snowflake", "macro_sql": "{% materialization test, adapter=\"snowflake\" %}\n  {% do elementary.materialize_test() %}\n  {%- if dbt.materialization_test_snowflake -%}\n    {{ return(dbt.materialization_test_snowflake()) }}\n  {%- else -%}\n    {{ return(dbt.materialization_test_default()) }}\n  {%- endif -%}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.elementary.materialize_test", "macro.elementary.materialization_test_snowflake", "macro.dbt.materialization_test_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8262973, "supported_languages": ["sql"]}, "macro.elementary.get_anomaly_test_result_row": {"name": "get_anomaly_test_result_row", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_anomaly_test_result_row", "macro_sql": "{% macro get_anomaly_test_result_row(flattened_test, anomaly_scores_rows) %}\n  {% set latest_row = anomaly_scores_rows[-1] %}\n  {% set full_table_name = elementary.insensitive_get_dict_value(latest_row, 'full_table_name') %}\n  {% set test_params = elementary.insensitive_get_dict_value(flattened_test, 'test_params') %}\n  {% set sensitivity = elementary.insensitive_get_dict_value(test_params, 'sensitivity') or elementary.get_config_var('anomaly_sensitivity') %}\n  {% set backfill_days = elementary.insensitive_get_dict_value(test_params, 'backfill_days') or elementary.get_config_var('backfill_days') %}\n  {% set timestamp_column = elementary.insensitive_get_dict_value(test_params, 'timestamp_column') %}\n  {% set parent_model_unique_id = elementary.insensitive_get_dict_value(flattened_test, 'parent_model_unique_id') %}\n  {% if not timestamp_column %}\n    {% set parent_model_node = elementary.get_node(parent_model_unique_id) %}\n    {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, parent_model_node) %}\n  {% endif %}\n  {% do test_params.update({'sensitivity': sensitivity, 'timestamp_column': timestamp_column, 'backfill_days': backfill_days}) %}\n  {% set column_name = elementary.insensitive_get_dict_value(latest_row, 'column_name') %}\n  {% set metric_name = elementary.insensitive_get_dict_value(latest_row, 'metric_name') %}\n  {% set backfill_days = elementary.insensitive_get_dict_value(test_params, 'backfill_days') %}\n  {% set backfill_period = \"'-\" ~ backfill_days ~ \"'\" %}\n  {% set test_unique_id = elementary.insensitive_get_dict_value(latest_row, 'test_unique_id') %}\n  {% set has_anomaly_score = elementary.insensitive_get_dict_value(latest_row, 'anomaly_score') is not none %}\n  {% if not has_anomaly_score %}\n    {% do elementary.edr_log(\"Not enough data to calculate anomaly scores on `{}`\".format(test_unique_id)) %}\n  {% endif %}\n  {%- set test_results_query -%}\n      select * from ({{ sql }}) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper({{ elementary.const_as_string(full_table_name) }}) and\n        metric_name = {{ elementary.const_as_string(metric_name) }}\n        {%- if column_name %}\n          and upper(column_name) = upper({{ elementary.const_as_string(column_name) }})\n        {%- endif %}\n  {%- endset -%}\n  {% set test_results_description %}\n      {% if has_anomaly_score %}\n          {{ elementary.insensitive_get_dict_value(latest_row, 'anomaly_description') }}\n      {% else %}\n          Not enough data to calculate anomaly score.\n      {% endif %}\n  {% endset %}\n  {% set failures = namespace(data=0) %}\n  {% set filtered_anomaly_scores_rows = [] %}\n  {% for row in anomaly_scores_rows %}\n    {% if row.anomaly_score is not none %}\n      {% do filtered_anomaly_scores_rows.append(row) %}\n      {% if row.is_anomalous %}\n        {% set failures.data = failures.data + 1 %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set test_result_dict = {\n      'id': elementary.insensitive_get_dict_value(latest_row, 'id'),\n      'data_issue_id': elementary.insensitive_get_dict_value(latest_row, 'metric_id'),\n      'model_unique_id': parent_model_unique_id,\n      'column_name': column_name,\n      'test_type': 'anomaly_detection',\n      'test_sub_type': metric_name,\n      'test_results_description': test_results_description,\n      'other': elementary.insensitive_get_dict_value(latest_row, 'anomalous_value'),\n      'test_results_query': test_results_query,\n      'test_params': test_params,\n      'result_rows': filtered_anomaly_scores_rows,\n      'failures': failures.data\n  } %}\n  {% set elementary_test_row = elementary.get_dbt_test_result_row(flattened_test) %}\n  {% do elementary_test_row.update(test_result_dict) %}\n  {% do return(elementary_test_row) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.insensitive_get_dict_value", "macro.elementary.get_config_var", "macro.elementary.get_node", "macro.elementary.get_timestamp_column", "macro.elementary.edr_log", "macro.elementary.const_as_string", "macro.elementary.get_dbt_test_result_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8373265, "supported_languages": null}, "macro.elementary.get_schema_changes_test_result_row": {"name": "get_schema_changes_test_result_row", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_schema_changes_test_result_row", "macro_sql": "{% macro get_schema_changes_test_result_row(flattened_test, schema_changes_row, schema_changes_rows) %}\n  {% set elementary_test_row = elementary.get_dbt_test_result_row(flattened_test, schema_changes_rows) %}\n  {% do elementary_test_row.update(schema_changes_row) %}\n  {% do return(elementary_test_row) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_dbt_test_result_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8384464, "supported_languages": null}, "macro.elementary.get_dbt_test_result_row": {"name": "get_dbt_test_result_row", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_dbt_test_result_row", "macro_sql": "{% macro get_dbt_test_result_row(flattened_test, result_rows=none) %}\n    {% if not result_rows %}\n      {% set result_rows = [] %}\n    {% endif %}\n\n    {% set test_execution_id = elementary.get_node_execution_id(flattened_test) %}\n    {% set parent_model_unique_id = elementary.insensitive_get_dict_value(flattened_test, 'parent_model_unique_id') %}\n    {% set parent_model = elementary.get_node(parent_model_unique_id) %}\n    {% set parent_model_name = elementary.get_table_name_from_node(parent_model) %}\n    {% set test_result_dict = {\n        'id': test_execution_id,\n        'data_issue_id': none,\n        'test_execution_id': test_execution_id,\n        'test_unique_id': elementary.insensitive_get_dict_value(flattened_test, 'unique_id'),\n        'model_unique_id': parent_model_unique_id,\n        'detected_at': elementary.insensitive_get_dict_value(flattened_test, 'generated_at'),\n        'database_name': elementary.insensitive_get_dict_value(flattened_test, 'database_name'),\n        'schema_name': elementary.insensitive_get_dict_value(flattened_test, 'schema_name'),\n        'table_name': parent_model_name,\n        'column_name': elementary.insensitive_get_dict_value(flattened_test, 'test_column_name'),\n        'test_type': elementary.get_test_type(flattened_test),\n        'test_sub_type': elementary.insensitive_get_dict_value(flattened_test, 'type'),\n        'other': none,\n        'owners': elementary.insensitive_get_dict_value(flattened_test, 'model_owners'),\n        'tags': elementary.insensitive_get_dict_value(flattened_test, 'model_tags') + elementary.insensitive_get_dict_value(flattened_test, 'tags'),\n        'test_results_query': elementary.get_compiled_code(flattened_test),\n        'test_name': elementary.insensitive_get_dict_value(flattened_test, 'name'),\n        'test_params': elementary.insensitive_get_dict_value(flattened_test, 'test_params'),\n        'severity': elementary.insensitive_get_dict_value(flattened_test, 'severity'),\n        'test_short_name': elementary.insensitive_get_dict_value(flattened_test, 'short_name'),\n        'test_alias': elementary.insensitive_get_dict_value(flattened_test, 'alias'),\n        'result_rows': result_rows\n    }%}\n    {% do return(test_result_dict) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_node_execution_id", "macro.elementary.insensitive_get_dict_value", "macro.elementary.get_node", "macro.elementary.get_table_name_from_node", "macro.elementary.get_test_type", "macro.elementary.get_compiled_code"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8441474, "supported_languages": null}, "macro.elementary.get_columns_from_information_schema": {"name": "get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.get_columns_from_information_schema", "macro_sql": "{% macro get_columns_from_information_schema(schema_tuple) %}\n    {{ return(adapter.dispatch('get_columns_from_information_schema', 'elementary')(schema_tuple)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__get_columns_from_information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8459194, "supported_languages": null}, "macro.elementary.default__get_columns_from_information_schema": {"name": "default__get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.default__get_columns_from_information_schema", "macro_sql": "{% macro default__get_columns_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n    {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from {{ schema_relation.information_schema('COLUMNS') }}\n    where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8470771, "supported_languages": null}, "macro.elementary.redshift__get_columns_from_information_schema": {"name": "redshift__get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.redshift__get_columns_from_information_schema", "macro_sql": "{% macro redshift__get_columns_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from svv_columns\n        where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8477056, "supported_languages": null}, "macro.elementary.postgres__get_columns_from_information_schema": {"name": "postgres__get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.postgres__get_columns_from_information_schema", "macro_sql": "{% macro postgres__get_columns_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from information_schema.columns\n        where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.848307, "supported_languages": null}, "macro.elementary.get_tables_from_information_schema": {"name": "get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.get_tables_from_information_schema", "macro_sql": "{% macro get_tables_from_information_schema(schema_tuple) %}\n    {{ return(adapter.dispatch('get_tables_from_information_schema','elementary')(schema_tuple)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__get_tables_from_information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.85122, "supported_languages": null}, "macro.elementary.default__get_tables_from_information_schema": {"name": "default__get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.default__get_tables_from_information_schema", "macro_sql": "{% macro default__get_tables_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n    {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n\n    with information_schema_tables as (\n\n        select\n            upper(table_catalog) as database_name,\n            upper(table_schema) as schema_name,\n            upper(table_name) as table_name\n        from {{ schema_relation.information_schema('TABLES') }}\n        where upper(table_schema) = upper('{{ schema_name }}')\n\n    ),\n\n    information_schema_schemata as (\n\n        select\n            upper(catalog_name) as database_name,\n            upper(schema_name) as schema_name\n        from {{ schema_relation.information_schema('SCHEMATA') }}\n        where upper(schema_name) = upper('{{ schema_name }}')\n\n    )\n\n    select\n        case when tables.table_name is not null\n            then {{ elementary.full_table_name('TABLES') }}\n        else null end as full_table_name,\n        upper(schemas.database_name || '.' || schemas.schema_name) as full_schema_name,\n        schemas.database_name as database_name,\n        schemas.schema_name as schema_name,\n        tables.table_name\n    from information_schema_tables as tables\n    full outer join information_schema_schemata as schemas\n    on (tables.database_name = schemas.database_name and tables.schema_name = schemas.schema_name)\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.852872, "supported_languages": null}, "macro.elementary.redshift__get_tables_from_information_schema": {"name": "redshift__get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.redshift__get_tables_from_information_schema", "macro_sql": "{% macro redshift__get_tables_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    with information_schema_tables as (\n\n        select\n            upper(table_catalog) as database_name,\n            upper(table_schema) as schema_name,\n            upper(table_name) as table_name\n        from svv_tables\n            where upper(table_schema) = upper('{{ schema_name }}') and upper(table_catalog) = upper('{{ database_name }}')\n\n    )\n\n    select\n        {{ elementary.full_table_name() }} as full_table_name,\n        upper(database_name || '.' || schema_name) as full_schema_name,\n        database_name,\n        schema_name,\n        table_name\n    from information_schema_tables\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8536987, "supported_languages": null}, "macro.elementary.postgres__get_tables_from_information_schema": {"name": "postgres__get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.postgres__get_tables_from_information_schema", "macro_sql": "{% macro postgres__get_tables_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    with information_schema_tables as (\n\n        select\n            upper(table_catalog) as database_name,\n            upper(table_schema) as schema_name,\n            upper(table_name) as table_name\n        from information_schema.tables\n            where upper(table_schema) = upper('{{ schema_name }}') and upper(table_catalog) = upper('{{ database_name }}')\n\n    )\n\n    select\n        {{ elementary.full_table_name() }} as full_table_name,\n        upper(database_name || '.' || schema_name) as full_schema_name,\n        database_name,\n        schema_name,\n        table_name\n    from information_schema_tables\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8545194, "supported_languages": null}, "macro.elementary.get_configured_schemas_from_graph": {"name": "get_configured_schemas_from_graph", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/get_configured_schemas_from_graph.sql", "original_file_path": "macros/edr/system/configuration/get_configured_schemas_from_graph.sql", "unique_id": "macro.elementary.get_configured_schemas_from_graph", "macro_sql": "{% macro get_configured_schemas_from_graph() %}\n    {% set configured_schemas = [] %}\n    {% if execute %}\n        {% for test_node in graph.nodes.values() | selectattr('resource_type', '==', 'test') %}\n            {% set test_metadata = test_node.get('test_metadata') %}\n            {% if test_metadata %}\n                {% set test_name = test_metadata.get('name') %}\n                {% if test_name.startswith('schema_changes') %}\n                    {% set test_depends_on_unique_ids = test_node.depends_on.nodes %}\n                    {% set depends_on_nodes = elementary.get_nodes_by_unique_ids(test_depends_on_unique_ids) %}\n                    {% for node in depends_on_nodes %}\n                        {% set node_package_name = node.get('package_name') %}\n                        {% if node_package_name != 'elementary' %}\n                            {% if adapter.check_schema_exists(node['database'], node['schema']) %}\n                                {% do configured_schemas.append((node['database'], node['schema'])) %}\n                            {% endif %}\n                        {% endif %}\n                    {% endfor %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    {{ return(configured_schemas | unique | list ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_nodes_by_unique_ids"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8600976, "supported_languages": null}, "macro.elementary.is_elementary_enabled": {"name": "is_elementary_enabled", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/is_elementary_enabled.sql", "original_file_path": "macros/edr/system/configuration/is_elementary_enabled.sql", "unique_id": "macro.elementary.is_elementary_enabled", "macro_sql": "{% macro is_elementary_enabled() %}\n  {% do return(\"elementary\" in graph) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.860883, "supported_languages": null}, "macro.elementary.on_run_end": {"name": "on_run_end", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/hooks/on_run_end.sql", "original_file_path": "macros/edr/system/hooks/on_run_end.sql", "unique_id": "macro.elementary.on_run_end", "macro_sql": "{% macro on_run_end() %}\n  {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n  {% if not execute or edr_cli_run %}\n    {{ return('') }}\n  {% endif %}\n\n  {% if not elementary.get_config_var('disable_dbt_artifacts_autoupload') %}\n    {{ elementary.upload_dbt_artifacts() }}\n  {% endif %}\n\n  {% if not elementary.get_config_var('disable_run_results') %}\n    {{ elementary.upload_run_results() }}\n  {% endif %}\n\n  {% if flags.WHICH in ['test', 'build'] and not elementary.get_config_var('disable_tests_results') %}\n    {{ elementary.handle_tests_results() }}\n  {% endif %}\n\n  {% if not elementary.get_config_var('disable_dbt_invocation_autoupload') %}\n    {{ elementary.upload_dbt_invocation() }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.upload_dbt_artifacts", "macro.elementary.upload_run_results", "macro.elementary.handle_tests_results", "macro.elementary.upload_dbt_invocation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8641841, "supported_languages": null}, "macro.elementary.on_run_start": {"name": "on_run_start", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/hooks/on_run_start.sql", "original_file_path": "macros/edr/system/hooks/on_run_start.sql", "unique_id": "macro.elementary.on_run_start", "macro_sql": "{% macro on_run_start() %}\n  {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n  {% if not execute or edr_cli_run %}\n    {{ return('') }}\n  {% endif %}\n\n  {% do elementary.init_elementary_graph() %}\n\n  {% if flags.WHICH in ['test', 'build'] %}\n    {{ elementary.create_elementary_tests_schema() }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.init_elementary_graph", "macro.elementary.create_elementary_tests_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.866051, "supported_languages": null}, "macro.elementary.complete_buckets_cte": {"name": "complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.complete_buckets_cte", "macro_sql": "{% macro complete_buckets_cte(metric_properties, min_bucket_start, max_bucket_end) %}\n    {%- set time_bucket = metric_properties.time_bucket %}\n    {%- set bucket_end_expr = elementary.edr_timeadd(time_bucket.period, time_bucket.count, 'edr_bucket_start') %}\n    {%- set min_bucket_start_expr = elementary.edr_cast_as_timestamp(min_bucket_start) %}\n    {%- set max_bucket_end_expr = elementary.edr_cast_as_timestamp(max_bucket_end) %}\n    {{ adapter.dispatch('complete_buckets_cte','elementary')(time_bucket, bucket_end_expr, min_bucket_start_expr, max_bucket_end_expr) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_timeadd", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.snowflake__complete_buckets_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8774292, "supported_languages": null}, "macro.elementary.spark__complete_buckets_cte": {"name": "spark__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.spark__complete_buckets_cte", "macro_sql": "{% macro spark__complete_buckets_cte(time_bucket, bucket_end_expr, min_bucket_start_expr, max_bucket_end_expr) %}\n    {%- set complete_buckets_cte %}\n        select\n          edr_bucket_start,\n          {{ bucket_end_expr }} as edr_bucket_end\n        from (select explode(sequence({{ min_bucket_start_expr }}, {{ max_bucket_end_expr }}, interval {{ time_bucket.count }} {{ time_bucket.period }})) as edr_bucket_start)\n        where {{ bucket_end_expr }} <= {{ max_bucket_end_expr }}\n    {%- endset %}\n    {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.878659, "supported_languages": null}, "macro.elementary.snowflake__complete_buckets_cte": {"name": "snowflake__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.snowflake__complete_buckets_cte", "macro_sql": "{% macro snowflake__complete_buckets_cte(time_bucket, bucket_end_expr, min_bucket_start_expr, max_bucket_end_expr) -%}\n    {%- set complete_buckets_cte %}\n        with timestamps as (\n          select {{ min_bucket_start_expr }} as edr_bucket_start\n          union all\n          select {{ bucket_end_expr }} as next_bucket\n          from timestamps\n          where next_bucket < {{ max_bucket_end_expr }}\n        )\n        select\n          edr_bucket_start,\n          {{ bucket_end_expr }} as edr_bucket_end\n        from timestamps\n        where {{ bucket_end_expr }} <= {{ max_bucket_end_expr }}\n    {%- endset %}\n    {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8797786, "supported_languages": null}, "macro.elementary.bigquery__complete_buckets_cte": {"name": "bigquery__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.bigquery__complete_buckets_cte", "macro_sql": "{% macro bigquery__complete_buckets_cte(time_bucket, bucket_end_expr, min_bucket_start_expr, max_bucket_end_expr) %}\n\n    {%- if time_bucket.period | lower in ['second', 'minute', 'hour', 'day'] %}\n        {%- set complete_buckets_cte %}\n            select\n              edr_bucket_start,\n              {{ bucket_end_expr }} as edr_bucket_end\n            from unnest(generate_timestamp_array({{ min_bucket_start_expr }}, {{ max_bucket_end_expr }}, interval {{ time_bucket.count }} {{ time_bucket.period }})) as edr_bucket_start\n            where {{ bucket_end_expr }} <= {{ max_bucket_end_expr }}\n        {%- endset %}\n    {%- elif time_bucket.period | lower in ['week', 'month', 'quarter', 'year'] %}\n        {%- set complete_buckets_cte %}\n            select\n              {{ elementary.edr_cast_as_timestamp('edr_bucket_start') }} as edr_bucket_start,\n              {{ elementary.edr_cast_as_timestamp(bucket_end_expr) }} as edr_bucket_end\n            from unnest(generate_date_array({{ elementary.edr_cast_as_date(min_bucket_start_expr) }}, {{ elementary.edr_cast_as_date(max_bucket_end_expr) }}, interval {{ time_bucket.count }} {{ time_bucket.period }})) as edr_bucket_start\n            where {{ elementary.edr_cast_as_timestamp(bucket_end_expr) }} <= {{ max_bucket_end_expr }}\n        {%- endset %}\n    {%- else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported time bucket period: \".format(time_bucket.period)) }}\n    {%- endif %}\n\n    {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_cast_as_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.883519, "supported_languages": null}, "macro.elementary.redshift__complete_buckets_cte": {"name": "redshift__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.redshift__complete_buckets_cte", "macro_sql": "{% macro redshift__complete_buckets_cte(time_bucket, bucket_end_expr, min_bucket_start_expr, max_bucket_end_expr) %}\n    {%- set complete_buckets_cte %}\n      with integers as (\n        select (row_number() over (order by 1)) - 1 as num\n        from pg_catalog.pg_class\n        limit {{ elementary.edr_datediff(min_bucket_start_expr, max_bucket_end_expr, time_bucket.period) }} / {{ time_bucket.count }} + 1\n      )\n      select\n        {{ min_bucket_start_expr }} + (num * interval '{{ time_bucket.count }} {{ time_bucket.period }}') as edr_bucket_start,\n        {{ min_bucket_start_expr }} + ((num + 1) * interval '{{ time_bucket.count }} {{ time_bucket.period }}') as edr_bucket_end\n      from integers\n      where edr_bucket_end <= {{ max_bucket_end_expr }}\n    {%- endset %}\n    {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8851614, "supported_languages": null}, "macro.elementary.postgres__complete_buckets_cte": {"name": "postgres__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.postgres__complete_buckets_cte", "macro_sql": "{% macro postgres__complete_buckets_cte(time_bucket, bucket_end_expr, min_bucket_start_expr, max_bucket_end_expr) %}\n    {%- set complete_buckets_cte %}\n        select\n          edr_bucket_start,\n          {{ bucket_end_expr }} as edr_bucket_end\n        from generate_series({{ min_bucket_start_expr }}, {{ max_bucket_end_expr }}, interval '{{ time_bucket.count }} {{ time_bucket.period }}') edr_bucket_start\n        where {{ bucket_end_expr }} <= {{ max_bucket_end_expr }}\n    {%- endset %}\n    {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8863518, "supported_languages": null}, "macro.elementary.empty_elementary_test_results": {"name": "empty_elementary_test_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_elementary_test_results", "macro_sql": "{% macro empty_elementary_test_results() %}\n    {{ elementary.empty_table([\n    ('id','long_string'),\n    ('data_issue_id','string'),\n    ('test_execution_id','long_string'),\n    ('test_unique_id','long_string'),\n    ('model_unique_id','long_string'),\n    ('invocation_id', 'string'),\n    ('detected_at','timestamp'),\n    ('database_name','string'),\n    ('schema_name','string'),\n    ('table_name','string'),\n    ('column_name','string'),\n    ('test_type','string'),\n    ('test_sub_type','string'),\n    ('test_results_description','long_string'),\n    ('owners','string'),\n    ('tags','string'),\n    ('test_results_query','long_string'),\n    ('other','string'),\n    ('test_name','long_string'),\n    ('test_params','long_string'),\n    ('severity','string'),\n    ('status','string'),\n    ('failures', 'bigint'),\n    ('test_short_name', 'string'),\n    ('test_alias', 'string'),\n    ('result_rows', 'long_string')\n    ]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.8989472, "supported_languages": null}, "macro.elementary.empty_dbt_source_freshness_results": {"name": "empty_dbt_source_freshness_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_dbt_source_freshness_results", "macro_sql": "{% macro empty_dbt_source_freshness_results() %}\n    {{ elementary.empty_table([\n    ('source_freshness_execution_id','string'),\n    ('unique_id','string'),\n    ('max_loaded_at','string'),\n    ('snapshotted_at','string'),\n    ('generated_at', 'string'),\n    ('max_loaded_at_time_ago_in_s','float'),\n    ('status','string'),\n    ('error','string'),\n    ('compile_started_at', 'string'),\n    ('compile_completed_at', 'string'),\n    ('execute_started_at', 'string'),\n    ('execute_completed_at', 'string'),\n    ('invocation_id', 'string')\n    ]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.900967, "supported_languages": null}, "macro.elementary.empty_data_monitoring_metrics": {"name": "empty_data_monitoring_metrics", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_data_monitoring_metrics", "macro_sql": "{% macro empty_data_monitoring_metrics() %}\n    {{ elementary.empty_table([('id','string'),\n                               ('full_table_name','string'),\n                               ('column_name','string'),\n                               ('metric_name','string'),\n                               ('metric_value','float'),\n                               ('source_value','string'),\n                               ('bucket_start','timestamp'),\n                               ('bucket_end','timestamp'),\n                               ('bucket_duration_hours','int'),\n                               ('updated_at','timestamp'),\n                               ('dimension','string'),\n                               ('dimension_value','string'),\n                               ('metric_properties','string')]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9029415, "supported_languages": null}, "macro.elementary.empty_schema_columns_snapshot": {"name": "empty_schema_columns_snapshot", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_schema_columns_snapshot", "macro_sql": "{% macro empty_schema_columns_snapshot() %}\n    {{ elementary.empty_table([('column_state_id','string'),('full_column_name','string'),('full_table_name','string'),('column_name','string'),('data_type','string'),('is_new','boolean'),('detected_at','timestamp')]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9041932, "supported_languages": null}, "macro.elementary.empty_column_monitors_cte": {"name": "empty_column_monitors_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_column_monitors_cte", "macro_sql": "{% macro empty_column_monitors_cte() %}\n    {%- set column_monitors_list = elementary.get_agg_column_monitors() %}\n    {%- set columns_definition = [('column_name', 'string'), ('bucket', 'timestamp')] %}\n    {%- for monitor in column_monitors_list %}\n        {%- do columns_definition.append((monitor,'int'))-%}\n    {%- endfor %}\n    {{ elementary.empty_table(columns_definition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_agg_column_monitors", "macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9056795, "supported_languages": null}, "macro.elementary.empty_table": {"name": "empty_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_table", "macro_sql": "{% macro empty_table(column_name_and_type_list) %}\n\n    {%- set empty_table_query -%}\n        with empty_table as (\n            select\n            {% for column in column_name_and_type_list %}\n                {{ elementary.empty_column(column[0], column[1]) }} {%- if not loop.last -%},{%- endif %}\n            {%- endfor %}\n            )\n        select * from empty_table\n        where 1 = 0\n    {%- endset -%}\n\n    {{- return(empty_table_query)-}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.906987, "supported_languages": null}, "macro.elementary.empty_column": {"name": "empty_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_column", "macro_sql": "{% macro empty_column(column_name, data_type) %}\n\n    {%- set dummy_values = elementary.dummy_values() %}\n\n    {%- if data_type == 'boolean' %}\n        cast ({{ dummy_values['boolean'] }} as {{ elementary.edr_type_bool()}}) as {{ column_name }}\n    {%- elif data_type == 'timestamp' -%}\n        cast('{{ dummy_values['timestamp'] }}' as {{ elementary.edr_type_timestamp() }}) as {{ column_name }}\n    {%- elif data_type == 'int' %}\n        cast({{ dummy_values['int'] }} as {{ elementary.edr_type_int() }}) as {{ column_name }}\n    {%- elif data_type == 'bigint' %}\n        cast({{ dummy_values['bigint'] }} as {{ elementary.edr_type_bigint() }}) as {{ column_name }}\n    {%- elif data_type == 'float' %}\n        cast({{ dummy_values['float'] }} as {{ elementary.edr_type_float() }}) as {{ column_name }}\n    {%- elif data_type == 'long_string' %}\n        cast('{{ dummy_values['long_string'] }}' as {{ elementary.edr_type_long_string() }}) as {{ column_name }}\n    {%- else %}\n        cast('{{ dummy_values['string'] }}' as {{ elementary.edr_type_string() }}) as {{ column_name }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.dummy_values", "macro.elementary.edr_type_bool", "macro.elementary.edr_type_timestamp", "macro.elementary.edr_type_int", "macro.elementary.edr_type_bigint", "macro.elementary.edr_type_float", "macro.elementary.edr_type_long_string", "macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.910652, "supported_languages": null}, "macro.elementary.dummy_values": {"name": "dummy_values", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.dummy_values", "macro_sql": "{% macro dummy_values() %}\n\n    {%- set dummy_values = {\n     'string': \"dummy_string\",\n     'long_string': \"this_is_just_a_long_dummy_string\",\n     'boolean': 'True',\n     'int': 123456789,\n     'bigint': 31474836478,\n     'float': 123456789.99,\n     'timestamp': \"2091-02-17\"\n    } %}\n\n    {{ return(dummy_values) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9119358, "supported_languages": null}, "macro.elementary.full_table_name": {"name": "full_table_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_table_name", "macro_sql": "{% macro full_table_name(alias) -%}\n    {% if alias is defined %}{%- set alias_dot = alias ~ '.' %}{% endif %}\n    upper({{ alias_dot }}database_name || '.' || {{ alias_dot }}schema_name || '.' || {{ alias_dot }}table_name)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9173756, "supported_languages": null}, "macro.elementary.full_schema_name": {"name": "full_schema_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_schema_name", "macro_sql": "{% macro full_schema_name() -%}\n    upper(database_name || '.' || schema_name)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9176939, "supported_languages": null}, "macro.elementary.full_column_name": {"name": "full_column_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_column_name", "macro_sql": "{% macro full_column_name() -%}\n    upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9179897, "supported_languages": null}, "macro.elementary.full_name_split": {"name": "full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_name_split", "macro_sql": "{% macro full_name_split(part_name) %}\n    {{ adapter.dispatch('full_name_split','elementary')(part_name) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__full_name_split"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9185758, "supported_languages": null}, "macro.elementary.default__full_name_split": {"name": "default__full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.default__full_name_split", "macro_sql": "{% macro default__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 0 -%}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 1 -%}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 2 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split(full_table_name,'.')[{{ part_index }}],'\"') as {{ part_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9200246, "supported_languages": null}, "macro.elementary.bigquery__full_name_split": {"name": "bigquery__full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.bigquery__full_name_split", "macro_sql": "{% macro bigquery__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 0 %}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 1 %}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 2 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split(full_table_name,'.')[OFFSET({{ part_index }})],'\"') as {{ part_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9215245, "supported_languages": null}, "macro.elementary.postgres__full_name_split": {"name": "postgres__full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.postgres__full_name_split", "macro_sql": "{% macro postgres__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 1 -%}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 2 -%}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 3 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split_part(full_table_name,'.',{{ part_index }}),'\"') as {{ part_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.922973, "supported_languages": null}, "macro.elementary.relation_to_full_name": {"name": "relation_to_full_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.relation_to_full_name", "macro_sql": "{% macro relation_to_full_name(relation) %}\n    {%- if relation.database %}\n        {%- set full_table_name = relation.database | upper ~'.'~ relation.schema | upper ~'.'~ relation.identifier | upper %}\n    {%- else %}\n    {# Databricks doesn't always have a database #}\n        {%- set full_table_name = relation.schema | upper ~'.'~ relation.identifier | upper %}\n    {%- endif %}\n    {{ return(full_table_name) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9243712, "supported_languages": null}, "macro.elementary.model_node_to_full_name": {"name": "model_node_to_full_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.model_node_to_full_name", "macro_sql": "{% macro model_node_to_full_name(model_node) %}\n    {% set identifier = model_node.identifier or model_node.alias %}\n    {%- if model_node.database %}\n        {%- set full_table_name = model_node.database | upper ~'.'~ model_node.schema | upper ~'.'~ identifier | upper %}\n    {%- else %}\n    {# Databricks doesn't always have a database #}\n        {%- set full_table_name = model_node.schema | upper ~'.'~ identifier | upper %}\n    {%- endif %}\n    {{ return(full_table_name) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9261956, "supported_languages": null}, "macro.elementary.configured_schemas_from_graph_as_tuple": {"name": "configured_schemas_from_graph_as_tuple", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.configured_schemas_from_graph_as_tuple", "macro_sql": "{% macro configured_schemas_from_graph_as_tuple() %}\n\n    {%- set configured_schema_tuples = elementary.get_configured_schemas_from_graph() %}\n    {%- set schemas_list = [] %}\n\n    {%- for configured_schema_tuple in configured_schema_tuples %}\n        {%- set database_name, schema_name = configured_schema_tuple %}\n        {%- set full_schema_name = database_name | upper ~ '.' ~ schema_name | upper %}\n        {%- do schemas_list.append(full_schema_name) -%}\n    {%- endfor %}\n\n    {% set schemas_tuple = elementary.strings_list_to_tuple(schemas_list) %}\n    {{ return(schemas_tuple) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.strings_list_to_tuple"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9279115, "supported_languages": null}, "macro.elementary.get_compiled_model_code_text": {"name": "get_compiled_model_code_text", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_compiled_model_code_text.sql", "original_file_path": "macros/edr/system/system_utils/get_compiled_model_code_text.sql", "unique_id": "macro.elementary.get_compiled_model_code_text", "macro_sql": "{% macro get_compiled_model_code_text(node) %}\n    {% set should_collect_model_sql = elementary.get_config_var('collect_model_sql') %}\n    {% if not should_collect_model_sql %}\n        {{ return(none) }}\n    {% endif %}\n\n    {% set model_sql_max_size = elementary.get_config_var('model_sql_max_size') %}\n    {% set long_string_size = elementary.get_config_var('long_string_size') %}\n    {% set model_sql_size_limit = [model_sql_max_size, long_string_size] | min %}\n    {% set model_code = elementary.get_compiled_code(node) %}\n\n    {# Seeds do not have compiled code. #}\n    {% if not model_code %}\n        {{ return(none) }}\n    {% endif %}\n\n    {% if model_sql_size_limit < model_code | length %}\n        {{ return('Model code is too long - over ' ~ model_sql_size_limit ~ ' bytes') }}\n    {% else %}\n        {{ return(model_code) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_compiled_code"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.931231, "supported_languages": null}, "macro.elementary.get_config_var": {"name": "get_config_var", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.get_config_var", "macro_sql": "{% macro get_config_var(var_name) %}\n  {% set default_config = elementary.get_default_config() %}\n  {% set var_value = var(var_name, default_config.get(var_name)) %}\n  {% if var_value is string %}\n    {% if var_value.lower() == \"true\" %}\n      {% do return(true) %}\n    {% elif var_value.lower() == \"false\" %}\n      {% do return(false) %}\n    {% endif %}\n  {% endif %}\n  {% do return(var_value) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_default_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9344392, "supported_languages": null}, "macro.elementary.get_default_config": {"name": "get_default_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.get_default_config", "macro_sql": "{% macro get_default_config(var_name) %}\n    {{ return(adapter.dispatch('get_default_config', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.default__get_default_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9350724, "supported_languages": null}, "macro.elementary.default__get_default_config": {"name": "default__get_default_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.default__get_default_config", "macro_sql": "{%- macro default__get_default_config() -%}\n{# We use this macro to define and call vars, as the global vars defined in dbt_project.yml\n   of the package are not accesible at on-run-start and on-run-end #}\n  {% set default_config = {\n    'days_back': 14,\n    'anomaly_sensitivity': 3,\n    'backfill_days': 2,\n    'tests_schema_name': '',\n    'debug_logs': false,\n    'disable_warn_alerts': false,\n    'disable_model_alerts': false,\n    'disable_test_alerts': false,\n    'disable_source_freshness_alerts': false,\n    'disable_run_results': false,\n    'disable_tests_results': false,\n    'disable_dbt_artifacts_autoupload': false,\n    'disable_dbt_invocation_autoupload': false,\n    'disable_skipped_model_alerts': true,\n    'disable_skipped_test_alerts': true,\n    'dbt_artifacts_chunk_size': 5000,\n    'test_sample_row_count': 5,\n    'edr_cli_run': false,\n    'max_int': 2147483647,\n    'custom_run_started_at': none,\n    'edr_monitors': elementary.get_default_monitors(),\n    'long_string_size': 65535,\n    'collect_model_sql': true,\n    'model_sql_max_size': 10240,\n    'query_max_size': 1000000,\n    'insert_rows_method': 'max_query_size',\n    'upload_artifacts_method': 'diff',\n    'project_name': none,\n    'elementary_full_refresh': false,\n    'min_training_set_size': 14,\n    'cache_artifacts': true,\n    'anomaly_direction': 'both',\n    'store_result_rows_in_own_table': true\n  } %}\n  {{- return(default_config) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_default_monitors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9384322, "supported_languages": null}, "macro.elementary.bigquery__get_default_config": {"name": "bigquery__get_default_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.bigquery__get_default_config", "macro_sql": "{%- macro bigquery__get_default_config() -%}\n    {% set default_config = elementary.default__get_default_config() %}\n    {% do default_config.update({'query_max_size': 250000}) %}\n    {{- return(default_config) -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.elementary.default__get_default_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9393282, "supported_languages": null}, "macro.elementary.get_elementary_package_version": {"name": "get_elementary_package_version", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_elementary_package_version.sql", "original_file_path": "macros/edr/system/system_utils/get_elementary_package_version.sql", "unique_id": "macro.elementary.get_elementary_package_version", "macro_sql": "{% macro get_elementary_package_version() %}\n  {% set conf = elementary.get_runtime_config() %}\n  {% do return(conf.dependencies[\"elementary\"].version) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_runtime_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9402618, "supported_languages": null}, "macro.elementary.get_first_env_var": {"name": "get_first_env_var", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_first_env_var.sql", "original_file_path": "macros/edr/system/system_utils/get_first_env_var.sql", "unique_id": "macro.elementary.get_first_env_var", "macro_sql": "{% macro get_first_env_var(var_names) %}\n    {% for var_name in var_names %}\n        {% set value = env_var(var_name, \"\") %}\n        {% if value %}\n            {{ return(value) }}\n        {% endif %}\n    {% endfor %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9417543, "supported_languages": null}, "macro.elementary.get_run_started_at": {"name": "get_run_started_at", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_run_started_at.sql", "original_file_path": "macros/edr/system/system_utils/get_run_started_at.sql", "unique_id": "macro.elementary.get_run_started_at", "macro_sql": "{% macro get_run_started_at() %}\n    {% set custom_run_started_at = elementary.get_config_var('custom_run_started_at') %}\n    {% if custom_run_started_at %}\n        {# dbt run_started_at is fromtype datetime, so we convert the given custom time to be datetime as well. #}\n        {{ return(modules.datetime.datetime.fromisoformat(custom_run_started_at)) }}\n    {% else %}\n        {{ return(run_started_at) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.943203, "supported_languages": null}, "macro.elementary.get_runtime_config": {"name": "get_runtime_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_runtime_config.sql", "original_file_path": "macros/edr/system/system_utils/get_runtime_config.sql", "unique_id": "macro.elementary.get_runtime_config", "macro_sql": "{% macro get_runtime_config() %}\n  {{ return(builtins.ref.config) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9437897, "supported_languages": null}, "macro.elementary.get_test_argument": {"name": "get_test_argument", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_test_argument.sql", "original_file_path": "macros/edr/system/system_utils/get_test_argument.sql", "unique_id": "macro.elementary.get_test_argument", "macro_sql": "{% macro get_test_argument(argument_name, value=none) %}\n  {% if value %}\n    {{ return(value) }}\n  {% else %}\n    {{ return(elementary.get_config_var(argument_name)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9449606, "supported_languages": null}, "macro.elementary.edr_log": {"name": "edr_log", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "unique_id": "macro.elementary.edr_log", "macro_sql": "{% macro edr_log(msg, info=True) %}\n    {%- if execute %}\n        {% do log('Elementary: ' ~ msg, info=info) %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9473505, "supported_languages": null}, "macro.elementary.file_log": {"name": "file_log", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "unique_id": "macro.elementary.file_log", "macro_sql": "{% macro file_log(msg) %}\n    {% if execute %}\n        {% do elementary.edr_log(msg, info=false) %}\n        {% do elementary.debug_log(msg) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_log", "macro.elementary.debug_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9482675, "supported_languages": null}, "macro.elementary.debug_log": {"name": "debug_log", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "unique_id": "macro.elementary.debug_log", "macro_sql": "{% macro debug_log(msg) %}\n    {%- if execute %}\n        {% set debug_logs_enabled = elementary.get_config_var('debug_logs') %}\n        {% if debug_logs_enabled %}\n            {{ elementary.edr_log(msg) }}\n        {% endif %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9493222, "supported_languages": null}, "macro.elementary.test_log": {"name": "test_log", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "unique_id": "macro.elementary.test_log", "macro_sql": "{% macro test_log(msg_type, table_name, column_name=none) %}\n    {%- if column_name %}\n        {%- set start = 'Started running data monitors on: ' ~ table_name ~ ' ' ~ column_name %}\n        {%- set end = 'Finished running data monitors on: ' ~ table_name ~ ' ' ~ column_name %}\n    {%- else %}\n        {%- set start = 'Started running data monitors on: ' ~ table_name %}\n        {%- set end = 'Finished running data monitors on: ' ~ table_name %}\n    {%- endif %}\n\n    {%- if msg_type == 'start' %}\n        {% do elementary.edr_log(start) %}\n    {%- elif msg_type == 'end' %}\n        {% do elementary.edr_log(end) %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.951368, "supported_languages": null}, "macro.elementary.no_results_query": {"name": "no_results_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/no_results_query.sql", "original_file_path": "macros/edr/system/system_utils/no_results_query.sql", "unique_id": "macro.elementary.no_results_query", "macro_sql": "{% macro no_results_query() %}\n    with nothing as (select 1 as num)\n    select * from nothing where num = 2\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9518, "supported_languages": null}, "macro.elementary.get_time_format": {"name": "get_time_format", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.get_time_format", "macro_sql": "{% macro get_time_format() %}\n  {% do return(\"%Y-%m-%d %H:%M:%S\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9528987, "supported_languages": null}, "macro.elementary.run_started_at_as_string": {"name": "run_started_at_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.run_started_at_as_string", "macro_sql": "{% macro run_started_at_as_string() %}\n    {% do return(elementary.get_run_started_at().strftime(elementary.get_time_format())) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_run_started_at", "macro.elementary.get_time_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.953549, "supported_languages": null}, "macro.elementary.datetime_now_utc_as_string": {"name": "datetime_now_utc_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.datetime_now_utc_as_string", "macro_sql": "{% macro datetime_now_utc_as_string() %}\n    {% do return(modules.datetime.datetime.utcnow().strftime(elementary.get_time_format())) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_time_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9542532, "supported_languages": null}, "macro.elementary.current_timestamp_column": {"name": "current_timestamp_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.current_timestamp_column", "macro_sql": "{% macro current_timestamp_column() %}\n    cast ({{elementary.edr_current_timestamp_in_utc()}} as {{ elementary.edr_type_timestamp() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_current_timestamp_in_utc", "macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.954791, "supported_languages": null}, "macro.elementary.datetime_now_utc_as_timestamp_column": {"name": "datetime_now_utc_as_timestamp_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.datetime_now_utc_as_timestamp_column", "macro_sql": "{% macro datetime_now_utc_as_timestamp_column() %}\n    cast ('{{ elementary.datetime_now_utc_as_string() }}' as {{ elementary.edr_type_timestamp() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.datetime_now_utc_as_string", "macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9553368, "supported_languages": null}, "macro.elementary.test_python": {"name": "test_python", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/python.sql", "original_file_path": "macros/edr/tests/python.sql", "unique_id": "macro.elementary.test_python", "macro_sql": "{% test python(model, code_macro, macro_args, where_expression) %}\n  {{ config(fail_calc = 'fail_count') }}\n\n  {% if not execute %}\n    {% do return(none) %}\n  {% endif %}\n\n  {% if not code_macro %}\n    {% do exceptions.raise_compiler_error('A `code_macro` must be provided to a Python test.') %}\n  {% endif %}\n  {% if not macro_args %}\n    {% set macro_args = {} %}\n  {% endif %}\n\n  {% set test_args = kwargs %}\n  {% set test_node = context.model %}\n  {% set model_relation = model.quote(false, false, false) %}\n  {% set elementary_database_name, elementary_schema_name = elementary.get_package_database_and_schema() %}\n  {% set output_table = api.Relation.create(database=elementary_database_name, schema=elementary_schema_name,\n    identifier='pytest_tmp__' ~ test_node.alias).quote(false, false, false) %}\n\n  {# This affects where resources needed for python execution (e.g. stored procedures) are created.\n     By default, dbt uses the audit schema (adds _dbt__test_audit to the model's schema).\n     We prefer to change this behavior and use Elementary's database and schema instead (this also guarantees the test\n     will work for sources).\n     #}\n  {% do test_node.update({'database': elementary_database_name, 'schema': elementary_schema_name}) %}\n\n  {% do test_node.config.update(test_args) %}\n\n  {% if code_macro is string %}\n    {% set user_py_code_macro = context[code_macro] %}\n  {% else %}\n    {% set user_py_code_macro = code_macro %}\n  {% endif %}\n\n  {% if not user_py_code_macro %}\n    {% do exceptions.raise_compiler_error('Unable to find the macro `' ~ code_macro ~ '`.') %}\n  {% endif %}\n  {% set user_py_code = user_py_code_macro(macro_args) %}\n  {% set compiled_py_code = adapter.dispatch('compile_py_code', 'elementary')(model_relation, user_py_code,\n                                                                              output_table, where_expression, code_type='test') %}\n\n  {% do elementary.run_python(test_node, compiled_py_code) %}\n  select fail_count from {{ output_table }}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.snowflake__compile_py_code", "macro.elementary.run_python"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9627585, "supported_languages": null}, "macro.elementary.test_all_columns_anomalies": {"name": "test_all_columns_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_all_columns_anomalies.sql", "original_file_path": "macros/edr/tests/test_all_columns_anomalies.sql", "unique_id": "macro.elementary.test_all_columns_anomalies", "macro_sql": "{% test all_columns_anomalies(model, column_anomalies, exclude_prefix, exclude_regexp, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket, anomaly_direction='both', seasonality=none) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_anomaly_detection') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    -- depends_on: {{ ref('dbt_run_results') }}\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% if not time_bucket %}\n          {% set time_bucket = elementary.get_default_time_bucket() %}\n        {% endif %}\n\n        {%- set test_table_name = elementary.get_elementary_test_table_name() %}\n        {{- elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n        {#- creates temp relation for test metrics -#}\n        {%- set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n        {%- set empty_table_query = elementary.empty_data_monitoring_metrics() %}\n        {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', empty_table_query) %}\n\n        {#- get all columns configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {%- if not model_relation %}\n            {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n        {%- endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n        {% do elementary.validate_seasonality_parameter(seasonality=seasonality, time_bucket=time_bucket, timestamp_column=timestamp_column) %}\n        {% set days_back = elementary.get_days_back(seasonality=seasonality) %}\n        {% set metric_properties = elementary.construct_metric_properties_dict(timestamp_column=timestamp_column,\n                                                                               where_expression=where_expression,\n                                                                               time_bucket=time_bucket) %}\n\n\n\n\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, metric_properties.timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ metric_properties.timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, metric_properties.timestamp_column, timestamp_column_data_type) %}\n        {{- elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {% if metric_properties.timestamp_column and not is_timestamp %}\n          {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(metric_properties.timestamp_column)) %}\n        {% endif %}\n\n        {%- set column_objs_and_monitors = elementary.get_all_column_obj_and_monitors(model_relation, column_anomalies) -%}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {#- execute table monitors and write to temp test table -#}\n        {%- set monitors = [] %}\n        {%- if column_objs_and_monitors | length > 0 %}\n            {{- elementary.test_log('start', full_table_name, 'all columns') }}\n            {%- for column_obj_and_monitors in column_objs_and_monitors %}\n                {%- set column_obj = column_obj_and_monitors['column'] %}\n                {%- set column_monitors = column_obj_and_monitors['monitors'] %}\n                {%- set column_name = column_obj.name -%}\n                {%- set ignore_column = elementary.should_ignore_column(column_name, exclude_regexp, exclude_prefix) -%}\n                {%- if not ignore_column -%}\n                    {%- do monitors.extend(column_monitors) -%}\n                    {% if timestamp_column and is_timestamp %}\n                        {%- set min_bucket_start, max_bucket_end = elementary.get_test_buckets_min_and_max(model_relation=model,\n                                                                                                backfill_days=backfill_days,\n                                                                                                days_back=days_back,\n                                                                                                monitors=column_monitors,\n                                                                                                column_name=column_name,\n                                                                                                metric_properties=metric_properties) %}\n                    {%- endif %}\n                    {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n                    {{ elementary.test_log('start', full_table_name, column_name) }}\n                    {%- set column_monitoring_query = elementary.column_monitoring_query(model_relation, min_bucket_start, max_bucket_end, days_back, column_obj, column_monitors, metric_properties) %}\n                    {%- do run_query(elementary.insert_as_select(temp_table_relation, column_monitoring_query)) -%}\n                {%- else -%}\n                    {{ elementary.debug_log('column ' ~ column_name ~ ' is excluded') }}\n                {%- endif -%}\n            {%- endfor %}\n        {%- endif %}\n        {%- set all_columns_monitors = monitors | unique | list %}\n        {#- query if there is an anomaly in recent metrics -#}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {% do elementary.validate_directional_parameter(anomaly_direction) %}\n        {%- set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation,\n                                                                           model_graph_node,\n                                                                           sensitivity,\n                                                                           backfill_days,\n                                                                           days_back,\n                                                                           all_columns_monitors,\n                                                                           columns_only=true,\n                                                                           seasonality=seasonality,\n                                                                           metric_properties=metric_properties,\n                                                                           anomaly_direction=anomaly_direction) %}\n\n        {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n\n        {{- elementary.test_log('end', full_table_name, 'all columns') }}\n\n        {{ elementary.get_read_anomaly_scores_query() }}\n\n    {%- else %}\n\n        {#- test must run an sql query -#}\n        {{- elementary.no_results_query() }}\n\n    {%- endif %}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.empty_data_monitoring_metrics", "macro.elementary.create_elementary_test_table", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.validate_seasonality_parameter", "macro.elementary.get_days_back", "macro.elementary.construct_metric_properties_dict", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_all_column_obj_and_monitors", "macro.elementary.get_test_argument", "macro.elementary.test_log", "macro.elementary.should_ignore_column", "macro.elementary.get_test_buckets_min_and_max", "macro.elementary.column_monitoring_query", "macro.elementary.run_query", "macro.elementary.insert_as_select", "macro.elementary.validate_directional_parameter", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_read_anomaly_scores_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9848626, "supported_languages": null}, "macro.elementary.should_ignore_column": {"name": "should_ignore_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_all_columns_anomalies.sql", "original_file_path": "macros/edr/tests/test_all_columns_anomalies.sql", "unique_id": "macro.elementary.should_ignore_column", "macro_sql": "\n\n{%- macro should_ignore_column(column_name, exclude_regexp, exclude_prefix) -%}\n    {%- set regex_module = modules.re -%}\n    {%- if exclude_regexp -%}\n        {%- set is_match = regex_module.match(exclude_regexp, column_name, regex_module.IGNORECASE) %}\n        {%- if is_match -%}\n            {{ return(True) }}\n        {%- endif -%}\n    {%- endif -%}\n    {% if exclude_prefix %}\n        {%- set exclude_regexp = '^' ~ exclude_prefix ~ '.*' %}\n        {%- set is_match = regex_module.match(exclude_regexp, column_name, regex_module.IGNORECASE) %}\n        {%- if is_match -%}\n            {{ return(True) }}\n        {%- endif -%}\n    {%- endif -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749443.9871843, "supported_languages": null}, "macro.elementary.test_column_anomalies": {"name": "test_column_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_column_anomalies.sql", "original_file_path": "macros/edr/tests/test_column_anomalies.sql", "unique_id": "macro.elementary.test_column_anomalies", "macro_sql": "{% test column_anomalies(model, column_name, column_anomalies, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket,anomaly_direction='both', seasonality=none) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_anomaly_detection') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    -- depends_on: {{ ref('dbt_run_results') }}\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% if not time_bucket %}\n          {% set time_bucket = elementary.get_default_time_bucket() %}\n        {% endif %}\n\n        {% set test_table_name = elementary.get_elementary_test_table_name() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n        {#- creates temp relation for test metrics -#}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n        {#- get column configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n        {% endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n        {% do elementary.validate_seasonality_parameter(seasonality=seasonality, time_bucket=time_bucket, timestamp_column=timestamp_column) %}\n        {% set days_back = elementary.get_days_back(seasonality=seasonality) %}\n        {% set metric_properties = elementary.construct_metric_properties_dict(timestamp_column=timestamp_column,\n                                                                               where_expression=where_expression,\n                                                                               time_bucket=time_bucket) %}\n\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, metric_properties.timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ metric_properties.timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, metric_properties.timestamp_column, timestamp_column_data_type) %}\n        {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {% if metric_properties.timestamp_column and not is_timestamp %}\n          {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(metric_properties.timestamp_column)) %}\n        {% endif %}\n\n        {%- set column_obj_and_monitors = elementary.get_column_obj_and_monitors(model, column_name, column_anomalies) -%}\n        {%- if not column_obj_and_monitors -%}\n            {{ exceptions.raise_compiler_error(\"Unable to find column `{}` in `{}`\".format(column_name, full_table_name)) }}\n        {%- endif -%}\n        {%- set column_monitors = column_obj_and_monitors['monitors'] -%}\n        {%- set column_obj = column_obj_and_monitors['column'] -%}\n        {{ elementary.debug_log('column_monitors - ' ~ column_monitors) }}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {% if timestamp_column and is_timestamp %}\n            {%- set min_bucket_start, max_bucket_end = elementary.get_test_buckets_min_and_max(model_relation=model,\n                                                                                    backfill_days=backfill_days,\n                                                                                    days_back=days_back,\n                                                                                    monitors=column_monitors,\n                                                                                    column_name=column_name,\n                                                                                    metric_properties=metric_properties) %}\n        {%- endif %}\n        {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n        {#- execute table monitors and write to temp test table -#}\n        {{ elementary.test_log('start', full_table_name, column_name) }}\n        {%- set column_monitoring_query = elementary.column_monitoring_query(model_relation,\n                                                                             min_bucket_start,\n                                                                             max_bucket_end,\n                                                                             days_back,\n                                                                             column_obj,\n                                                                             column_monitors,\n                                                                             metric_properties) %}\n        {{ elementary.debug_log('column_monitoring_query - \\n' ~ column_monitoring_query) }}\n        {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', column_monitoring_query) %}\n\n\n        {#- calculate anomaly scores for metrics -#}\n        {%- set temp_table_name = elementary.relation_to_full_name(temp_table_relation) %}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {% do elementary.validate_directional_parameter(anomaly_direction) %}\n        {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation,\n                                                                          model_graph_node,\n                                                                          sensitivity,\n                                                                          backfill_days,\n                                                                          days_back,\n                                                                          column_monitors,\n                                                                          column_name,\n                                                                          seasonality=seasonality,\n                                                                          metric_properties=metric_properties,\n                                                                          anomaly_direction=anomaly_direction) %}\n\n        {{ elementary.debug_log('anomaly_score_query - \\n' ~ anomaly_scores_query) }}\n        {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n        {{ elementary.test_log('end', full_table_name, column_name) }}\n\n        {{ elementary.get_read_anomaly_scores_query() }}\n\n    {%- else %}\n\n        {#- test must run an sql query -#}\n        {{ elementary.no_results_query() }}\n\n    {%- endif %}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.validate_seasonality_parameter", "macro.elementary.get_days_back", "macro.elementary.construct_metric_properties_dict", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_column_obj_and_monitors", "macro.elementary.get_test_argument", "macro.elementary.get_test_buckets_min_and_max", "macro.elementary.test_log", "macro.elementary.column_monitoring_query", "macro.elementary.create_elementary_test_table", "macro.elementary.validate_directional_parameter", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_read_anomaly_scores_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.009035, "supported_languages": null}, "macro.elementary.test_dimension_anomalies": {"name": "test_dimension_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_dimension_anomalies.sql", "original_file_path": "macros/edr/tests/test_dimension_anomalies.sql", "unique_id": "macro.elementary.test_dimension_anomalies", "macro_sql": "{% test dimension_anomalies(model, dimensions, where_expression, timestamp_column, sensitivity, backfill_days, time_bucket, anomaly_direction='both', seasonality=none) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_anomaly_detection') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    -- depends_on: {{ ref('dbt_run_results') }}\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% if not dimensions %}\n            {{ exceptions.raise_compiler_error('Dimension anomalies test must get \"dimensions\" as a parameter!') }}\n        {% endif %}\n        {% if not time_bucket %}\n          {% set time_bucket = elementary.get_default_time_bucket() %}\n        {% endif %}\n\n        {% set test_table_name = elementary.get_elementary_test_table_name() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n        {#- creates temp relation for test metrics -#}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n        {#- get table configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n        {% endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n        {% do elementary.validate_seasonality_parameter(seasonality=seasonality, time_bucket=time_bucket, timestamp_column=timestamp_column) %}\n        {% set days_back = elementary.get_days_back(seasonality=seasonality) %}\n        {% set metric_properties = elementary.construct_metric_properties_dict(timestamp_column=timestamp_column,\n                                                                               where_expression=where_expression,\n                                                                               time_bucket=time_bucket,\n                                                                               dimensions=dimensions) %}\n\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, metric_properties.timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ metric_properties.timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, metric_properties.timestamp_column, timestamp_column_data_type) %}\n        {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {% if metric_properties.timestamp_column and not is_timestamp %}\n          {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(metric_properties.timestamp_column)) %}\n        {% endif %}\n\n        {% set dimensions_str = elementary.join_list(dimensions, ', ') %}\n        {{ elementary.debug_log('dimensions - ' ~ dimensions) }}\n        {{ elementary.debug_log('where_expression - ' ~ metric_properties.where_expression) }}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {% if timestamp_column and is_timestamp %}\n            {%- set min_bucket_start, max_bucket_end = elementary.get_test_buckets_min_and_max(model_relation=model,\n                                                                                    backfill_days=backfill_days,\n                                                                                    days_back=days_back,\n                                                                                    metric_properties=metric_properties) %}\n        {%- endif %}\n        {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n        {#- execute table monitors and write to temp test table -#}\n        {{ elementary.test_log('start', full_table_name) }}\n        {%- set dimension_monitoring_query = elementary.dimension_monitoring_query(model_relation, dimensions, min_bucket_start, max_bucket_end, days_back, metric_properties) %}\n        {{ elementary.debug_log('dimension_monitoring_query - \\n' ~ dimension_monitoring_query) }}\n\n        {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', dimension_monitoring_query) %}\n\n\n        {#- calculate anomaly scores for metrics -#}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {% do elementary.validate_directional_parameter(anomaly_direction) %}\n        {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation,\n                                                                          model_graph_node,\n                                                                          sensitivity,\n                                                                          backfill_days,\n                                                                          days_back,\n                                                                          ['dimension'],\n                                                                          dimensions=dimensions,\n                                                                          seasonality=seasonality,\n                                                                          metric_properties=metric_properties,\n                                                                          anomaly_direction=anomaly_direction) %}\n\n        {{ elementary.debug_log('dimension monitors anomaly scores query - \\n' ~ anomaly_scores_query) }}\n        {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n        {{ elementary.test_log('end', full_table_name) }}\n\n        {{ elementary.get_anomaly_query() }}\n\n    {% else %}\n\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n\n    {% endif %}\n\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.validate_seasonality_parameter", "macro.elementary.get_days_back", "macro.elementary.construct_metric_properties_dict", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.join_list", "macro.elementary.get_test_argument", "macro.elementary.get_test_buckets_min_and_max", "macro.elementary.test_log", "macro.elementary.dimension_monitoring_query", "macro.elementary.create_elementary_test_table", "macro.elementary.validate_directional_parameter", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_anomaly_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0281403, "supported_languages": null}, "macro.elementary.test_event_freshness_anomalies": {"name": "test_event_freshness_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_event_freshness_anomalies.sql", "original_file_path": "macros/edr/tests/test_event_freshness_anomalies.sql", "unique_id": "macro.elementary.test_event_freshness_anomalies", "macro_sql": "{% test event_freshness_anomalies(model, event_timestamp_column, update_timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n  {% if execute %}\n    {%- if not event_timestamp_column -%}\n      {%- do exceptions.raise_compiler_error('event_timestamp_column must be specified for the event freshness test!') -%}\n    {%- endif -%}\n\n    {%- set event_timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, event_timestamp_column) -%}\n    {%- if not elementary.get_is_column_timestamp(model_relation, event_timestamp_column, event_timestamp_column_data_type) -%}\n      {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(event_timestamp_column)) %}\n    {%- endif -%}\n  {% endif %}\n\n  {{ elementary.test_table_anomalies(\n      model=model,\n      table_anomalies=[\"event_freshness\"],\n      event_timestamp_column=event_timestamp_column,\n      timestamp_column=update_timestamp_column,\n      sensitivity=sensitivity,\n      backfill_days=backfill_days,\n      where_expression=where_expression,\n      time_bucket=time_bucket\n    )\n  }}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.test_table_anomalies"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0313325, "supported_languages": null}, "macro.elementary.test_freshness_anomalies": {"name": "test_freshness_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_freshness_anomalies.sql", "original_file_path": "macros/edr/tests/test_freshness_anomalies.sql", "unique_id": "macro.elementary.test_freshness_anomalies", "macro_sql": "{% test freshness_anomalies(model, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n  {{ elementary.test_table_anomalies(\n      model=model,\n      table_anomalies=[\"freshness\"],\n      freshness_column=none,\n      timestamp_column=timestamp_column,\n      sensitivity=sensitivity,\n      backfill_days=backfill_days,\n      where_expression=where_expression,\n      time_bucket=time_bucket\n    )\n  }}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.test_table_anomalies"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0326755, "supported_languages": null}, "macro.elementary.test_json_schema": {"name": "test_json_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_json_schema.sql", "original_file_path": "macros/edr/tests/test_json_schema.sql", "unique_id": "macro.elementary.test_json_schema", "macro_sql": "{% test json_schema(model, column_name, where_expression) %}\n    {{ config(fail_calc = 'fail_count') }}\n\n    {% if not execute %}\n        {% do return(none) %}\n    {% endif %}\n    {% if not elementary.column_exists_in_relation(model, column_name) %}\n        {% do exceptions.raise_compiler_error(\"Column '{}' does not exist in node '{}'!\".format(column_name, model.name)) %}\n    {% endif %}\n    {% if not kwargs %}\n        {% do exceptions.raise_compiler_error(\"A json schema must be supplied as a part of the test!\") %}\n    {% endif %}\n\n    {{ elementary.test_python(model, elementary.json_schema_python_test, {'column_name': column_name, 'json_schema': kwargs}, where_expression,\n                              packages=['jsonschema']) }}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.column_exists_in_relation", "macro.elementary.test_python"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0366416, "supported_languages": null}, "macro.elementary.json_schema_python_test": {"name": "json_schema_python_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_json_schema.sql", "original_file_path": "macros/edr/tests/test_json_schema.sql", "unique_id": "macro.elementary.json_schema_python_test", "macro_sql": "{% macro json_schema_python_test(args) %}\nimport json\nimport jsonschema\n\ndef is_valid_json(val, json_schema):\n    try:\n        jsonschema.validate(json.loads(val), json_schema)\n        return True\n    except (json.JSONDecodeError, jsonschema.ValidationError):\n        return False\n\ndef get_column_name_in_df(df, column_name):\n    matching = [col for col in df.columns if col.lower() == column_name.lower()]\n    if len(matching) > 1:\n        # Case matters, switch to case-sensitive match\n        matching = [col for col in df.columns if col == column_name]\n\n    if len(matching) == 0:\n        raise Exception(\"No column with the name: {}\".format(col))\n    return matching[0]\n\ndef test(model_df, ref, session):\n    raw_json_schema = r\"\"\"{{ args.json_schema if args.json_schema is string else tojson(args.json_schema) }}\"\"\"\n    json_schema = json.loads(raw_json_schema)\n\n    model_df = model_df.toPandas()\n    column_name = get_column_name_in_df(model_df, \"{{ args.column_name }}\")\n    model_df[\"is_valid_json\"] = model_df[column_name].apply(lambda val: is_valid_json(val, json_schema))\n\n    return model_df[model_df.is_valid_json == False]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0375617, "supported_languages": null}, "macro.elementary.test_schema_changes": {"name": "test_schema_changes", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_schema_changes.sql", "original_file_path": "macros/edr/tests/test_schema_changes.sql", "unique_id": "macro.elementary.test_schema_changes", "macro_sql": "{% test schema_changes(model) %}\n    -- depends_on: {{ ref('schema_columns_snapshot') }}\n    -- depends_on: {{ ref('filtered_information_schema_columns') }}\n\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% set test_table_name = elementary.get_elementary_test_table_name() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n        {# creates temp relation for schema columns info #}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n        {# get table configuration #}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n        {% endif %}\n\n        {#- query current schema and write to temp test table -#}\n        {{ elementary.edr_log('Started testing schema changes on:' ~ full_table_name) }}\n        {%- set column_snapshot_query = elementary.get_columns_snapshot_query(full_table_name) %}\n        {{ elementary.debug_log('column_snapshot_query - \\n' ~ column_snapshot_query) }}\n\n        {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'schema_changes', column_snapshot_query) %}\n\n        {# query if there were schema changes since last execution #}\n        {% set schema_changes_alert_query = elementary.get_columns_changes_from_last_run_query(full_table_name, temp_table_relation) %}\n        {{ elementary.debug_log('schema_changes_alert_query - \\n' ~ schema_changes_alert_query) }}\n        {% set alerts_temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'schema_changes_alerts', schema_changes_alert_query) %}\n        {# return schema changes query as standard test query #}\n        select * from {{ alerts_temp_table_relation }}\n\n    {% else %}\n\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n\n    {% endif %}\n\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.edr_log", "macro.elementary.get_columns_snapshot_query", "macro.elementary.create_elementary_test_table", "macro.elementary.get_columns_changes_from_last_run_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0434022, "supported_languages": null}, "macro.elementary.test_schema_changes_from_baseline": {"name": "test_schema_changes_from_baseline", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_schema_changes_from_baseline.sql", "original_file_path": "macros/edr/tests/test_schema_changes_from_baseline.sql", "unique_id": "macro.elementary.test_schema_changes_from_baseline", "macro_sql": "{% test schema_changes_from_baseline(model, fail_on_added=False, enforce_types=False) %}\n    -- depends_on: {{ ref('schema_columns_snapshot') }}\n    -- depends_on: {{ ref('filtered_information_schema_columns') }}\n\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% set test_table_name = elementary.get_elementary_test_table_name() %}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n        {# Get baseline and store it in a table #}\n        {% set baseline_columns = elementary.get_model_baseline_columns(model, enforce_types=enforce_types) %}\n        {% set baseline_table_relation = elementary.create_model_baseline_table(baseline_columns, database_name, schema_name, test_table_name) %}\n\n        {% set full_table_name = elementary.relation_to_full_name(model) %}\n        {% set changes_from_baseline_query = elementary.get_column_changes_from_baseline_query(full_table_name, baseline_table_relation, include_added=fail_on_added) %}\n        {{ changes_from_baseline_query }}\n    {% else %}\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n    {% endif %}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_elementary_test_table_name", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.get_model_baseline_columns", "macro.elementary.create_model_baseline_table", "macro.elementary.relation_to_full_name", "macro.elementary.get_column_changes_from_baseline_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0472622, "supported_languages": null}, "macro.elementary.test_table_anomalies": {"name": "test_table_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_table_anomalies.sql", "original_file_path": "macros/edr/tests/test_table_anomalies.sql", "unique_id": "macro.elementary.test_table_anomalies", "macro_sql": "{% test table_anomalies(model, table_anomalies, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket, event_timestamp_column=none, freshness_column=none, seasonality=none, anomaly_direction='both') %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_anomaly_detection') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    -- depends_on: {{ ref('dbt_run_results') }}\n\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% if not time_bucket %}\n          {% set time_bucket = elementary.get_default_time_bucket() %}\n        {% endif %}\n\n        {% set test_table_name = elementary.get_elementary_test_table_name() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n        {#- creates temp relation for test metrics -#}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n        {#- get table configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n        {% endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n\n        {% do elementary.validate_seasonality_parameter(seasonality=seasonality, time_bucket=time_bucket, timestamp_column=timestamp_column) %}\n        {% set days_back = elementary.get_days_back(seasonality=seasonality) %}\n        {% set metric_properties = elementary.construct_metric_properties_dict(timestamp_column=timestamp_column,\n                                                                               where_expression=where_expression,\n                                                                               time_bucket=time_bucket,\n                                                                               event_timestamp_column=event_timestamp_column,\n                                                                               freshness_column=freshness_column) %}\n\n\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, metric_properties.timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ metric_properties.timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, metric_properties.timestamp_column, timestamp_column_data_type) %}\n        {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {% if timestamp_column and not is_timestamp %}\n          {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(metric_properties.timestamp_column)) %}\n        {% endif %}\n\n        {%- set table_monitors = elementary.get_final_table_monitors(table_anomalies) %}\n        {{ elementary.debug_log('table_monitors - ' ~ table_monitors) }}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {% if timestamp_column and is_timestamp %}\n            {%- set min_bucket_start, max_bucket_end = elementary.get_test_buckets_min_and_max(model,\n                                                                                        backfill_days,\n                                                                                        days_back,\n                                                                                        monitors=table_monitors,\n                                                                                        metric_properties=metric_properties) %}\n        {%- endif %}\n        {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n        {#- execute table monitors and write to temp test table -#}\n        {{ elementary.test_log('start', full_table_name) }}\n        {%- set table_monitoring_query = elementary.table_monitoring_query(model_relation,\n                                                                           min_bucket_start,\n                                                                           max_bucket_end,\n                                                                           table_monitors,\n                                                                           days_back,\n                                                                           metric_properties=metric_properties) %}\n        {{ elementary.debug_log('table_monitoring_query - \\n' ~ table_monitoring_query) }}\n\n        {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', table_monitoring_query) %}\n\n        {#- calculate anomaly scores for metrics -#}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {% do elementary.validate_directional_parameter(anomaly_direction) %}\n        {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation,\n                                                                          model_graph_node,\n                                                                          sensitivity,\n                                                                          backfill_days,\n                                                                          days_back,\n                                                                          table_monitors,\n                                                                          seasonality=seasonality,\n                                                                          metric_properties=metric_properties,\n                                                                          anomaly_direction=anomaly_direction) %}\n\n        {{ elementary.debug_log('table monitors anomaly scores query - \\n' ~ anomaly_scores_query) }}\n        \n        {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n        {{ elementary.test_log('end', full_table_name) }}\n\n        {{ elementary.get_read_anomaly_scores_query() }}\n\n    {% else %}\n\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n\n    {% endif %}\n\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.validate_seasonality_parameter", "macro.elementary.get_days_back", "macro.elementary.construct_metric_properties_dict", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_final_table_monitors", "macro.elementary.get_test_argument", "macro.elementary.get_test_buckets_min_and_max", "macro.elementary.test_log", "macro.elementary.table_monitoring_query", "macro.elementary.create_elementary_test_table", "macro.elementary.validate_directional_parameter", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_read_anomaly_scores_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0672574, "supported_languages": null}, "macro.elementary.test_volume_anomalies": {"name": "test_volume_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_volume_anomalies.sql", "original_file_path": "macros/edr/tests/test_volume_anomalies.sql", "unique_id": "macro.elementary.test_volume_anomalies", "macro_sql": "{% test volume_anomalies(model, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket, anomaly_direction='both', seasonality=none) %}\n  {{ elementary.test_table_anomalies(\n      model=model,\n      table_anomalies=[\"row_count\"],\n      freshness_column=none,\n      timestamp_column=timestamp_column,\n      sensitivity=sensitivity,\n      backfill_days=backfill_days,\n      where_expression=where_expression,\n      time_bucket=time_bucket,\n      seasonality=seasonality,\n      anomaly_direction=anomaly_direction\n    )\n  }}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.test_table_anomalies"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0691166, "supported_languages": null}, "macro.elementary.handle_tests_results": {"name": "handle_tests_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.handle_tests_results", "macro_sql": "{% macro handle_tests_results() %}\n    {{ elementary.file_log(\"Handling test results.\") }}\n    {% set cached_elementary_test_results = elementary.get_cache(\"elementary_test_results\") %}\n    {% set store_result_rows_in_own_table = elementary.get_config_var(\"store_result_rows_in_own_table\") %}\n    {% set elementary_test_results = elementary.get_result_enriched_elementary_test_results(cached_elementary_test_results, render_result_rows=(not store_result_rows_in_own_table)) %}\n    {% if store_result_rows_in_own_table %}\n      {% set test_result_rows = elementary.pop_test_result_rows(elementary_test_results) %}\n    {% endif %}\n    {% set tables_cache = elementary.get_cache(\"tables\") %}\n    {% set test_metrics_tables = tables_cache.get(\"metrics\") %}\n    {% set test_columns_snapshot_tables = tables_cache.get(\"schema_snapshots\") %}\n    {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n    {{ elementary.merge_data_monitoring_metrics(database_name, schema_name, test_metrics_tables) }}\n    {{ elementary.merge_schema_columns_snapshot(database_name, schema_name, test_columns_snapshot_tables) }}\n    {% if elementary_test_results %}\n      {% set elementary_test_results_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='elementary_test_results') %}\n      {% do elementary.insert_rows(elementary_test_results_relation, elementary_test_results, should_commit=True) %}\n    {% endif %}\n    {% if test_result_rows %}\n      {% set test_result_rows_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='test_result_rows') %}\n      {% do elementary.insert_rows(test_result_rows_relation, test_result_rows, should_commit=True) %}\n    {% endif %}\n    {{ elementary.file_log(\"Handled test results successfully.\") }}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.file_log", "macro.elementary.get_cache", "macro.elementary.get_config_var", "macro.elementary.get_result_enriched_elementary_test_results", "macro.elementary.pop_test_result_rows", "macro.elementary.get_package_database_and_schema", "macro.elementary.merge_data_monitoring_metrics", "macro.elementary.merge_schema_columns_snapshot", "macro.elementary.insert_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0863802, "supported_languages": null}, "macro.elementary.get_result_enriched_elementary_test_results": {"name": "get_result_enriched_elementary_test_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.get_result_enriched_elementary_test_results", "macro_sql": "{% macro get_result_enriched_elementary_test_results(cached_elementary_test_results, render_result_rows=false) %}\n  {% set elementary_test_results = [] %}\n\n  {% for result in results | selectattr('node.resource_type', '==', 'test') %}\n    {% set result = result.to_dict() %}\n    {% set elementary_test_results_rows = cached_elementary_test_results.get(result.node.unique_id) %}\n\n    {# Materializing the test failed and therefore was not added to the cache. #}\n    {% if not elementary_test_results_rows %}\n      {% set flattened_test = elementary.flatten_test(result.node) %}\n      {% set elementary_test_results_rows = [elementary.get_dbt_test_result_row(flattened_test)] %}\n    {% endif %}\n\n    {% for elementary_test_results_row in elementary_test_results_rows %}\n      {% set failures = elementary_test_results_row.get(\"failures\", result.failures) %}\n      {% set status = \"pass\" if failures == 0 else result.status %}\n      {% do elementary_test_results_row.update({'status': status, 'failures': failures, 'invocation_id': invocation_id}) %}\n      {% do elementary_test_results_row.setdefault('test_results_description', result.message) %}\n      {% if render_result_rows %}\n        {% do elementary_test_results_row.update({\"result_rows\": elementary.render_result_rows(elementary_test_results_row.result_rows)}) %}\n      {% endif %}\n      {% do elementary_test_results.append(elementary_test_results_row) %}\n    {% endfor %}\n  {% endfor %}\n\n  {% do return(elementary_test_results) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.flatten_test", "macro.elementary.get_dbt_test_result_row", "macro.elementary.render_result_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0911453, "supported_languages": null}, "macro.elementary.merge_data_monitoring_metrics": {"name": "merge_data_monitoring_metrics", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.merge_data_monitoring_metrics", "macro_sql": "{% macro merge_data_monitoring_metrics(database_name, schema_name, test_metrics_tables) %}\n    {%- if test_metrics_tables %}\n        {%- set test_tables_union_query = elementary.union_metrics_query(test_metrics_tables) -%}\n        {%- set target_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='data_monitoring_metrics') -%}\n        {% if not target_relation %}\n          {% do exceptions.raise_compiler_error(\"Couldn't find Elementary's models. Please run `dbt run -s elementary`.\") %}\n        {% endif %}\n        {%- set temp_relation = dbt.make_temp_relation(target_relation) -%}\n        {%- if test_tables_union_query %}\n            {{ elementary.file_log('Running union query from test tables to ' ~ temp_relation.identifier) }}\n            {%- do run_query(dbt.create_table_as(True, temp_relation, test_tables_union_query)) %}\n            {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n            {{ elementary.file_log('Merging ' ~ temp_relation.identifier ~ ' to ' ~ target_relation.database ~ '.' ~ target_relation.schema ~ '.' ~ target_relation.identifier) }}\n            {%- if target_relation and temp_relation and dest_columns %}\n                {% set merge_sql = elementary.merge_sql(target_relation, temp_relation, 'id', dest_columns) %}\n                {%- do run_query(merge_sql) %}\n                {%- do adapter.commit() -%}\n                {{ elementary.file_log('Finished merging') }}\n            {%- else %}\n                {{ elementary.file_log('Error: could not merge to table: ' ~ target_name) }}\n            {%- endif %}\n        {%- endif %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.union_metrics_query", "macro.dbt.make_temp_relation", "macro.elementary.file_log", "macro.elementary.run_query", "macro.dbt.create_table_as", "macro.elementary.merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.095519, "supported_languages": null}, "macro.elementary.merge_schema_columns_snapshot": {"name": "merge_schema_columns_snapshot", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.merge_schema_columns_snapshot", "macro_sql": "{% macro merge_schema_columns_snapshot(database_name, schema_name, test_columns_snapshot_tables) %}\n    {%- if test_columns_snapshot_tables %}\n        {%- set test_tables_union_query = elementary.union_columns_snapshot_query(test_columns_snapshot_tables) -%}\n        {%- set target_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='schema_columns_snapshot') -%}\n        {% if not target_relation %}\n          {% do exceptions.raise_compiler_error(\"Couldn't find Elementary's models. Please run `dbt run -s elementary`.\") %}\n        {% endif %}\n        {%- set temp_relation = dbt.make_temp_relation(target_relation) -%}\n        {%- if test_tables_union_query %}\n            {{ elementary.file_log('Running union query from test tables to ' ~ temp_relation.identifier) }}\n            {%- do run_query(dbt.create_table_as(True, temp_relation, test_tables_union_query)) %}\n            {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n            {{ elementary.file_log('Merging ' ~ temp_relation.identifier ~ ' to ' ~ target_relation.database ~ '.' ~ target_relation.schema ~ '.' ~ target_relation.identifier) }}\n            {%- if target_relation and temp_relation and dest_columns %}\n                {% set merge_sql = elementary.merge_sql(target_relation, temp_relation, 'column_state_id', dest_columns) %}\n                {%- do run_query(merge_sql) %}\n                {%- do adapter.commit() -%}\n                {{ elementary.file_log('Finished merging') }}\n            {%- else %}\n                {{ elementary.file_log('Error: could not merge to table: ' ~ target_name) }}\n            {%- endif %}\n        {%- endif %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.union_columns_snapshot_query", "macro.dbt.make_temp_relation", "macro.elementary.file_log", "macro.elementary.run_query", "macro.dbt.create_table_as", "macro.elementary.merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.0999012, "supported_languages": null}, "macro.elementary.pop_test_result_rows": {"name": "pop_test_result_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.pop_test_result_rows", "macro_sql": "{% macro pop_test_result_rows(elementary_test_results) %}\n  {% set result_rows = [] %}\n  {% for test_result in elementary_test_results %}\n    {% for result_row in test_result.pop('result_rows', []) %}\n      {% do result_rows.append({\n        \"elementary_test_results_id\": test_result.id,\n        \"detected_at\": test_result.detected_at,\n        \"result_row\": result_row\n      }) %}\n    {% endfor %}\n  {% endfor %}\n  {% do return(result_rows) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1016996, "supported_languages": null}, "macro.elementary.render_result_rows": {"name": "render_result_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.render_result_rows", "macro_sql": "{% macro render_result_rows(test_result_rows) %}\n  {% set column_size = elementary.get_column_size() %}\n  {% if not column_size or (tojson(test_result_rows) | length) < column_size %}\n    {% do return(test_result_rows) %}\n  {% endif %}\n  {% do return(none) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_column_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1029665, "supported_languages": null}, "macro.elementary.union_columns_snapshot_query": {"name": "union_columns_snapshot_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/union_columns_snapshot_query.sql", "original_file_path": "macros/edr/tests/on_run_end/union_columns_snapshot_query.sql", "unique_id": "macro.elementary.union_columns_snapshot_query", "macro_sql": "{% macro union_columns_snapshot_query(temp_columns_snapshot_tables) %}\n    {%- if temp_columns_snapshot_tables | length > 0 %}\n        {%- set union_temp_query -%}\n            with union_temp_columns_snapshot as (\n            {%- for temp_table in temp_columns_snapshot_tables -%}\n                select * from {{ temp_table }}\n                {%- if not loop.last %} union all {% endif %}\n            {%- endfor %}\n            ),\n            columns_snapshot_with_duplicates as (\n                select *,\n                    row_number() over (partition by column_state_id order by detected_at desc) as row_number\n                from union_temp_columns_snapshot\n            )\n            select\n                column_state_id,\n                full_column_name,\n                full_table_name,\n                column_name,\n                data_type,\n                is_new,\n                detected_at\n            from columns_snapshot_with_duplicates\n            where row_number = 1\n        {%- endset %}\n        {{ return(union_temp_query) }}\n    {%- endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.105526, "supported_languages": null}, "macro.elementary.union_metrics_query": {"name": "union_metrics_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/union_metrics_query.sql", "original_file_path": "macros/edr/tests/on_run_end/union_metrics_query.sql", "unique_id": "macro.elementary.union_metrics_query", "macro_sql": "{% macro union_metrics_query(temp_metrics_tables) %}\n    {%- if temp_metrics_tables | length > 0 %}\n        {%- set union_temp_query -%}\n            with union_temps_metrics as (\n            {%- for temp_table in temp_metrics_tables -%}\n                select * from {{ temp_table }}\n                {%- if not loop.last %} union all {% endif %}\n            {%- endfor %}\n            ),\n            metrics_with_duplicates as (\n                select *,\n                    row_number() over (partition by id order by updated_at desc) as row_number\n                from union_temps_metrics\n            )\n            select\n                id,\n                full_table_name,\n                column_name,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_duration_hours,\n                updated_at,\n                dimension,\n                dimension_value,\n                metric_properties\n            from metrics_with_duplicates\n            where row_number = 1\n        {%- endset %}\n        {{ return(union_temp_query) }}\n    {%- endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.107969, "supported_languages": null}, "macro.elementary.create_elementary_tests_schema": {"name": "create_elementary_tests_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_start/create_elementary_tests_schema.sql", "original_file_path": "macros/edr/tests/on_run_start/create_elementary_tests_schema.sql", "unique_id": "macro.elementary.create_elementary_tests_schema", "macro_sql": "{% macro create_elementary_tests_schema() %}\n    {% if execute and flags.WHICH in ['test', 'build'] %}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n        {%- if tests_schema_name != schema_name and not adapter.check_schema_exists(database_name, tests_schema_name) %}\n            {{ elementary.edr_log(\"Creating Elementary's tests schema.\") }}\n            {% set schema_relation = api.Relation.create(database=database_name, schema=tests_schema_name).without_identifier() %}\n            {%- do dbt.create_schema(schema_relation) %}\n            {% do adapter.commit() %}\n        {%- endif %}\n    {% endif %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.edr_log", "macro.dbt.create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.111101, "supported_languages": null}, "macro.elementary.init_elementary_graph": {"name": "init_elementary_graph", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_start/init_elementary_graph.sql", "original_file_path": "macros/edr/tests/on_run_start/init_elementary_graph.sql", "unique_id": "macro.elementary.init_elementary_graph", "macro_sql": "{% macro init_elementary_graph() %}\n  {% do graph.setdefault(\"elementary\", {\n    \"elementary_test_results\": {},\n    \"tests_schema_name\": none,\n    \"tables\": {\n      \"metrics\": [],\n      \"schema_snapshots\": []\n    }\n  }) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1123068, "supported_languages": null}, "macro.elementary.backfill_result_rows": {"name": "backfill_result_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/backfill_result_rows.sql", "original_file_path": "macros/edr/tests/test_utils/backfill_result_rows.sql", "unique_id": "macro.elementary.backfill_result_rows", "macro_sql": "{% macro backfill_result_rows() %}\n    -- depends_on: {{ ref('elementary_test_results') }}\n    {% if is_incremental() %}\n        {% do return('') %}\n    {% endif %}\n\n    {% set elementary_test_results_relation = ref(\"elementary_test_results\") %}\n    {% set result_row_exists = elementary.get_column_in_relation(elementary_test_results_relation, \"result_rows\") is not none %}\n    {% if not result_row_exists %}\n        {% do return('') %}\n    {% endif %}\n\n    {% set test_result_rows_rows = [] %}\n    {% set backfill_query %}\n        select\n        id,\n        detected_at,\n        result_rows\n        from {{ elementary_test_results_relation }}\n        where {{ elementary.edr_datediff(elementary.edr_cast_as_timestamp('detected_at'), elementary.edr_current_timestamp(), 'day') }} < {{ elementary.get_config_var(\"days_back\") }}\n        and result_rows is not null\n    {% endset %}\n    {% set test_results_with_result_rows = elementary.run_query(backfill_query) %}\n    {% for elementary_test_results_row in test_results_with_result_rows %}\n        {% set result_rows = fromjson(elementary_test_results_row.result_rows) %}\n        {% for result_row in result_rows %}\n            {% do test_result_rows_rows.append({\n                \"elementary_test_results_id\": elementary_test_results_row.id,\n                \"detected_at\": elementary_test_results_row.detected_at.strftime(elementary.get_time_format()),\n                \"result_row\": result_row\n            }) %}\n        {% endfor %}\n    {% endfor %}\n    {% do elementary.insert_rows(this, test_result_rows_rows) %}\n    {% do return('') %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.elementary.get_column_in_relation", "macro.elementary.edr_datediff", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_current_timestamp", "macro.elementary.get_config_var", "macro.elementary.run_query", "macro.elementary.get_time_format", "macro.elementary.insert_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1184683, "supported_languages": null}, "macro.elementary.snowflake__compile_py_code": {"name": "snowflake__compile_py_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/compile_py_code.sql", "original_file_path": "macros/edr/tests/test_utils/compile_py_code.sql", "unique_id": "macro.elementary.snowflake__compile_py_code", "macro_sql": "{% macro snowflake__compile_py_code(model, py_code, output_table, where_expression, code_type) %}\nimport pandas\nimport snowflake.snowpark\n\n{{ py_code }}\n\ndef write_output_table(session, output_df, target_relation):\n    output_df.write.mode('overwrite').save_as_table(target_relation, table_type='temporary')\n\ndef get_fail_count(test_output):\n    if isinstance(test_output, int):\n        return test_output\n    if isinstance(test_output, bool):\n        return 0 if test_output else 1\n    if isinstance(test_output, snowflake.snowpark.DataFrame):\n        return test_output.count()\n    if isinstance(test_output, pandas.DataFrame):\n        return len(test_output)\n    raise ValueError('Received invalid return value, expected either DataFrame or a boolean.')\n\ndef get_output_df(model_df, code_type, ref, session):\n    if code_type == \"test\":\n        test_output = test(model_df, ref, session)\n        fail_count = get_fail_count(test_output)\n        return session.createDataFrame([[fail_count]], ['fail_count'])\n    elif code_type == \"function\":\n        res = func(model_df, ref, session)\n        return session.createDataFrame([[res]], ['result'])\n\n    raise Exception(\"Unsupported code type: {}\".format(code_type))\n\ndef main(session):\n    ref = session.table\n    model_df = ref('{{ model }}')\n\n    {% if where_expression %}\n    model_df = model_df.filter(\"\"\"{{ where_expression }}\"\"\")\n    {% endif %}\n\n    output_df = get_output_df(model_df, '{{ code_type }}', ref, session)\n    write_output_table(session, output_df, '{{ output_table }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.121598, "supported_languages": null}, "macro.elementary.bigquery__compile_py_code": {"name": "bigquery__compile_py_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/compile_py_code.sql", "original_file_path": "macros/edr/tests/test_utils/compile_py_code.sql", "unique_id": "macro.elementary.bigquery__compile_py_code", "macro_sql": "{% macro bigquery__compile_py_code(model, py_code, output_table, where_expression, code_type) %}\nimport pandas\nimport pyspark.sql\n\n{{ py_code }}\n\ndef write_output_table(session, output_df, target_relation):\n    output_df.write.mode('overwrite').format('bigquery').option('writeMethod', 'direct').option('writeDisposition', 'WRITE_TRUNCATE').save(target_relation)\n\ndef get_fail_count(test_output):\n    if isinstance(test_output, int):\n        return test_output\n    if isinstance(test_output, bool):\n        return 0 if test_output else 1\n    if isinstance(test_output, pyspark.sql.DataFrame):\n        return test_output.count()\n    if isinstance(test_output, pandas.DataFrame):\n        return len(test_output)\n    raise ValueError('Received invalid return value, expected either DataFrame or a boolean.')\n\ndef get_session():\n    session = pyspark.sql.SparkSession.builder.appName('Elementary').getOrCreate()\n    session.conf.set('viewsEnabled', 'true')\n    session.conf.set('temporaryGcsBucket', '{{ target.gcs_bucket }}')\n    return session\n\ndef get_output_df(model_df, code_type, ref, session):\n    if code_type == \"test\":\n        test_output = test(model_df, ref, session)\n        fail_count = get_fail_count(test_output)\n        return session.createDataFrame([[fail_count]], ['fail_count'])\n    elif code_type == \"function\":\n        res = func(model_df, ref, session)\n        return session.createDataFrame([[res]], ['result'])\n\n    raise Exception(\"Unsupported code type: {}\".format(code_type))\n\ndef main():\n    session = get_session()\n    ref = session.read.format('bigquery').load\n    model_df = ref('{{ model }}')\n\n    {% if where_expression %}\n    model_df = model_df.filter(\"\"\"{{ where_expression }}\"\"\")\n    {% endif %}\n\n    output_df = get_output_df(model_df, '{{ code_type }}', ref, session)\n    write_output_table(session, output_df, '{{ output_table }}')\n\nmain()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1228325, "supported_languages": null}, "macro.elementary.default__compile_py_code": {"name": "default__compile_py_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/compile_py_code.sql", "original_file_path": "macros/edr/tests/test_utils/compile_py_code.sql", "unique_id": "macro.elementary.default__compile_py_code", "macro_sql": "{% macro default__compile_py_code(model, py_code, output_table, where_expression, code_type) %}\n  {{ exceptions.raise_compiler_error(\"Elementary's Python tests are not yet supported on %s.\" % target.type) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1235332, "supported_languages": null}, "macro.elementary.create_elementary_test_table": {"name": "create_elementary_test_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/create_elementary_test_table.sql", "original_file_path": "macros/edr/tests/test_utils/create_elementary_test_table.sql", "unique_id": "macro.elementary.create_elementary_test_table", "macro_sql": "{% macro create_elementary_test_table(database_name, schema_name, test_name, table_type, sql_query, is_temp_table=False) %}\n    {% if execute %}\n        {% set temp_table_name = elementary.table_name_with_suffix(test_name, \"__\" ~ table_type) %}\n        {{ elementary.debug_log(table_type ~ ' table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_table_name) }}\n\n        {% set _, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                   schema=schema_name,\n                                                                   identifier=temp_table_name,\n                                                                   type='table') -%}\n        {% if is_temp_table %}\n            {% set temp_table_relation = dbt.make_temp_relation(temp_table_relation) %}\n        {% endif %}\n\n        {# Cache the test table for easy access later #}\n        {% set cache_key = \"elementary_test_table|\" ~ test_name ~ \"|\" ~ table_type %}\n        {% do elementary.set_cache(cache_key, temp_table_relation) %}\n\n        {# Create the table if it doesn't exist #}\n        {%- do elementary.create_or_replace(is_temp_table, temp_table_relation, sql_query) %}\n\n        {{ return(temp_table_relation) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.table_name_with_suffix", "macro.elementary.debug_log", "macro.dbt.get_or_create_relation", "macro.dbt.make_temp_relation", "macro.elementary.set_cache", "macro.elementary.create_or_replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1276221, "supported_languages": null}, "macro.elementary.create_model_baseline_table": {"name": "create_model_baseline_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/create_model_baseline_table.sql", "original_file_path": "macros/edr/tests/test_utils/create_model_baseline_table.sql", "unique_id": "macro.elementary.create_model_baseline_table", "macro_sql": "{% macro create_model_baseline_table(baseline_columns, database_name, schema_name, test_name) %}\n    {% set empty_table_query = elementary.empty_table([('column_name','string'),('data_type','string')]) %}\n    {% set baseline_table_relation = elementary.create_elementary_test_table(database_name, schema_name,\n                                                                             test_name | lower, 'schema_baseline',\n                                                                             empty_table_query, is_temp_table=False) %}\n    {% do elementary.insert_rows(baseline_table_relation, baseline_columns, should_commit=True) %}\n    {% do return(baseline_table_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table", "macro.elementary.create_elementary_test_table", "macro.elementary.insert_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1298788, "supported_languages": null}, "macro.elementary.find_normalized_data_type_for_column": {"name": "find_normalized_data_type_for_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/find_normalized_data_type_for_column.sql", "original_file_path": "macros/edr/tests/test_utils/find_normalized_data_type_for_column.sql", "unique_id": "macro.elementary.find_normalized_data_type_for_column", "macro_sql": "{% macro find_normalized_data_type_for_column(model_relation, column_name) %}\n\n{% set columns_from_relation = adapter.get_columns_in_relation(model_relation) %}\n{% if column_name and columns_from_relation and columns_from_relation is iterable %}\n    {% for column_obj in columns_from_relation %}\n        {% if column_obj.column | lower == column_name | trim('\\'\\\"\\`') | lower %}\n            {{ return(elementary.normalize_data_type(column_obj.dtype)) }}\n        {% endif %}\n    {% endfor %}\n    {% do exceptions.raise_compiler_error(\"Column `{}` was not found in `{}`.\".format(column_name, model_relation.name)) %}\n{% endif %}\n{{ return(none) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.normalize_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.132511, "supported_languages": null}, "macro.elementary.get_anomaly_query": {"name": "get_anomaly_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "unique_id": "macro.elementary.get_anomaly_query", "macro_sql": "{%- macro get_anomaly_query(flattened_test=none) -%}\n  {%- set query -%}\n    select * from ({{ elementary.get_read_anomaly_scores_query(flattened_test) }}) results\n    where is_anomalous = true\n  {%- endset -%}\n  {{- return(query) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_read_anomaly_scores_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1378138, "supported_languages": null}, "macro.elementary.get_read_anomaly_scores_query": {"name": "get_read_anomaly_scores_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "unique_id": "macro.elementary.get_read_anomaly_scores_query", "macro_sql": "{% macro get_read_anomaly_scores_query(flattened_test=none) %}\n    {% if not flattened_test %}\n      {% set flattened_test = elementary.flatten_test(model) %}\n    {% endif %}\n\n    {% set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=flattened_test.test_params.sensitivity) %}\n    {% set anomaly_direction = elementary.get_test_argument(argument_name='anomaly_direction', value=flattened_test.test_params.anomaly_direction) | lower %}\n    {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=flattened_test.test_params.backfill_days) %}\n    {%- set backfill_period = \"'-\" ~ backfill_days ~ \"'\" %}\n\n    {%- set anomaly_query -%}\n      with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            {{ elementary.anomaly_detection_description() }},\n            max(bucket_end) as max_bucket_end\n        from {{ elementary.get_elementary_test_table(elementary.get_elementary_test_table_name(), 'anomaly_scores') }}\n        {{ dbt_utils.group_by(25) }}\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\n          case when\n            anomaly_score is not null and\n            {{ elementary.is_score_anomalous_condition(sensitivity, anomaly_direction) }} and\n            bucket_end >= {{ elementary.edr_timeadd('day', backfill_period, 'max_bucket_end') }} and\n            training_set_size >= {{ elementary.get_config_var('min_training_set_size') }}\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      )\n\n      select\n        metric_value as value,\n        training_avg as average,\n        {# when there is an anomaly we would want to use the last value of the metric (lag), otherwise visually the expectations would look out of bounds #}\n        case\n        when is_anomalous = TRUE and '{{ anomaly_direction }}' = 'spike' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value order by bucket_end)\n        when is_anomalous = TRUE and '{{ anomaly_direction }}' != 'spike' then\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value order by bucket_end)\n        when '{{ anomaly_direction }}' = 'spike' then metric_value\n        else min_metric_value end as min_value,\n        case\n        when is_anomalous = TRUE and '{{ anomaly_direction }}' = 'drop' then\n         lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value order by bucket_end)\n        when is_anomalous = TRUE and '{{ anomaly_direction }}' != 'drop' then\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value order by bucket_end)\n        when '{{ anomaly_direction }}' = 'drop' then metric_value\n        else max_metric_value end as max_value,\n        bucket_start as start_time,\n        bucket_end as end_time,\n        *\n      from anomaly_scores_with_is_anomalous\n      order by bucket_end, dimension_value\n    {%- endset -%}\n    {{- return(anomaly_query) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.flatten_test", "macro.elementary.get_test_argument", "macro.elementary.anomaly_detection_description", "macro.elementary.get_elementary_test_table", "macro.elementary.get_elementary_test_table_name", "macro.dbt_utils.group_by", "macro.elementary.is_score_anomalous_condition", "macro.elementary.edr_timeadd", "macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.142013, "supported_languages": null}, "macro.elementary.set_directional_anomaly": {"name": "set_directional_anomaly", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "unique_id": "macro.elementary.set_directional_anomaly", "macro_sql": "\n\n{%- macro set_directional_anomaly(anomaly_direction, anomaly_score, sensitivity) -%}\n    {% if anomaly_direction | lower == 'spike' %}\n        anomaly_score > {{ sensitivity }}\n    {% elif anomaly_direction | lower == 'drop' %}\n        anomaly_score < {{ sensitivity * -1 }}\n    {% else %}\n        abs(anomaly_score) > {{ sensitivity }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1434512, "supported_languages": null}, "macro.elementary.is_score_anomalous_condition": {"name": "is_score_anomalous_condition", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "unique_id": "macro.elementary.is_score_anomalous_condition", "macro_sql": "\n\n{%- macro is_score_anomalous_condition(sensitivity, anomaly_direction) -%}\n    {%- set spikes_only_metrics = ['freshness', 'event_freshness'] -%}\n    case when metric_name IN {{ elementary.strings_list_to_tuple(spikes_only_metrics) }} then\n            anomaly_score > {{ sensitivity }}\n    else\n        {{ elementary.set_directional_anomaly(anomaly_direction, anomaly_score, sensitivity) }}\n     end\n{%- endmacro -%}", "depends_on": {"macros": ["macro.elementary.strings_list_to_tuple", "macro.elementary.set_directional_anomaly"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1444924, "supported_languages": null}, "macro.elementary.get_days_back": {"name": "get_days_back", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_days_back.sql", "original_file_path": "macros/edr/tests/test_utils/get_days_back.sql", "unique_id": "macro.elementary.get_days_back", "macro_sql": "{% macro get_days_back(seasonality=none) %}\n    {% set days_back = elementary.get_config_var('days_back') %}\n    {% if seasonality and seasonality == 'day_of_week' %}\n        {% do return(days_back * 7) %}\n    {% endif %}\n    {% do return(days_back) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1459928, "supported_languages": null}, "macro.elementary.get_elementary_test_table": {"name": "get_elementary_test_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_elementary_test_table.sql", "original_file_path": "macros/edr/tests/test_utils/get_elementary_test_table.sql", "unique_id": "macro.elementary.get_elementary_test_table", "macro_sql": "{% macro get_elementary_test_table(test_name, table_type) %}\n    {% if execute %}\n        {% set cache_key = \"elementary_test_table|\" ~ test_name ~ \"|\" ~ table_type %}\n        {{ return(elementary.get_cache(cache_key)) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_cache"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.147332, "supported_languages": null}, "macro.elementary.get_elementary_test_table_name": {"name": "get_elementary_test_table_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_elementary_test_table_name.sql", "original_file_path": "macros/edr/tests/test_utils/get_elementary_test_table_name.sql", "unique_id": "macro.elementary.get_elementary_test_table_name", "macro_sql": "{% macro get_elementary_test_table_name() %}\n    {% set test_node = model %}\n    {% set test_hash = test_node.unique_id.split(\".\")[-1] %}\n    {% set test_name = test_node.name %}\n    {% do return(\"test_{}_{}\".format(test_hash, test_name)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1487632, "supported_languages": null}, "macro.elementary.get_elementary_tests_schema": {"name": "get_elementary_tests_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_elementary_tests_schema.sql", "original_file_path": "macros/edr/tests/test_utils/get_elementary_tests_schema.sql", "unique_id": "macro.elementary.get_elementary_tests_schema", "macro_sql": "{% macro get_elementary_tests_schema(elementary_database, elementary_schema) %}\n    {% set LEGACY_TESTS_SCHEMA_SUFFIX = \"__tests\" %}\n\n    {% set cached_tests_schema_name = elementary.get_cache(\"tests_schema_name\") %}\n    {% if cached_tests_schema_name is not none %}\n        {{ return(cached_tests_schema_name) }}\n    {% endif %}\n\n    {% set tests_schema_suffix = elementary.get_config_var('tests_schema_name') %}\n    {% set tests_schema_name = elementary_schema ~ tests_schema_suffix %}\n\n    {# Backward compatibility - if a tests schema suffix is not defined, but the legacy tests schema exists in the DB,\n       then use it #}\n    {% if not tests_schema_suffix %}\n        {% set legacy_tests_schema_name = elementary_schema ~ LEGACY_TESTS_SCHEMA_SUFFIX %}\n        {% if adapter.check_schema_exists(elementary_database, legacy_tests_schema_name) %}\n            {% set tests_schema_name = legacy_tests_schema_name %}\n        {% endif %}\n    {% endif %}\n\n    {% do elementary.set_cache(\"tests_schema_name\", tests_schema_name) %}\n\n    {{ return(tests_schema_name) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_cache", "macro.elementary.get_config_var", "macro.elementary.set_cache"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1519725, "supported_languages": null}, "macro.elementary.get_model_baseline_columns": {"name": "get_model_baseline_columns", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_model_baseline_columns.sql", "original_file_path": "macros/edr/tests/test_utils/get_model_baseline_columns.sql", "unique_id": "macro.elementary.get_model_baseline_columns", "macro_sql": "{% macro get_model_baseline_columns(model, enforce_types=False) %}\n    {# Get baseline columns #}\n    {% set model_relation = dbt.load_relation(model) %}\n    {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n\n    {% set baseline = [] %}\n    {% set columns_without_types = [] %}\n    {% for column in model_graph_node[\"columns\"].values() %}\n        {% if \"data_type\" in column %}\n            {% set info_schema_data_type = elementary.get_normalized_data_type(column[\"data_type\"]) %}\n        {% else %}\n            {% set info_schema_data_type = none %}\n        {% endif %}\n        {% set column_info = {\"column_name\": column[\"name\"], \"data_type\": info_schema_data_type } %}\n        {% if column_info[\"data_type\"] is none %}\n            {% do columns_without_types.append(column_info[\"column_name\"]) %}\n        {% endif %}\n        {% do baseline.append(column_info) %}\n    {% endfor %}\n    \n    {% if columns_without_types %}\n        {% if enforce_types %}\n            {% do exceptions.raise_compiler_error(\"Data type not defined for columns `{}` on model `{}` for schema change from baseline test\".format(columns_without_types, model)) %}\n        {% else %}\n            {% do elementary.edr_log(\"Warning - missing data types for columns: \" ~ columns_without_types) %}\n        {% endif %}\n    {% endif %}\n\n    {% do return(baseline) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_normalized_data_type", "macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1575656, "supported_languages": null}, "macro.elementary.get_model_graph_node": {"name": "get_model_graph_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_model_graph_node.sql", "original_file_path": "macros/edr/tests/test_utils/get_model_graph_node.sql", "unique_id": "macro.elementary.get_model_graph_node", "macro_sql": "{% macro get_model_graph_node(model_relation) %}\n    {% if execute %}\n        {# model here is actually the test node in the graph #}\n        {% set test_graph_node = model %}\n        {% set test_depends_on_unique_ids = test_graph_node.depends_on.nodes %}\n        {# model relation is the relation object of the model where the test is defined #}\n        {% set relation_name = model_relation.name | lower %}\n        {% set depends_on_nodes = elementary.get_nodes_by_unique_ids(test_depends_on_unique_ids) %}\n        {% if depends_on_nodes %}\n            {% for node in depends_on_nodes %}\n                {% set node_name = node.name | lower %}\n                {% set node_alias = node.get('alias', '') | lower %}\n                {% set node_identifier = node.get('identifier', '') | lower %}\n                {% if node_name == relation_name or node_alias == relation_name or node_identifier == relation_name %}\n                    {{ return(node) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_nodes_by_unique_ids"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1614301, "supported_languages": null}, "macro.elementary.get_test_execution_id": {"name": "get_test_execution_id", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_test_execution_id.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_execution_id.sql", "unique_id": "macro.elementary.get_test_execution_id", "macro_sql": "{% macro get_test_execution_id() %}\n    {{ return(elementary.get_node_execution_id(model)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_node_execution_id"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1620927, "supported_languages": null}, "macro.elementary.get_test_type": {"name": "get_test_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_test_type.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_type.sql", "unique_id": "macro.elementary.get_test_type", "macro_sql": "{% macro get_test_type(flattened_test) %}\n    {% if flattened_test.test_namespace == \"elementary\" %}\n        {%- set elementary_test_type = elementary.get_elementary_test_type(flattened_test) %}\n    {% endif %}\n\n    {%- if elementary_test_type and elementary_test_type != \"python_test\" %}\n        {{ return(elementary_test_type) }}\n    {%- else %}\n        {{ return(\"dbt_test\") }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_elementary_test_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1646695, "supported_languages": null}, "macro.elementary.get_elementary_test_type": {"name": "get_elementary_test_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_test_type.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_type.sql", "unique_id": "macro.elementary.get_elementary_test_type", "macro_sql": "{% macro get_elementary_test_type(flattened_test) %}\n    {%- set anomaly_detection_tests = [\n        'volume_anomalies',\n        'freshness_anomalies',\n        'event_freshness_anomalies',\n        'table_anomalies',\n        'dimension_anomalies',\n        'column_anomalies',\n        'all_columns_anomalies'\n    ] %}\n    {%- set schema_changes_tests = [\n        'schema_changes',\n        'schema_changes_from_baseline',\n        'json_schema'\n    ] %}\n    {%- set python_tests = [\n        'python',\n        'json_schema'\n    ]   %}\n\n  {% if flattened_test.test_namespace == \"elementary\" %}\n    {% if flattened_test.short_name | lower in anomaly_detection_tests %}\n      {% do return(\"anomaly_detection\") %}\n    {% elif flattened_test.short_name | lower in schema_changes_tests %}\n      {% do return(\"schema_change\") %}\n    {% elif flattened_test.short_name | lower in python_tests %}\n        {% do return(\"python_test\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1673346, "supported_languages": null}, "macro.elementary.get_test_unique_id": {"name": "get_test_unique_id", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_test_unique_id.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_unique_id.sql", "unique_id": "macro.elementary.get_test_unique_id", "macro_sql": "{% macro get_test_unique_id() %}\n    {% set test_unique_id = model.get('unique_id') %}\n    {{ return(test_unique_id) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.168174, "supported_languages": null}, "macro.elementary.get_timestamp_column": {"name": "get_timestamp_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_timestamp_column.sql", "original_file_path": "macros/edr/tests/test_utils/get_timestamp_column.sql", "unique_id": "macro.elementary.get_timestamp_column", "macro_sql": "{% macro get_timestamp_column(timestamp_column, model_node) %}\n    {% if timestamp_column %}\n        {{ return(timestamp_column) }}\n    {% else %}\n        {% set elementary_config = elementary.get_elementary_config_from_node(model_node) %}\n        {% if elementary_config and elementary_config is mapping %}\n            {{ return(elementary_config.get('timestamp_column')) }}\n        {% endif %}\n    {% endif %}\n    {{- return(none) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_elementary_config_from_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.170088, "supported_languages": null}, "macro.elementary.run_python": {"name": "run_python", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/run_python.sql", "original_file_path": "macros/edr/tests/test_utils/run_python.sql", "unique_id": "macro.elementary.run_python", "macro_sql": "{% macro run_python(graph_node, code) %}\n  {% set macro_stack = context_macro_stack.call_stack %}\n  {% set macro_stack_copy = macro_stack.copy() %}\n  {% do macro_stack.clear() %}\n  {% do macro_stack.extend([[\"materialization\"], \"macro.dbt.statement\"]) %}\n  {% do submit_python_job(graph_node, code) %}\n  {% do macro_stack.clear() %}\n  {% do macro_stack.extend(macro_stack_copy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1720362, "supported_languages": null}, "macro.elementary.validate_seasonality_parameter": {"name": "validate_seasonality_parameter", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/validate_test_parameters.sql", "original_file_path": "macros/edr/tests/test_utils/validate_test_parameters.sql", "unique_id": "macro.elementary.validate_seasonality_parameter", "macro_sql": "{% macro validate_seasonality_parameter(seasonality, time_bucket, timestamp_column) %}\n    {% if seasonality %}\n      {% if not timestamp_column %}\n        {% do exceptions.raise_compiler_error('Test with seasonality must have a timestamp_column, but none was provided') %}\n      {% endif %}\n      {% set supported_seasonality_values = ['day_of_week'] %}\n      {% if seasonality not in supported_seasonality_values %}\n        {% do exceptions.raise_compiler_error('Seasonality value should be one of' ~ supported_seasonality_values ~ ', got ' ~ seasonality ~ ' instead') %}\n      {% endif %}\n      {% if (time_bucket.count != 1) or (time_bucket.period != 'day') %}\n        {% do exceptions.raise_compiler_error('Seasonality is supported only with time_bucket 1 day, got period: ' ~ time_bucket.period ~ ' and count: ' ~ time_bucket.count ~ ' instead') %}\n      {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1757498, "supported_languages": null}, "macro.elementary.validate_directional_parameter": {"name": "validate_directional_parameter", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/validate_test_parameters.sql", "original_file_path": "macros/edr/tests/test_utils/validate_test_parameters.sql", "unique_id": "macro.elementary.validate_directional_parameter", "macro_sql": "{% macro validate_directional_parameter(anomaly_direction) %}\n    {% if anomaly_direction %}\n      {% set direction_case_insensitive = anomaly_direction | lower %}\n      {% if direction_case_insensitive not in ['drop','spike','both'] %}\n        {% do exceptions.raise_compiler_error('Supported anomaly directions are: both, drop, spike. received anomaly_direction: {}'.format(anomaly_direction)) %}\n      {% endif %}\n    {% else %}\n      {% do exceptions.raise_compiler_error('anomaly_direction can\\'t be empty. Supported anomaly directions are: both, drop, spike') %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1773398, "supported_languages": null}, "macro.elementary.log_macro_results": {"name": "log_macro_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/log_macro_results.sql", "original_file_path": "macros/utils/log_macro_results.sql", "unique_id": "macro.elementary.log_macro_results", "macro_sql": "{% macro log_macro_results(macro_name, macro_args=none) %}\n    {% if macro_args is none %}\n        {% set macro_args = {} %}\n    {% endif %}\n    {%- set package_and_macro_name = macro_name.split('.') %}\n    {%- if package_and_macro_name | length == 1 %}\n        {% set macro = context[macro_name] %}\n    {%- elif package_and_macro_name | length == 2 %}\n        {%- set package_name, macro_name = package_and_macro_name %}\n        {% set macro = context[package_name][macro_name] %}\n    {%- else %}\n        {% do exceptions.raise_compiler_error(\"Received invalid macro name: {}\".format(macro_name)) %}\n    {% endif %}\n    {% set results = macro(**macro_args) %}\n    {% if results is not none %}\n        {% do elementary.edr_log(tojson(results)) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1809614, "supported_languages": null}, "macro.elementary.edr_percent": {"name": "edr_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/percent_query.sql", "original_file_path": "macros/utils/percent_query.sql", "unique_id": "macro.elementary.edr_percent", "macro_sql": "{% macro edr_percent(value, total) %}\n    {% set value = elementary.edr_cast_as_float(value) %}\n    {% set total = elementary.edr_cast_as_float(total) %}\n    {% set query %}\n      round({{ elementary.edr_cast_as_numeric('{} / nullif({}, 0) * 100.0'.format(value, total)) }}, 3)\n    {% endset %}\n    {% do return(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_float", "macro.elementary.edr_cast_as_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1826417, "supported_languages": null}, "macro.elementary.contains": {"name": "contains", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/contains.sql", "original_file_path": "macros/utils/cross_db_utils/contains.sql", "unique_id": "macro.elementary.contains", "macro_sql": "{% macro contains(string, string_to_search,case_sensitive=False) -%}\n    {{ adapter.dispatch('contains', 'elementary') (string, string_to_search, case_sensitive) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__contains"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.184631, "supported_languages": null}, "macro.elementary.default__contains": {"name": "default__contains", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/contains.sql", "original_file_path": "macros/utils/cross_db_utils/contains.sql", "unique_id": "macro.elementary.default__contains", "macro_sql": "{% macro default__contains(string, string_to_search, case_sensitive) %}\n    {%- if case_sensitive %}\n        contains({{ string }}, '{{ string_to_search }}')\n    {%- else %}\n        contains(lower({{ string }}), lower('{{ string_to_search }}'))\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1855137, "supported_languages": null}, "macro.elementary.bigquery__contains": {"name": "bigquery__contains", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/contains.sql", "original_file_path": "macros/utils/cross_db_utils/contains.sql", "unique_id": "macro.elementary.bigquery__contains", "macro_sql": "{% macro bigquery__contains(string, string_to_search, case_sensitive) %}\n    {%- if case_sensitive %}\n        contains_substr({{ string }}, '{{ string_to_search }}')\n    {%- else %}\n        {%- set string_to_search = string_to_search | lower %}\n        contains_substr(lower({{ string }}), '{{ string_to_search }}')\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1865127, "supported_languages": null}, "macro.elementary.postgres__contains": {"name": "postgres__contains", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/contains.sql", "original_file_path": "macros/utils/cross_db_utils/contains.sql", "unique_id": "macro.elementary.postgres__contains", "macro_sql": "{% macro postgres__contains(string, string_to_search, case_sensitive) %}\n    {%- if case_sensitive %}\n        case when\n            {{ string }} like '%{{ string_to_search }}%' then true\n        else false end\n    {%- else %}\n        case when\n            lower({{ string }}) like lower('%{{ string_to_search }}%') then true\n        else false end\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1873765, "supported_languages": null}, "macro.elementary.edr_current_timestamp": {"name": "edr_current_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.edr_current_timestamp", "macro_sql": "{% macro edr_current_timestamp() -%}\n    {{ adapter.dispatch('edr_current_timestamp','elementary')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.189984, "supported_languages": null}, "macro.elementary.default__edr_current_timestamp": {"name": "default__edr_current_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.default__edr_current_timestamp", "macro_sql": "{% macro default__edr_current_timestamp() -%}\n    {% set macro = dbt.current_timestamp_backcompat or dbt_utils.current_timestamp %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `current_timestamp` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1912467, "supported_languages": null}, "macro.elementary.databricks__edr_current_timestamp": {"name": "databricks__edr_current_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.databricks__edr_current_timestamp", "macro_sql": "{% macro databricks__edr_current_timestamp() -%}\n    {% set macro = dbt.current_timestamp_backcompat or dbt_utils.current_timestamp %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `current_timestamp` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\u00a7\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1922596, "supported_languages": null}, "macro.elementary.spark__edr_current_timestamp": {"name": "spark__edr_current_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.spark__edr_current_timestamp", "macro_sql": "{% macro spark__edr_current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1925647, "supported_languages": null}, "macro.elementary.edr_current_timestamp_in_utc": {"name": "edr_current_timestamp_in_utc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.edr_current_timestamp_in_utc", "macro_sql": "{% macro edr_current_timestamp_in_utc() -%}\n    {{ adapter.dispatch('edr_current_timestamp_in_utc','elementary')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1932673, "supported_languages": null}, "macro.elementary.default__edr_current_timestamp_in_utc": {"name": "default__edr_current_timestamp_in_utc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.default__edr_current_timestamp_in_utc", "macro_sql": "{% macro default__edr_current_timestamp_in_utc() -%}\n    {% set macro = dbt.current_timestamp_in_utc_backcompat or dbt_utils.current_timestamp_in_utc %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `current_timestamp_in_utc` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1943176, "supported_languages": null}, "macro.elementary.databricks__edr_current_timestamp_in_utc": {"name": "databricks__edr_current_timestamp_in_utc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.databricks__edr_current_timestamp_in_utc", "macro_sql": "{% macro databricks__edr_current_timestamp_in_utc() -%}\n    {% set macro = dbt.current_timestamp_in_utc_backcompat or dbt_utils.current_timestamp_in_utc %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `current_timestamp_in_utc` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.195349, "supported_languages": null}, "macro.elementary.spark__edr_current_timestamp_in_utc": {"name": "spark__edr_current_timestamp_in_utc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.spark__edr_current_timestamp_in_utc", "macro_sql": "{% macro spark__edr_current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1956515, "supported_languages": null}, "macro.elementary.edr_date_trunc": {"name": "edr_date_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "unique_id": "macro.elementary.edr_date_trunc", "macro_sql": "{% macro edr_date_trunc(date_part, date_expression) -%}\n    {{ return(adapter.dispatch('edr_date_trunc', 'elementary') (date_part, date_expression)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.196862, "supported_languages": null}, "macro.elementary.default__edr_date_trunc": {"name": "default__edr_date_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "unique_id": "macro.elementary.default__edr_date_trunc", "macro_sql": "{% macro default__edr_date_trunc(datepart, date_expression) %}\n    {% set macro = dbt.date_trunc or dbt_utils.date_trunc %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `date_trunc` macro.\") }}\n    {% endif %}\n    {{ return(macro(datepart, date_expression)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1980486, "supported_languages": null}, "macro.elementary.bigquery__edr_date_trunc": {"name": "bigquery__edr_date_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "unique_id": "macro.elementary.bigquery__edr_date_trunc", "macro_sql": "{% macro bigquery__edr_date_trunc(date_part, date_expression) %}\n    timestamp_trunc(cast({{ date_expression }} as timestamp), {{ date_part }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1985412, "supported_languages": null}, "macro.elementary.edr_dateadd": {"name": "edr_dateadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/utils/cross_db_utils/dateadd.sql", "unique_id": "macro.elementary.edr_dateadd", "macro_sql": "{% macro edr_dateadd(datepart, interval, from_date_or_timestamp) %}\n    {% set macro = dbt.dateadd or dbt_utils.dateadd %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `dateadd` macro.\") }}\n    {% endif %}\n    {{ return(macro(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.1999972, "supported_languages": null}, "macro.elementary.edr_datediff": {"name": "edr_datediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/datediff.sql", "original_file_path": "macros/utils/cross_db_utils/datediff.sql", "unique_id": "macro.elementary.edr_datediff", "macro_sql": "{% macro edr_datediff(first_date, second_date, date_part) %}\n    {{ return(adapter.dispatch('edr_datediff', 'elementary')(first_date, second_date, date_part)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2019799, "supported_languages": null}, "macro.elementary.default__edr_datediff": {"name": "default__edr_datediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/datediff.sql", "original_file_path": "macros/utils/cross_db_utils/datediff.sql", "unique_id": "macro.elementary.default__edr_datediff", "macro_sql": "{% macro default__edr_datediff(first_date, second_date, date_part) %}\n    {% set macro = dbt.datediff or dbt_utils.datediff %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `datediff` macro.\") }}\n    {% endif %}\n    {{ return(macro(first_date, second_date, date_part)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2032073, "supported_languages": null}, "macro.elementary.bigquery__edr_datediff": {"name": "bigquery__edr_datediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/datediff.sql", "original_file_path": "macros/utils/cross_db_utils/datediff.sql", "unique_id": "macro.elementary.bigquery__edr_datediff", "macro_sql": "{% macro bigquery__edr_datediff(first_date, second_date, date_part) %}\n    {%- if date_part | lower in ['second', 'minute', 'hour', 'day'] %}\n        timestamp_diff({{ second_date }}, {{ first_date }}, {{ date_part }})\n    {%- elif date_part | lower in ['week', 'month', 'quarter', 'year'] %}\n        {% set macro = dbt.datediff or dbt_utils.datediff %}\n        {% if not macro %}\n            {{ exceptions.raise_compiler_error(\"Did not find a `datediff` macro.\") }}\n        {% endif %}\n        {{ return(macro(elementary.edr_cast_as_date(first_date), elementary.edr_cast_as_date(second_date), date_part)) }}\n    {%- else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported date_part in edr_datediff: \".format(date_part)) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.206089, "supported_languages": null}, "macro.elementary.edr_day_of_week_expression": {"name": "edr_day_of_week_expression", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/day_of_week.sql", "original_file_path": "macros/utils/cross_db_utils/day_of_week.sql", "unique_id": "macro.elementary.edr_day_of_week_expression", "macro_sql": "{% macro edr_day_of_week_expression(date_expr) %}\n    {{ return(adapter.dispatch('edr_day_of_week_expression','elementary')(elementary.edr_cast_as_date(date_expr))) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.snowflake__edr_day_of_week_expression", "macro.elementary.edr_cast_as_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2074494, "supported_languages": null}, "macro.elementary.default__edr_day_of_week_expression": {"name": "default__edr_day_of_week_expression", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/day_of_week.sql", "original_file_path": "macros/utils/cross_db_utils/day_of_week.sql", "unique_id": "macro.elementary.default__edr_day_of_week_expression", "macro_sql": "{% macro default__edr_day_of_week_expression(date_expr) %}\n    DATE_FORMAT({{ date_expr }}, 'EEEE')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2078695, "supported_languages": null}, "macro.elementary.bigquery__edr_day_of_week_expression": {"name": "bigquery__edr_day_of_week_expression", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/day_of_week.sql", "original_file_path": "macros/utils/cross_db_utils/day_of_week.sql", "unique_id": "macro.elementary.bigquery__edr_day_of_week_expression", "macro_sql": "{% macro bigquery__edr_day_of_week_expression(date_expr) %}\n    FORMAT_DATE('%A', {{ date_expr }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2082753, "supported_languages": null}, "macro.elementary.postgres__edr_day_of_week_expression": {"name": "postgres__edr_day_of_week_expression", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/day_of_week.sql", "original_file_path": "macros/utils/cross_db_utils/day_of_week.sql", "unique_id": "macro.elementary.postgres__edr_day_of_week_expression", "macro_sql": "{% macro postgres__edr_day_of_week_expression(date_expr) %}\n    to_char({{ date_expr }}, 'Day')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2086673, "supported_languages": null}, "macro.elementary.redshift__edr_day_of_week_expression": {"name": "redshift__edr_day_of_week_expression", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/day_of_week.sql", "original_file_path": "macros/utils/cross_db_utils/day_of_week.sql", "unique_id": "macro.elementary.redshift__edr_day_of_week_expression", "macro_sql": "{% macro redshift__edr_day_of_week_expression(date_expr) %}\n{# Redshift returns the days padded with whitespaces to width of 9 #}\n    trim(' ' FROM to_char({{ date_expr }}, 'Day'))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2091324, "supported_languages": null}, "macro.elementary.snowflake__edr_day_of_week_expression": {"name": "snowflake__edr_day_of_week_expression", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/day_of_week.sql", "original_file_path": "macros/utils/cross_db_utils/day_of_week.sql", "unique_id": "macro.elementary.snowflake__edr_day_of_week_expression", "macro_sql": "{% macro snowflake__edr_day_of_week_expression(date_expr) %}\n{# copied from Snowflake help docs: https://docs.snowflake.com/en/user-guide/date-time-examples #}\n    DECODE (EXTRACT('dayofweek',{{ date_expr }}),\n    1 , 'Monday',\n    2 , 'Tuesday',\n    3 , 'Wednesday',\n    4 , 'Thursday',\n    5 , 'Friday',\n    6 , 'Saturday',\n    0 , 'Sunday'\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2095954, "supported_languages": null}, "macro.elementary.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/generate_surrogate_key.sql", "original_file_path": "macros/utils/cross_db_utils/generate_surrogate_key.sql", "unique_id": "macro.elementary.generate_surrogate_key", "macro_sql": "\n\n\n{%- macro generate_surrogate_key(fields) -%}\n  {% set concat_macro = dbt.concat or dbt_utils.concat %}\n  {% set hash_macro = dbt.hash or dbt_utils.hash %}\n\n  {% set default_null_value = \"\" %}\n  {%- set field_sqls = [] -%}\n  {%- for field in fields -%}\n    {%- do field_sqls.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ elementary.edr_type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n    {%- if not loop.last %}\n        {%- do field_sqls.append(\"'-'\") -%}\n    {%- endif -%}\n  {%- endfor -%}\n  {{ hash_macro(concat_macro(field_sqls)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2123399, "supported_languages": null}, "macro.elementary.get_json_path": {"name": "get_json_path", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/get_json_path.sql", "original_file_path": "macros/utils/cross_db_utils/get_json_path.sql", "unique_id": "macro.elementary.get_json_path", "macro_sql": "{% macro get_json_path(json_column, json_path) -%}\n    {%- set quoted_json_path = \"'\" ~ json_path ~ \"'\" %}\n    {{ adapter.dispatch('get_json_path', 'elementary') (json_column, json_path, quoted_json_path) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.snowflake__get_json_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2143428, "supported_languages": null}, "macro.elementary.databricks__get_json_path": {"name": "databricks__get_json_path", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/get_json_path.sql", "original_file_path": "macros/utils/cross_db_utils/get_json_path.sql", "unique_id": "macro.elementary.databricks__get_json_path", "macro_sql": "{% macro databricks__get_json_path(json_column, json_path, quoted_json_path) %}\n    get_json_object(to_json({{ json_column }}), {{ quoted_json_path }}))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.21489, "supported_languages": null}, "macro.elementary.snowflake__get_json_path": {"name": "snowflake__get_json_path", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/get_json_path.sql", "original_file_path": "macros/utils/cross_db_utils/get_json_path.sql", "unique_id": "macro.elementary.snowflake__get_json_path", "macro_sql": "{% macro snowflake__get_json_path(json_column, json_path, quoted_json_path) %}\n    json_extract_path_text(try_parse_json({{ json_column }}), {{ quoted_json_path }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2154293, "supported_languages": null}, "macro.elementary.redshift__get_json_path": {"name": "redshift__get_json_path", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/get_json_path.sql", "original_file_path": "macros/utils/cross_db_utils/get_json_path.sql", "unique_id": "macro.elementary.redshift__get_json_path", "macro_sql": "{% macro redshift__get_json_path(json_column, json_path, quoted_json_path) %}\n    case when is_valid_json({{ json_column }}) then json_extract_path_text({{ json_column }}, {{ quoted_json_path }}) else null end\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2162812, "supported_languages": null}, "macro.elementary.bigquery__get_json_path": {"name": "bigquery__get_json_path", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/get_json_path.sql", "original_file_path": "macros/utils/cross_db_utils/get_json_path.sql", "unique_id": "macro.elementary.bigquery__get_json_path", "macro_sql": "{% macro bigquery__get_json_path(json_column, json_path, quoted_json_path) %}\n    json_value(to_json({{ json_column }}), {{ \"'$.\" ~ json_path ~ \"'\" }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2169094, "supported_languages": null}, "macro.elementary.postgres__get_json_path": {"name": "postgres__get_json_path", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/get_json_path.sql", "original_file_path": "macros/utils/cross_db_utils/get_json_path.sql", "unique_id": "macro.elementary.postgres__get_json_path", "macro_sql": "{% macro postgres__get_json_path(json_column, json_path, quoted_json_path) %}\n  {{ json_column }}::json->>{{ quoted_json_path }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.217449, "supported_languages": null}, "macro.elementary.edr_quote": {"name": "edr_quote", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "unique_id": "macro.elementary.edr_quote", "macro_sql": "{% macro edr_quote(str) %}\n    {% set escaped_str = elementary.escape_special_chars(str) %}\n    {% do return(\"'{}'\".format(escaped_str)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.escape_special_chars"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.218786, "supported_languages": null}, "macro.elementary.dict_to_quoted_json": {"name": "dict_to_quoted_json", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "unique_id": "macro.elementary.dict_to_quoted_json", "macro_sql": "{% macro dict_to_quoted_json(d) %}\n    {% do return(elementary.edr_cast_as_string(elementary.edr_quote(tojson(d, sort_keys=true)))) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_string", "macro.elementary.edr_quote"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2195957, "supported_languages": null}, "macro.elementary.edr_quote_column": {"name": "edr_quote_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "unique_id": "macro.elementary.edr_quote_column", "macro_sql": "\n\n{%- macro edr_quote_column(column_name) -%}\n    {% if adapter.quote(column_name[1:-1]) == column_name %}\n        {{ return(column_name) }}\n    {% else %}\n        {% set quoted_column = adapter.quote(column_name) %}\n        {{ return(quoted_column) }}\n    {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2209392, "supported_languages": null}, "macro.elementary.edr_safe_cast": {"name": "edr_safe_cast", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/safe_cast.sql", "original_file_path": "macros/utils/cross_db_utils/safe_cast.sql", "unique_id": "macro.elementary.edr_safe_cast", "macro_sql": "{% macro edr_safe_cast(field, type) %}\n    {{ return(adapter.dispatch('edr_safe_cast', 'elementary') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.222143, "supported_languages": null}, "macro.elementary.default__edr_safe_cast": {"name": "default__edr_safe_cast", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/safe_cast.sql", "original_file_path": "macros/utils/cross_db_utils/safe_cast.sql", "unique_id": "macro.elementary.default__edr_safe_cast", "macro_sql": "{% macro default__edr_safe_cast(field, type) %}\n    {% set macro = dbt.safe_cast or dbt_utils.safe_cast %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `safe_cast` macro.\") }}\n    {% endif %}\n    {{ return(macro(field, type)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.223339, "supported_languages": null}, "macro.elementary.spark__edr_safe_cast": {"name": "spark__edr_safe_cast", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/safe_cast.sql", "original_file_path": "macros/utils/cross_db_utils/safe_cast.sql", "unique_id": "macro.elementary.spark__edr_safe_cast", "macro_sql": "{% macro spark__edr_safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.223829, "supported_languages": null}, "macro.elementary.target_database": {"name": "target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.target_database", "macro_sql": "{% macro target_database() -%}\n    {{ return(adapter.dispatch('target_database', 'elementary')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.snowflake__target_database"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2249482, "supported_languages": null}, "macro.elementary.default__target_database": {"name": "default__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.default__target_database", "macro_sql": "{% macro default__target_database() %}\n    {% do return(target.dbname) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2254481, "supported_languages": null}, "macro.elementary.spark__target_database": {"name": "spark__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.spark__target_database", "macro_sql": "{% macro spark__target_database() %}\n    {% do return(target.catalog or none) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2260008, "supported_languages": null}, "macro.elementary.snowflake__target_database": {"name": "snowflake__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.snowflake__target_database", "macro_sql": "{% macro snowflake__target_database() %}\n    {% do return(target.database) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2265024, "supported_languages": null}, "macro.elementary.bigquery__target_database": {"name": "bigquery__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.bigquery__target_database", "macro_sql": "{% macro bigquery__target_database() %}\n    {% do return(target.project) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2270093, "supported_languages": null}, "macro.elementary.edr_time_trunc": {"name": "edr_time_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/time_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/time_trunc.sql", "unique_id": "macro.elementary.edr_time_trunc", "macro_sql": "{% macro edr_time_trunc(date_part, date_expression) -%}\n    {{ return(adapter.dispatch('edr_time_trunc', 'elementary') (date_part, date_expression)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_time_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.228127, "supported_languages": null}, "macro.elementary.default__edr_time_trunc": {"name": "default__edr_time_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/time_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/time_trunc.sql", "unique_id": "macro.elementary.default__edr_time_trunc", "macro_sql": "{% macro default__edr_time_trunc(date_part, date_expression) %}\n    date_trunc('{{date_part}}', cast({{ date_expression }} as {{ elementary.edr_type_timestamp() }}))\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.228778, "supported_languages": null}, "macro.elementary.bigquery__edr_time_trunc": {"name": "bigquery__edr_time_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/time_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/time_trunc.sql", "unique_id": "macro.elementary.bigquery__edr_time_trunc", "macro_sql": "{% macro bigquery__edr_time_trunc(date_part, date_expression) %}\n    timestamp_trunc(cast({{ date_expression }} as timestamp), {{ date_part }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.229288, "supported_languages": null}, "macro.elementary.edr_timeadd": {"name": "edr_timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.edr_timeadd", "macro_sql": "{% macro edr_timeadd(date_part, number, timestamp_expression) -%}\n    {{ return(adapter.dispatch('edr_timeadd', 'elementary')(date_part, number, timestamp_expression)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_timeadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2314816, "supported_languages": null}, "macro.elementary.default__edr_timeadd": {"name": "default__edr_timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.default__edr_timeadd", "macro_sql": "{% macro default__edr_timeadd(date_part, number, timestamp_expression) %}\n    dateadd({{ date_part }}, {{ elementary.edr_cast_as_int(number) }}, {{ elementary.edr_cast_as_timestamp(timestamp_expression) }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_int", "macro.elementary.edr_cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2322557, "supported_languages": null}, "macro.elementary.bigquery__edr_timeadd": {"name": "bigquery__edr_timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.bigquery__edr_timeadd", "macro_sql": "{% macro bigquery__edr_timeadd(date_part, number, timestamp_expression) %}\n    {%- if date_part | lower in ['second', 'minute', 'hour', 'day'] %}\n       timestamp_add({{ elementary.edr_cast_as_timestamp(timestamp_expression) }}, INTERVAL {{ elementary.edr_cast_as_int(number) }} {{ date_part }})\n    {%- elif date_part | lower in ['week', 'month', 'quarter', 'year'] %}\n       date_add({{ elementary.edr_cast_as_date(timestamp_expression) }}, INTERVAL {{ elementary.edr_cast_as_int(number) }} {{ date_part }})\n    {%- else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported date_part in edr_timeadd: \".format(date_part)) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_cast_as_int", "macro.elementary.edr_cast_as_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2350888, "supported_languages": null}, "macro.elementary.postgres__edr_timeadd": {"name": "postgres__edr_timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.postgres__edr_timeadd", "macro_sql": "{% macro postgres__edr_timeadd(date_part, number, timestamp_expression) %}\n    {{ elementary.edr_cast_as_timestamp(timestamp_expression) }} + {{ elementary.edr_cast_as_int(number) }} * INTERVAL '1 {{ date_part }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_cast_as_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2358866, "supported_languages": null}, "macro.elementary.redshift__edr_timeadd": {"name": "redshift__edr_timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.redshift__edr_timeadd", "macro_sql": "{% macro redshift__edr_timeadd(date_part, number, timestamp_expression) %}\n    dateadd({{ date_part }}, {{ elementary.edr_cast_as_int(number) }}, {{ elementary.edr_cast_as_timestamp(timestamp_expression) }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_int", "macro.elementary.edr_cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2366593, "supported_languages": null}, "macro.elementary.timediff": {"name": "timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.timediff", "macro_sql": "{% macro timediff(timepart, first_timestamp, second_timestamp) -%}\n    {{ return(adapter.dispatch('timediff', 'elementary')(timepart, first_timestamp, second_timestamp)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__timediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2378972, "supported_languages": null}, "macro.elementary.default__timediff": {"name": "default__timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.default__timediff", "macro_sql": "{% macro default__timediff(timepart, first_timestamp, second_timestamp) %}\n    {{ elementary.edr_datediff(first_timestamp, second_timestamp, timepart)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2385252, "supported_languages": null}, "macro.elementary.bigquery__timediff": {"name": "bigquery__timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.bigquery__timediff", "macro_sql": "{% macro bigquery__timediff(timepart, first_timestamp, second_timestamp) %}\n    timestamp_diff({{ second_timestamp }}, {{ first_timestamp }}, {{ timepart }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2391174, "supported_languages": null}, "macro.elementary.edr_to_char": {"name": "edr_to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.edr_to_char", "macro_sql": "{% macro edr_to_char(column, format) -%}\n    {{ return(adapter.dispatch('edr_to_char', 'elementary')(column, format)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_to_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2404816, "supported_languages": null}, "macro.elementary.default__edr_to_char": {"name": "default__edr_to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.default__edr_to_char", "macro_sql": "{% macro default__edr_to_char(column, format) %}\n    to_char({{ column }} {%- if format %}, '{{ format }}'){%- else %}, 'YYYY-MM-DD HH:MI:SS'){%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2412317, "supported_languages": null}, "macro.elementary.bigquery__edr_to_char": {"name": "bigquery__edr_to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.bigquery__edr_to_char", "macro_sql": "{% macro bigquery__edr_to_char(column, format) %}\n    cast({{ column }} as STRING {%- if format %} FORMAT '{{ format }}'){%- else %}){%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2419496, "supported_languages": null}, "macro.elementary.spark__edr_to_char": {"name": "spark__edr_to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.spark__edr_to_char", "macro_sql": "{% macro spark__edr_to_char(column, format) %}\n    date_format({{ column }} {%- if format %}, '{{ format }}'){%- else %}, 'YYYY-MM-DD HH:MI:SS'){%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2426496, "supported_languages": null}, "macro.elementary.edr_cast_as_timestamp": {"name": "edr_cast_as_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_timestamp", "macro_sql": "{%- macro edr_cast_as_timestamp(timestamp_field) -%}\n    cast({{ timestamp_field }} as {{ elementary.edr_type_timestamp() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.245281, "supported_languages": null}, "macro.elementary.edr_cast_as_float": {"name": "edr_cast_as_float", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_float", "macro_sql": "{%- macro edr_cast_as_float(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_float() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2458215, "supported_languages": null}, "macro.elementary.edr_cast_as_numeric": {"name": "edr_cast_as_numeric", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_numeric", "macro_sql": "{%- macro edr_cast_as_numeric(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_numeric() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2463458, "supported_languages": null}, "macro.elementary.edr_cast_as_int": {"name": "edr_cast_as_int", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_int", "macro_sql": "{%- macro edr_cast_as_int(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_int() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2468703, "supported_languages": null}, "macro.elementary.edr_cast_as_string": {"name": "edr_cast_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_string", "macro_sql": "{%- macro edr_cast_as_string(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_string() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2474062, "supported_languages": null}, "macro.elementary.edr_cast_as_long_string": {"name": "edr_cast_as_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_long_string", "macro_sql": "{%- macro edr_cast_as_long_string(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_long_string() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_long_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2479305, "supported_languages": null}, "macro.elementary.edr_cast_as_bool": {"name": "edr_cast_as_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_bool", "macro_sql": "{%- macro edr_cast_as_bool(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_bool() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.248463, "supported_languages": null}, "macro.elementary.const_as_string": {"name": "const_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.const_as_string", "macro_sql": "{%- macro const_as_string(string) -%}\n    cast('{{ string }}' as {{ elementary.edr_type_string() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2490332, "supported_languages": null}, "macro.elementary.edr_cast_as_date": {"name": "edr_cast_as_date", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_date", "macro_sql": "{%- macro edr_cast_as_date(timestamp_field) -%}\n    {{ return(adapter.dispatch('edr_cast_as_date', 'elementary')(timestamp_field)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.default__edr_cast_as_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2497058, "supported_languages": null}, "macro.elementary.default__edr_cast_as_date": {"name": "default__edr_cast_as_date", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.default__edr_cast_as_date", "macro_sql": "{%- macro default__edr_cast_as_date(timestamp_field) -%}\n    cast({{ timestamp_field }} as {{ elementary.edr_type_date() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2502334, "supported_languages": null}, "macro.elementary.bigquery__edr_cast_as_date": {"name": "bigquery__edr_cast_as_date", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.bigquery__edr_cast_as_date", "macro_sql": "\n{%- macro bigquery__edr_cast_as_date(timestamp_field) -%}\n    cast({{ elementary.edr_cast_as_timestamp(timestamp_field) }} as {{ elementary.edr_type_date() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_type_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.25085, "supported_languages": null}, "macro.elementary.const_as_text": {"name": "const_as_text", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.const_as_text", "macro_sql": "{%- macro const_as_text(string) -%}\n    {{ return(adapter.dispatch('const_as_text', 'elementary')(string)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.default__const_as_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2515059, "supported_languages": null}, "macro.elementary.default__const_as_text": {"name": "default__const_as_text", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.default__const_as_text", "macro_sql": "{%- macro default__const_as_text(string) -%}\n    {{ elementary.const_as_string(string) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.const_as_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.251978, "supported_languages": null}, "macro.elementary.redshift__const_as_text": {"name": "redshift__const_as_text", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.redshift__const_as_text", "macro_sql": "{%- macro redshift__const_as_text(string) -%}\n    '{{ string }}'::text\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2523835, "supported_languages": null}, "macro.elementary.get_column_size": {"name": "get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.get_column_size", "macro_sql": "{% macro get_column_size() %}\n  {{ return(adapter.dispatch('get_column_size', 'elementary')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.snowflake__get_column_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.253892, "supported_languages": null}, "macro.elementary.default__get_column_size": {"name": "default__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.default__get_column_size", "macro_sql": "{% macro default__get_column_size() %}\n  {{ return(elementary.get_config_var('long_string_size')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2544522, "supported_languages": null}, "macro.elementary.postgres__get_column_size": {"name": "postgres__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.postgres__get_column_size", "macro_sql": "{% macro postgres__get_column_size() %}\n  {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2548943, "supported_languages": null}, "macro.elementary.snowflake__get_column_size": {"name": "snowflake__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.snowflake__get_column_size", "macro_sql": "{% macro snowflake__get_column_size() %}\n  {{ return(16777216) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.255345, "supported_languages": null}, "macro.elementary.bigquery__get_column_size": {"name": "bigquery__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.bigquery__get_column_size", "macro_sql": "{% macro bigquery__get_column_size() %}\n  {{ return(10485760) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2557838, "supported_languages": null}, "macro.elementary.redshift__get_column_size": {"name": "redshift__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.redshift__get_column_size", "macro_sql": "{% macro redshift__get_column_size() %}\n  {{ return(elementary.default__get_column_size()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__get_column_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2562735, "supported_languages": null}, "macro.elementary.is_primitive": {"name": "is_primitive", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.is_primitive", "macro_sql": "{% macro is_primitive(val) %}\n  {% do return (\n    val is none or\n    val is boolean or\n    val is number or\n    val is string\n  ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2610724, "supported_languages": null}, "macro.elementary.edr_type_bool": {"name": "edr_type_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_bool", "macro_sql": "\n\n{%- macro edr_type_bool() -%}\n    {{ return(adapter.dispatch('edr_type_bool', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.default__edr_type_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2617013, "supported_languages": null}, "macro.elementary.default__edr_type_bool": {"name": "default__edr_type_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.default__edr_type_bool", "macro_sql": "{% macro default__edr_type_bool() %}\n    {% do return(\"boolean\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.262181, "supported_languages": null}, "macro.elementary.bigquery__edr_type_bool": {"name": "bigquery__edr_type_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.bigquery__edr_type_bool", "macro_sql": "{% macro bigquery__edr_type_bool() %}\n    {% do return(\"BOOL\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.262663, "supported_languages": null}, "macro.elementary.edr_type_string": {"name": "edr_type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_string", "macro_sql": "\n\n\n{%- macro edr_type_string() -%}\n    {{ return(adapter.dispatch('edr_type_string', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.snowflake__edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2632685, "supported_languages": null}, "macro.elementary.default__edr_type_string": {"name": "default__edr_type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.default__edr_type_string", "macro_sql": "{% macro default__edr_type_string() %}\n    {# Redshift and Postgres #}\n    {% do return(\"varchar(4096)\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.263777, "supported_languages": null}, "macro.elementary.snowflake__edr_type_string": {"name": "snowflake__edr_type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.snowflake__edr_type_string", "macro_sql": "{% macro snowflake__edr_type_string() %}\n    {# Default max varchar size in Snowflake is 16MB #}\n    {% do return(\"varchar\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2642841, "supported_languages": null}, "macro.elementary.bigquery__edr_type_string": {"name": "bigquery__edr_type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.bigquery__edr_type_string", "macro_sql": "{% macro bigquery__edr_type_string() %}\n    {# Default max string size in Bigquery is 65K #}\n    {% do return(\"string\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2648282, "supported_languages": null}, "macro.elementary.spark__edr_type_string": {"name": "spark__edr_type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.spark__edr_type_string", "macro_sql": "{% macro spark__edr_type_string() %}\n    {% do return(\"string\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2653155, "supported_languages": null}, "macro.elementary.edr_type_long_string": {"name": "edr_type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_long_string", "macro_sql": "\n\n\n\n{%- macro edr_type_long_string() -%}\n    {{ return(adapter.dispatch('edr_type_long_string', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.default__edr_type_long_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2659218, "supported_languages": null}, "macro.elementary.default__edr_type_long_string": {"name": "default__edr_type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.default__edr_type_long_string", "macro_sql": "{%- macro default__edr_type_long_string() -%}\n    {# Snowflake, Bigquery, Databricks #}\n    {% do return(elementary.edr_type_string()) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2664514, "supported_languages": null}, "macro.elementary.redshift__edr_type_long_string": {"name": "redshift__edr_type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.redshift__edr_type_long_string", "macro_sql": "{%- macro redshift__edr_type_long_string() -%}\n    {% set long_string = 'varchar(' ~ elementary.get_config_var('long_string_size') ~ ')' %}\n    {{ return(long_string) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2672007, "supported_languages": null}, "macro.elementary.postgres__edr_type_long_string": {"name": "postgres__edr_type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.postgres__edr_type_long_string", "macro_sql": "{%- macro postgres__edr_type_long_string() -%}\n    {% set long_string = 'text' %}\n    {{ return(long_string) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2677734, "supported_languages": null}, "macro.elementary.edr_type_bigint": {"name": "edr_type_bigint", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_bigint", "macro_sql": "{% macro edr_type_bigint() %}\n    {% set macro = dbt.type_bigint or dbt_utils.type_bigint %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `type_bigint` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2688587, "supported_languages": null}, "macro.elementary.edr_type_float": {"name": "edr_type_float", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_float", "macro_sql": "{% macro edr_type_float() %}\n    {% set macro = dbt.type_float or dbt_utils.type_float %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `type_float` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2701795, "supported_languages": null}, "macro.elementary.edr_type_int": {"name": "edr_type_int", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_int", "macro_sql": "{% macro edr_type_int() %}\n    {% set macro = dbt.type_int or dbt_utils.type_int %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `type_int` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2712364, "supported_languages": null}, "macro.elementary.edr_type_timestamp": {"name": "edr_type_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_timestamp", "macro_sql": "{% macro edr_type_timestamp() %}\n    {% set macro = dbt.type_timestamp or dbt_utils.type_timestamp %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `type_timestamp` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2722769, "supported_languages": null}, "macro.elementary.edr_type_numeric": {"name": "edr_type_numeric", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_numeric", "macro_sql": "{% macro edr_type_numeric() %}\n    {% set macro = dbt.type_numeric or dbt_utils.type_numeric %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `type_numeric` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2733772, "supported_languages": null}, "macro.elementary.edr_type_date": {"name": "edr_type_date", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_date", "macro_sql": "{% macro edr_type_date() %}\n    {{ return(adapter.dispatch('edr_type_date', 'elementary')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_type_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.274011, "supported_languages": null}, "macro.elementary.default__edr_type_date": {"name": "default__edr_type_date", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.default__edr_type_date", "macro_sql": "{% macro default__edr_type_date() %}\n    {{ elementary.edr_type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2744484, "supported_languages": null}, "macro.elementary.bigquery__edr_type_date": {"name": "bigquery__edr_type_date", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.bigquery__edr_type_date", "macro_sql": "{% macro bigquery__edr_type_date() %}\n    date\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2747498, "supported_languages": null}, "macro.elementary.data_type_list": {"name": "data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.data_type_list", "macro_sql": "{% macro data_type_list(data_type) %}\n    {% set result = adapter.dispatch('data_type_list','elementary')(data_type) %}\n    {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.snowflake__data_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2806578, "supported_languages": null}, "macro.elementary.default__data_type_list": {"name": "default__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.default__data_type_list", "macro_sql": "{% macro default__data_type_list(data_type) %}\n\n    {% set string_list = ['character varying','varchar','character','char','text','nchar','bpchar','string'] | list %}\n    {% set numeric_list = ['integer', 'bigint','smallint','decimal','numeric','real','double precision','enum','int2','int4','int','int8','float8','float'] | list %}\n    {% set timestamp_list = ['date', 'timestamp','timestamptz','timestamp without time zone','timestamp with time zone'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2836828, "supported_languages": null}, "macro.elementary.bigquery__data_type_list": {"name": "bigquery__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.bigquery__data_type_list", "macro_sql": "{% macro bigquery__data_type_list(data_type) %}\n\n    {% set string_list = ['STRING'] | list %}\n    {% set numeric_list = ['INT64','NUMERIC','BIGNUMERIC','FLOAT64','INTEGER'] | list %}\n    {% set timestamp_list = ['DATE','DATETIME','TIMESTAMP'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.285996, "supported_languages": null}, "macro.elementary.snowflake__data_type_list": {"name": "snowflake__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.snowflake__data_type_list", "macro_sql": "{% macro snowflake__data_type_list(data_type) %}\n\n    {% set string_list = ['VARCHAR','CHAR','CHARACTER','STRING','TEXT'] | list %}\n    {% set numeric_list = ['NUMBER','DECIMAL','NUMERIC','INT','INTEGER','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL'] | list %}\n    {% set timestamp_list = ['DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2889333, "supported_languages": null}, "macro.elementary.spark__data_type_list": {"name": "spark__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.spark__data_type_list", "macro_sql": "{% macro spark__data_type_list(data_type) %}\n\n    {% set string_list = ['string'] | list %}\n    {% set numeric_list = ['int','bigint','smallint','tinyint','float','double','long','short','decimal'] | list %}\n    {% set timestamp_list = ['timestamp','date'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2913206, "supported_languages": null}, "macro.elementary.get_normalized_data_type": {"name": "get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.get_normalized_data_type", "macro_sql": "{% macro get_normalized_data_type(exact_data_type) %}\n    {% if exact_data_type is none %}\n       {{ return (exact_data_type) }}\n    {% endif %}\n    {% set exact_data_type_uppercase = exact_data_type | upper %}\n    {% set result = adapter.dispatch('get_normalized_data_type','elementary')(exact_data_type_uppercase) %}\n    {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.snowflake__get_normalized_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.295859, "supported_languages": null}, "macro.elementary.default__get_normalized_data_type": {"name": "default__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.default__get_normalized_data_type", "macro_sql": "{% macro default__get_normalized_data_type(exact_data_type) %}\n   {{return (exact_data_type) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2963417, "supported_languages": null}, "macro.elementary.bigquery__get_normalized_data_type": {"name": "bigquery__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.bigquery__get_normalized_data_type", "macro_sql": "{% macro bigquery__get_normalized_data_type(exact_data_type) %}\n{# BigQuery has no concept of data type synonyms,\n see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types #}\n   {{return (exact_data_type) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2968597, "supported_languages": null}, "macro.elementary.snowflake__get_normalized_data_type": {"name": "snowflake__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.snowflake__get_normalized_data_type", "macro_sql": "{% macro snowflake__get_normalized_data_type(exact_data_type) %}\n{# understanding Snowflake data type synonyms:\n https://docs.snowflake.com/en/sql-reference/intro-summary-data-types.html #}\n {% set exact_data_type_to_data_type_returned_by_the_info_schema = {'VARCHAR': 'TEXT',\n                'STRING': 'TEXT',\n                'NVARCHAR': 'TEXT',\n                'NUMERIC': 'NUMBER',\n                'DECIMAL': 'NUMBER',\n                'INT':'NUMBER',\n                'INTEGER':'NUMBER',\n                'SMALLINT':'NUMBER',\n                'BIGINT':'NUMBER',\n                'TINYINT':'NUMBER',\n                'BYTEINT':'NUMBER',\n                'REAL': 'FLOAT',\n                'DOUBLE':'FLOAT',\n                'DOUBLE PRECISION': 'FLOAT'\n                }%}\n {%- if exact_data_type in exact_data_type_to_data_type_returned_by_the_info_schema%}\n   {{ return (exact_data_type_to_data_type_returned_by_the_info_schema[exact_data_type])}}\n {%- else %}\n   {{return (exact_data_type) }}\n {%- endif%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2991076, "supported_languages": null}, "macro.elementary.spark__get_normalized_data_type": {"name": "spark__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.spark__get_normalized_data_type", "macro_sql": "{% macro spark__get_normalized_data_type(exact_data_type) %}\n{# spark also has no concept of data type synonyms :\n   see https://spark.apache.org/docs/latest/sql-ref-datatypes.html #}\n   {{return (exact_data_type) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.2996151, "supported_languages": null}, "macro.elementary.redshift__get_normalized_data_type": {"name": "redshift__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.redshift__get_normalized_data_type", "macro_sql": "{% macro redshift__get_normalized_data_type(exact_data_type) %}\n{# understanding Redshift data type synonyms:\n https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html #}\n {% set exact_data_type_to_data_type_returned_by_the_info_schema = {'INT2':\t'SMALLINT',\n                                                                   'INT':\t'INTEGER',\n                                                                   'INT4':\t'INTEGER',\n                                                                   'INT8':\t'BIGINT',\n                                                                   'NUMERIC':\t'DECIMAL',\n                                                                   'FLOAT4':\t'REAL',\n                                                                   'FLOAT8':\t'DOUBLE PRECISION',\n                                                                   'FLOAT':\t'DOUBLE PRECISION',\n                                                                   'BOOL':\t'BOOLEAN',\n                                                                   'CHARACTER':\t'CHAR',\n                                                                   'NCHAR':\t'CHAR',\n                                                                   'BPCHAR':\t'CHAR',\n                                                                   'VARCHAR': 'CHARACTER VARYING',\n                                                                   'NVARCHAR':\t'CHARACTER VARYING',\n                                                                   'TEXT':\t'CHARACTER VARYING',\n                                                                   'TIMESTAMP': 'TIMESTAMP WITHOUT TIME ZONE',\n                                                                   'TIMESTAMPTZ': 'TIMESTAMP WITH TIME ZONE',\n                                                                   'TIME': 'TIME WITHOUT TIME ZONE',\n                                                                   'TIME WITH TIME ZONE':\t'TIMETZ',\n                                                                   'VARBINARY': 'BINARY VARYING',\n                                                                   'VARBYTE': 'BINARY VARYING'} %}\n {%- if exact_data_type in exact_data_type_to_data_type_returned_by_the_info_schema%}\n   {{ return (exact_data_type_to_data_type_returned_by_the_info_schema[exact_data_type])}}\n {%- else %}\n   {{return (exact_data_type) }}\n {%- endif%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3024683, "supported_languages": null}, "macro.elementary.postgres__get_normalized_data_type": {"name": "postgres__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.postgres__get_normalized_data_type", "macro_sql": "{% macro postgres__get_normalized_data_type(exact_data_type) %}\n{# understanding Postgres data type synonyms:\n https://www.postgresql.org/docs/current/datatype.html #}\n {% set exact_data_type_to_data_type_returned_by_the_info_schema =  {'BIGINT': 'INT8',\n                                                                    'BIGSERIAL': 'SERIAL8',\n                                                                    'BIT VARYING': 'VARBIT',\n                                                                    'BOOLEAN': 'BOOL',\n                                                                    'CHARACTER': 'CHAR',\n                                                                    'CHARACTER VARYING': 'VARCHAR',\n                                                                    'DOUBLE PRECISION': 'FLOAT8',\n                                                                    'INTEGER': 'INT, INT4',\n                                                                    'NUMERIC': 'DECIMAL',\n                                                                    'REAL': 'FLOAT4',\n                                                                    'SMALLINT': 'INT2',\n                                                                    'SMALLSERIAL': 'SERIAL2',\n                                                                    'SERIAL': 'SERIAL4',\n                                                                    'TIME WITH TIME ZONE': 'TIMETZ',\n                                                                    'TIMESTAMP WITH TIME ZONE': 'TIMESTAMPTZ'} %}\n {%- if exact_data_type in exact_data_type_to_data_type_returned_by_the_info_schema%}\n   {{ return (exact_data_type_to_data_type_returned_by_the_info_schema[exact_data_type])}}\n {%- else %}\n   {{return (exact_data_type) }}\n {%- endif%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3051033, "supported_languages": null}, "macro.elementary.normalize_data_type": {"name": "normalize_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/normalize_data_type.sql", "original_file_path": "macros/utils/data_types/normalize_data_type.sql", "unique_id": "macro.elementary.normalize_data_type", "macro_sql": "{% macro normalize_data_type(data_type) %}\n\n    {# In case data type has precision info - e.g. decimal is in the format decimal(p,s) #}\n    {%- if '(' in data_type %}\n        {%- set data_type = data_type.split('(')[0] %}\n    {%- endif %}\n\n    {%- if data_type is defined and data_type is not none %}\n        {%- if data_type in elementary.data_type_list('string') %}\n            {{ return('string') }}\n        {%- elif data_type in elementary.data_type_list('numeric') %}\n            {{ return('numeric') }}\n        {%- elif data_type in elementary.data_type_list('timestamp') %}\n            {{ return('timestamp') }}\n        {%- else %}\n            {{ return('other') }}\n        {% endif %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.data_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3081105, "supported_languages": null}, "macro.elementary.null_int": {"name": "null_int", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_int", "macro_sql": "{%- macro null_int() -%}\n    cast(null as {{ elementary.edr_type_int() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.308932, "supported_languages": null}, "macro.elementary.null_timestamp": {"name": "null_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_timestamp", "macro_sql": "{%- macro null_timestamp() -%}\n    cast(null as {{ elementary.edr_type_timestamp() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3093688, "supported_languages": null}, "macro.elementary.null_float": {"name": "null_float", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_float", "macro_sql": "{%- macro null_float() -%}\n    cast(null as {{ elementary.edr_type_float() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.309797, "supported_languages": null}, "macro.elementary.null_string": {"name": "null_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_string", "macro_sql": "{% macro null_string() %}\n    cast(null as {{ elementary.edr_type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3102136, "supported_languages": null}, "macro.elementary.to_primitive": {"name": "to_primitive", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/to_primitive.sql", "original_file_path": "macros/utils/data_types/to_primitive.sql", "unique_id": "macro.elementary.to_primitive", "macro_sql": "{% macro to_primitive(val) %}\n  {% if elementary.is_primitive(val) %}\n    {% do return(val) %}\n\n  {% elif val is mapping %}\n    {% set new_dict = {} %}\n    {% for k, v in val.items() %}\n      {% do new_dict.update({k: elementary.to_primitive(v)}) %}\n    {% endfor %}\n    {% do return(new_dict) %}\n\n  {% elif val is iterable %}\n    {% set new_list = [] %}\n    {% for item in val %}\n      {% do new_list.append(elementary.to_primitive(item)) %}\n    {% endfor %}\n    {% do return(new_list) %}\n\n  {% else %}\n    {% do return(val | string) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.is_primitive", "macro.elementary.to_primitive"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3137968, "supported_languages": null}, "macro.elementary.try_cast_column_to_timestamp": {"name": "try_cast_column_to_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "unique_id": "macro.elementary.try_cast_column_to_timestamp", "macro_sql": "{% macro try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {{ return(adapter.dispatch('try_cast_column_to_timestamp', 'elementary')(table_relation, timestamp_column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__try_cast_column_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3151584, "supported_languages": null}, "macro.elementary.default__try_cast_column_to_timestamp": {"name": "default__try_cast_column_to_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "unique_id": "macro.elementary.default__try_cast_column_to_timestamp", "macro_sql": "{% macro default__try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {# We try casting for Snowflake, Bigquery and Databricks as these support safe cast and the query will not fail if the cast fails #}\n    {%- set query %}\n        select {{ elementary.edr_safe_cast(timestamp_column, elementary.edr_type_timestamp()) }} as timestamp_column\n        from {{ table_relation }}\n        where {{ timestamp_column }} is not null\n        limit 1\n    {%- endset %}\n\n    {%- set result = elementary.result_value(query) %}\n    {%- if result is not none %}\n        {{ return(true) }}\n    {%- endif %}\n    {{ return(false) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_safe_cast", "macro.elementary.edr_type_timestamp", "macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3167253, "supported_languages": null}, "macro.elementary.postgres__try_cast_column_to_timestamp": {"name": "postgres__try_cast_column_to_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "unique_id": "macro.elementary.postgres__try_cast_column_to_timestamp", "macro_sql": "{% macro postgres__try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {{ return(false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3172727, "supported_languages": null}, "macro.elementary.insensitive_get_dict_value": {"name": "insensitive_get_dict_value", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/dict_utils/insensitive_get_dict_value.sql", "original_file_path": "macros/utils/dict_utils/insensitive_get_dict_value.sql", "unique_id": "macro.elementary.insensitive_get_dict_value", "macro_sql": "{% macro insensitive_get_dict_value(dict, key, default) -%}\n    {% set value = elementary.safe_get_with_default(dict, key) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {% set value = elementary.safe_get_with_default(dict, key.lower()) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {% set value = elementary.safe_get_with_default(dict, key.upper()) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {%- if default is defined -%}\n        {{- return(default) -}}\n    {% else %}\n        {{ return(none) }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3204784, "supported_languages": null}, "macro.elementary.safe_get_with_default": {"name": "safe_get_with_default", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/dict_utils/safe_get_with_default_value.sql", "original_file_path": "macros/utils/dict_utils/safe_get_with_default_value.sql", "unique_id": "macro.elementary.safe_get_with_default", "macro_sql": "{% macro safe_get_with_default(dict, key, default) %}\n    {% set value = dict.get(key) %}\n    {% if value is defined and value is not none %}\n        {{ return(value) }}\n    {% endif %}\n    {% if default is defined %}\n        {{ return(default) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3222861, "supported_languages": null}, "macro.elementary.column_exists_in_relation": {"name": "column_exists_in_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/column_exists_in_relation.sql", "original_file_path": "macros/utils/graph/column_exists_in_relation.sql", "unique_id": "macro.elementary.column_exists_in_relation", "macro_sql": "{% macro column_exists_in_relation(relation, column_name) %}\n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    {% if column.name.lower() == column_name.lower() %}\n      {% do return(true) %}\n    {% endif %}\n  {% endfor %}\n  {% do return(false) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.323958, "supported_languages": null}, "macro.elementary.get_cache": {"name": "get_cache", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_cache.sql", "original_file_path": "macros/utils/graph/get_cache.sql", "unique_id": "macro.elementary.get_cache", "macro_sql": "{% macro get_cache(entry, default=none) %}\n    {% if execute %}\n        {{ return(graph.get(\"elementary\", {}).get(entry, default)) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3252757, "supported_languages": null}, "macro.elementary.get_compiled_code": {"name": "get_compiled_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_compiled_code.sql", "original_file_path": "macros/utils/graph/get_compiled_code.sql", "unique_id": "macro.elementary.get_compiled_code", "macro_sql": "{% macro get_compiled_code(node) %}\n  {% do return(node.get('compiled_code') or node.get('compiled_sql')) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3261323, "supported_languages": null}, "macro.elementary.get_elementary_config_from_node": {"name": "get_elementary_config_from_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_elementary_config_from_node.sql", "original_file_path": "macros/utils/graph/get_elementary_config_from_node.sql", "unique_id": "macro.elementary.get_elementary_config_from_node", "macro_sql": "{% macro get_elementary_config_from_node(node) %}\n    {% set res = {} %}\n    {% set node_config = node.get('config') %}\n    {% if node_config %}\n        {% set elementary_config = node.config.get('elementary') %}\n        {% if elementary_config and elementary_config is mapping %}\n            {% do res.update(elementary_config) %}\n        {% endif %}\n        {% set config_meta = node.config.get('meta') %}\n        {% if config_meta and config_meta is mapping %}\n            {% set elementary_config = config_meta.get('elementary') %}\n            {% if elementary_config and elementary_config is mapping %}\n                {% do res.update(elementary_config) %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    {% set node_meta = node.get('meta') %}\n    {% if node_meta and node_meta is mapping %}\n        {% set elementary_config = node_meta.get('elementary') %}\n        {% if elementary_config and elementary_config is mapping %}\n            {% do res.update(elementary_config) %}\n        {% endif %}\n    {% endif %}\n    {{ return(res) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3315616, "supported_languages": null}, "macro.elementary.get_elementary_relation": {"name": "get_elementary_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_elementary_relation.sql", "original_file_path": "macros/utils/graph/get_elementary_relation.sql", "unique_id": "macro.elementary.get_elementary_relation", "macro_sql": "{% macro get_elementary_relation(identifier) %}\n  {% set elementary_database, elementary_schema = elementary.get_package_database_and_schema() %}\n  {% if this and this.database == elementary_database and this.schema == elementary_schema and this.identifier == identifier %}\n    {% do return(this) %}\n  {% endif %}\n  {% do return(adapter.get_relation(elementary_database, elementary_schema, identifier)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3334222, "supported_languages": null}, "macro.elementary.get_model_database_and_schema_from_test_node": {"name": "get_model_database_and_schema_from_test_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_model_database_and_schema_from_test_node.sql", "original_file_path": "macros/utils/graph/get_model_database_and_schema_from_test_node.sql", "unique_id": "macro.elementary.get_model_database_and_schema_from_test_node", "macro_sql": "{% macro get_model_database_and_schema_from_test_node(test_node) %}\n    {% set test_database = test_node.get('database') %}\n    {% set test_schema = test_node.get('schema') %}\n    {% set config_dict = elementary.safe_get_with_default(test_node, 'config', {}) %}\n    {% set test_schema_sufix = config_dict.get('schema') %}\n    {% if test_schema and test_schema_sufix %}\n        {% set test_schema = test_schema | replace('_' ~ test_schema_sufix, '') %}\n    {% endif %}\n    {{ return([test_database, test_schema]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.335828, "supported_languages": null}, "macro.elementary.get_node": {"name": "get_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_node.sql", "original_file_path": "macros/utils/graph/get_node.sql", "unique_id": "macro.elementary.get_node", "macro_sql": "{% macro get_node(node_unique_id) %}\n    {# First let's try to find it in regular nodes #}\n    {%- set node = graph.nodes.get(node_unique_id) -%}\n    {%- if not node -%}\n        {# If not found let's try to find it in source nodes #}\n        {%- set node = graph.sources.get(node_unique_id) -%}\n    {%- endif -%}\n    {{ return(node) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3371844, "supported_languages": null}, "macro.elementary.get_node_by_name": {"name": "get_node_by_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_node_by_name.sql", "original_file_path": "macros/utils/graph/get_node_by_name.sql", "unique_id": "macro.elementary.get_node_by_name", "macro_sql": "{% macro get_node_by_name(name) %}\n    {%- set nodes = get_nodes_from_graph() -%}\n    {% for node in nodes %}\n        {% if node.name == name %}\n            {% do return(node) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_nodes_from_graph"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3386166, "supported_languages": null}, "macro.elementary.get_node_execution_id": {"name": "get_node_execution_id", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_node_execution_id.sql", "original_file_path": "macros/utils/graph/get_node_execution_id.sql", "unique_id": "macro.elementary.get_node_execution_id", "macro_sql": "{% macro get_node_execution_id(node) %}\n    {% set node_execution_id = [invocation_id, node.get('unique_id')] | join('.') %}\n    {{ return(node_execution_id) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3396335, "supported_languages": null}, "macro.elementary.get_nodes_by_unique_ids": {"name": "get_nodes_by_unique_ids", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_nodes_by_unique_ids.sql", "original_file_path": "macros/utils/graph/get_nodes_by_unique_ids.sql", "unique_id": "macro.elementary.get_nodes_by_unique_ids", "macro_sql": "{% macro get_nodes_by_unique_ids(unique_ids) %}\n    {% set nodes = []%}\n    {% if execute %}\n        {% if unique_ids and unique_ids is iterable %}\n            {% for unique_id in unique_ids %}\n                {% set node = elementary.get_node(unique_id) %}\n                {% if node %}\n                    {% do nodes.append(node) %}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n    {{ return(nodes) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3419087, "supported_languages": null}, "macro.elementary.get_nodes_from_graph": {"name": "get_nodes_from_graph", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_nodes_from_graph.sql", "original_file_path": "macros/utils/graph/get_nodes_from_graph.sql", "unique_id": "macro.elementary.get_nodes_from_graph", "macro_sql": "{% macro get_nodes_from_graph() %}\n    {% set nodes = [] %}\n    {% do nodes.extend(graph.sources.values()) %}\n    {% do nodes.extend(graph.nodes.values()) %}\n    {{ return(nodes) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3431714, "supported_languages": null}, "macro.elementary.get_package_database_and_schema": {"name": "get_package_database_and_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_package_database_and_schema.sql", "original_file_path": "macros/utils/graph/get_package_database_and_schema.sql", "unique_id": "macro.elementary.get_package_database_and_schema", "macro_sql": "{% macro get_package_database_and_schema(package_name='elementary') %}\n    {% if execute %}\n        {% set node_in_package = graph.nodes.values()\n                                 | selectattr(\"resource_type\", \"==\", \"model\")\n                                 | selectattr(\"package_name\", \"==\", package_name) | first %}\n        {% if node_in_package %}\n            {{ return([node_in_package.database, node_in_package.schema]) }}\n        {% endif %}\n    {% endif %}\n    {{ return([none, none]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3453035, "supported_languages": null}, "macro.elementary.get_parent_model_unique_ids_from_test_node": {"name": "get_parent_model_unique_ids_from_test_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_parent_model_unique_ids_from_test_node.sql", "original_file_path": "macros/utils/graph/get_parent_model_unique_ids_from_test_node.sql", "unique_id": "macro.elementary.get_parent_model_unique_ids_from_test_node", "macro_sql": "{% macro get_parent_model_unique_ids_from_test_node(test_node) %}\n    {% set nodes_in_current_package = [] %}\n    {% set test_depends_on = test_node.get('depends_on') %}\n    {% if test_depends_on %}\n        {% set depends_on_nodes = test_depends_on.get('nodes') %}\n        {% if depends_on_nodes %}\n            {% set current_package_name = test_node.get('package_name') %}\n            {% if current_package_name %}\n                {% set current_package_name = '.' ~ current_package_name ~ '.' %}\n                {% for node in depends_on_nodes %}\n                    {% if current_package_name in node %}\n                        {% do nodes_in_current_package.append(node) %}\n                    {% endif %}\n                {% endfor %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    {{ return(nodes_in_current_package) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3487241, "supported_languages": null}, "macro.elementary.get_relation_from_node": {"name": "get_relation_from_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_relation_from_node.sql", "original_file_path": "macros/utils/graph/get_relation_from_node.sql", "unique_id": "macro.elementary.get_relation_from_node", "macro_sql": "{% macro get_relation_from_node(node) %}\n  {% do return(adapter.get_relation(database=node.database,\n                                    schema=node.schema,\n                                    identifier=get_table_name_from_node(node))) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_table_name_from_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3497553, "supported_languages": null}, "macro.elementary.get_result_node": {"name": "get_result_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_result_node.sql", "original_file_path": "macros/utils/graph/get_result_node.sql", "unique_id": "macro.elementary.get_result_node", "macro_sql": "{% macro get_result_node(identifier, package_name='elementary') %}\n  {% for result in results %}\n    {% if result.node.identifier == identifier %}\n      {% if package_name %}\n        {% if result.node.package_name == package_name %}\n          {{ return(result.node) }}\n        {% endif %}\n      {% else %}\n        {{ return(result.node) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3519533, "supported_languages": null}, "macro.elementary.get_table_name_from_node": {"name": "get_table_name_from_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_table_name_from_node.sql", "original_file_path": "macros/utils/graph/get_table_name_from_node.sql", "unique_id": "macro.elementary.get_table_name_from_node", "macro_sql": "{% macro get_table_name_from_node(node) %}\n    {% if node.identifier %}\n        {% set table_name = node.identifier %}\n    {% elif node.alias %}\n        {% set table_name = node.alias %}\n    {% else %}\n        {% set table_name = node.name %}\n    {% endif %}\n    {{ return(table_name) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3535824, "supported_languages": null}, "macro.elementary.set_cache": {"name": "set_cache", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/set_cache.sql", "original_file_path": "macros/utils/graph/set_cache.sql", "unique_id": "macro.elementary.set_cache", "macro_sql": "{% macro set_cache(entry, val) %}\n    {% if execute %}\n        {% do graph.get(\"elementary\", {}).update({entry: val}) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3546646, "supported_languages": null}, "macro.elementary.filter_none_and_sort": {"name": "filter_none_and_sort", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/filter_none_and_sort.sql", "original_file_path": "macros/utils/list_utils/filter_none_and_sort.sql", "unique_id": "macro.elementary.filter_none_and_sort", "macro_sql": "{% macro filter_none_and_sort(val) %}\n    {% do return(val | reject(\"none\") | sort) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.355409, "supported_languages": null}, "macro.elementary.join_list": {"name": "join_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/join_list.sql", "original_file_path": "macros/utils/list_utils/join_list.sql", "unique_id": "macro.elementary.join_list", "macro_sql": "{% macro join_list(item_list, separator) %}\n    {{ return(item_list | join(separator)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.356091, "supported_languages": null}, "macro.elementary.lists_intersection": {"name": "lists_intersection", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/lists_intersection.sql", "original_file_path": "macros/utils/list_utils/lists_intersection.sql", "unique_id": "macro.elementary.lists_intersection", "macro_sql": "{% macro lists_intersection(list_a, list_b) %}\n  {% set new_list = [] %}\n  {% for item in list_a %}\n    {% if item in list_b %}\n      {% do new_list.append(item) %}\n    {% endif %}\n  {% endfor %}\n  {% do return(new_list) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3576422, "supported_languages": null}, "macro.elementary.split_list_to_chunks": {"name": "split_list_to_chunks", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/split_list_to_chunks.sql", "original_file_path": "macros/utils/list_utils/split_list_to_chunks.sql", "unique_id": "macro.elementary.split_list_to_chunks", "macro_sql": "{% macro split_list_to_chunks(item_list, chunk_size=50) %}\n    {% set chunks = [] %}\n    {% set current_chunk = [] %}\n    {% for item in item_list %}\n        {% set reminder = loop.index0 % chunk_size %}\n        {% if reminder == 0 and current_chunk %}\n            {% do chunks.append(current_chunk.copy()) %}\n            {% do current_chunk.clear() %}\n        {% endif %}\n        {% do current_chunk.append(item) %}\n    {% endfor %}\n    {% if current_chunk %}\n        {% do chunks.append(current_chunk) %}\n    {% endif %}\n    {{ return(chunks) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3605297, "supported_languages": null}, "macro.elementary.strings_list_to_tuple": {"name": "strings_list_to_tuple", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/strings_list_to_tuple.sql", "original_file_path": "macros/utils/list_utils/strings_list_to_tuple.sql", "unique_id": "macro.elementary.strings_list_to_tuple", "macro_sql": "{% macro strings_list_to_tuple(strings) %}\n    {%- if strings %}\n        ({% for string in strings %} '{{ string }}' {{ \",\" if not loop.last else \"\" }} {% endfor %})\n    {%- else %}\n        ('')\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3620665, "supported_languages": null}, "macro.elementary.union_lists": {"name": "union_lists", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/union_lists.sql", "original_file_path": "macros/utils/list_utils/union_lists.sql", "unique_id": "macro.elementary.union_lists", "macro_sql": "{% macro union_lists(list1, list2) %}\n    {% set union_list = [] %}\n    {% do union_list.extend(list1) %}\n    {% do union_list.extend(list2) %}\n    {{ return(union_list | unique | list) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3633997, "supported_languages": null}, "macro.elementary.agate_to_dicts": {"name": "agate_to_dicts", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/agate_to_dicts.sql", "original_file_path": "macros/utils/run_queries/agate_to_dicts.sql", "unique_id": "macro.elementary.agate_to_dicts", "macro_sql": "{% macro agate_to_dicts(agate_table) %}\n    {% set column_types = agate_table.column_types %}\n    {% set serializable_rows = [] %}\n    {% for agate_row in agate_table.rows %}\n        {% set serializable_row = {} %}\n        {% for col_name, col_value in agate_row.items() %}\n            {% set serializable_col_value = column_types[loop.index0].jsonify(col_value) %}\n            {% set serializable_col_name = col_name | lower %}\n            {% do serializable_row.update({serializable_col_name: serializable_col_value}) %}\n        {% endfor %}\n        {% do serializable_rows.append(serializable_row) %}\n    {% endfor %}\n    {{ return(serializable_rows) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.366698, "supported_languages": null}, "macro.elementary.agate_to_json": {"name": "agate_to_json", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/agate_to_json.sql", "original_file_path": "macros/utils/run_queries/agate_to_json.sql", "unique_id": "macro.elementary.agate_to_json", "macro_sql": "{% macro agate_to_json(agate_table) %}\n    {% set serializable_rows = elementary.agate_to_dicts(agate_table) %}\n    {{ return(tojson(serializable_rows)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.agate_to_dicts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3676226, "supported_languages": null}, "macro.elementary.result_column_to_list": {"name": "result_column_to_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/result_column_to_list.sql", "original_file_path": "macros/utils/run_queries/result_column_to_list.sql", "unique_id": "macro.elementary.result_column_to_list", "macro_sql": "{% macro result_column_to_list(single_column_query) %}\n    {% set query_result = elementary.run_query(single_column_query) %}\n    {% do return(query_result.columns[0]) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.368577, "supported_languages": null}, "macro.elementary.result_value": {"name": "result_value", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/result_value.sql", "original_file_path": "macros/utils/run_queries/result_value.sql", "unique_id": "macro.elementary.result_value", "macro_sql": "{% macro result_value(single_column_query) %}\n    {% set result = elementary.run_query(single_column_query) %}\n    {% if not result %}\n      {% do return(none) %}\n    {% endif %}\n    {% do return(result[0][0]) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3700013, "supported_languages": null}, "macro.elementary.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/run_query.sql", "original_file_path": "macros/utils/run_queries/run_query.sql", "unique_id": "macro.elementary.run_query", "macro_sql": "{% macro run_query(query, lowercase_column_names=True) %}\n    {% set query_result = dbt.run_query(query) %}\n    {% if lowercase_column_names %}\n        {% set lowercased_column_names = {} %}\n        {% for column_name in query_result.column_names %}\n            {% do lowercased_column_names.update({column_name: column_name.lower()}) %}\n        {% endfor %}\n        {% set query_result = query_result.rename(lowercased_column_names) %}\n    {% endif %}\n    {% do return(query_result) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.372258, "supported_languages": null}, "macro.elementary.union_macro_queries": {"name": "union_macro_queries", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/union_macro_queries.sql", "original_file_path": "macros/utils/run_queries/union_macro_queries.sql", "unique_id": "macro.elementary.union_macro_queries", "macro_sql": "{% macro union_macro_queries(param_list, query_macro) %}\n    {% for param in param_list %}\n        ({{ query_macro(param) }})\n        {% if not loop.last %}\n            union all\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3734407, "supported_languages": null}, "macro.elementary.escape_select": {"name": "escape_select", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/sql_utils/escape_select.sql", "original_file_path": "macros/utils/sql_utils/escape_select.sql", "unique_id": "macro.elementary.escape_select", "macro_sql": "{% macro escape_select(column_names) %}\n    {% do return(adapter.dispatch('escape_select', 'elementary')(column_names)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__escape_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3744965, "supported_languages": null}, "macro.elementary.default__escape_select": {"name": "default__escape_select", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/sql_utils/escape_select.sql", "original_file_path": "macros/utils/sql_utils/escape_select.sql", "unique_id": "macro.elementary.default__escape_select", "macro_sql": "{% macro default__escape_select(column_names) %}\n    {% do return(column_names | join(',')) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3751042, "supported_languages": null}, "macro.elementary.redshift__escape_select": {"name": "redshift__escape_select", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/sql_utils/escape_select.sql", "original_file_path": "macros/utils/sql_utils/escape_select.sql", "unique_id": "macro.elementary.redshift__escape_select", "macro_sql": "{% macro redshift__escape_select(column_names) %}\n    {% do return('\\\"' + column_names | join('\\\", \\\"') + '\\\"') %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3757782, "supported_languages": null}, "macro.elementary.list_concat_with_separator": {"name": "list_concat_with_separator", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/sql_utils/list_concat_with_separator.sql", "original_file_path": "macros/utils/sql_utils/list_concat_with_separator.sql", "unique_id": "macro.elementary.list_concat_with_separator", "macro_sql": "{% macro list_concat_with_separator(item_list, separator, handle_nulls = true) %}\n    {% set new_list = [] %}\n    {% for item in item_list %}\n        {% set new_item = item %}\n        {% if handle_nulls %}\n            {% set new_item = \"case when \" ~ elementary.edr_cast_as_string(item) ~ \" is null then 'NULL' else \" ~ elementary.edr_cast_as_string(item) ~ \" end\" %}\n        {% endif %}\n        {% do new_list.append(new_item) %}\n        {% if not loop.last %}\n            {% do new_list.append(elementary.edr_quote(separator)) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(elementary.join_list(new_list, \" || \")) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_string", "macro.elementary.edr_quote", "macro.elementary.join_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3788521, "supported_languages": null}, "macro.elementary.create_intermediate_relation": {"name": "create_intermediate_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_intermediate_relation.sql", "original_file_path": "macros/utils/table_operations/create_intermediate_relation.sql", "unique_id": "macro.elementary.create_intermediate_relation", "macro_sql": "{% macro create_intermediate_relation(base_relation, rows, temporary, like_columns=none) %}\n    {% set int_suffix = modules.datetime.datetime.utcnow().strftime('__tmp_%Y%m%d%H%M%S%f') %}\n    {% set int_relation = dbt.make_temp_relation(base_relation, suffix=int_suffix).incorporate(type='table') %}\n\n    {% if not elementary.has_temp_table_support() %}\n        {% set temporary = false %}\n    {% endif %}\n\n    {% do elementary.create_table_like(int_relation, base_relation, temporary, like_columns) %}\n    {% do elementary.insert_rows(int_relation, rows, should_commit=false, chunk_size=elementary.get_config_var('dbt_artifacts_chunk_size')) %}\n    {% do return(int_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.elementary.has_temp_table_support", "macro.elementary.create_table_like", "macro.elementary.insert_rows", "macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3817644, "supported_languages": null}, "macro.elementary.create_or_replace": {"name": "create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.create_or_replace", "macro_sql": "{% macro create_or_replace(temporary, relation, sql_query) %}\n    {{ return(adapter.dispatch('create_or_replace', 'elementary')(temporary, relation, sql_query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__create_or_replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3834083, "supported_languages": null}, "macro.elementary.default__create_or_replace": {"name": "default__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.default__create_or_replace", "macro_sql": "{% macro default__create_or_replace(temporary, relation, sql_query) %}\n    {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.38413, "supported_languages": null}, "macro.elementary.redshift__create_or_replace": {"name": "redshift__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.redshift__create_or_replace", "macro_sql": "{% macro redshift__create_or_replace(temporary, relation, sql_query) %}\n    {% do dbt.drop_relation_if_exists(relation) %}\n    {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n    {% do adapter.commit() %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3852248, "supported_languages": null}, "macro.elementary.postgres__create_or_replace": {"name": "postgres__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.postgres__create_or_replace", "macro_sql": "{% macro postgres__create_or_replace(temporary, relation, sql_query) %}\n    {% do run_query(\"BEGIN\") %}\n    {% do dbt.drop_relation_if_exists(relation) %}\n    {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n    {% do run_query(\"COMMIT\") %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query", "macro.dbt.drop_relation_if_exists", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3864868, "supported_languages": null}, "macro.elementary.spark__create_or_replace": {"name": "spark__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.spark__create_or_replace", "macro_sql": "{% macro spark__create_or_replace(temporary, relation, sql_query) %}\n    {% do dbt.drop_relation_if_exists(relation) %}\n    {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n    {% do adapter.commit() %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.38755, "supported_languages": null}, "macro.elementary.create_table_like": {"name": "create_table_like", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_table_like.sql", "original_file_path": "macros/utils/table_operations/create_table_like.sql", "unique_id": "macro.elementary.create_table_like", "macro_sql": "{% macro create_table_like(relation, like_relation, temporary=False, like_columns=none) %}\n    {% set empty_table_query %}\n        SELECT\n        {% if like_columns %}\n            {% for column in like_columns %}\n                {{ column }}{{ \", \" if not loop.last }}\n            {% endfor %}\n        {% else %}\n            *\n        {% endif %}\n        FROM {{ like_relation }}\n        WHERE 1 = 0\n    {% endset %}\n    {% do elementary.run_query(dbt.create_table_as(temporary, relation, empty_table_query)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3897913, "supported_languages": null}, "macro.elementary.create_temp_table": {"name": "create_temp_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_temp_table.sql", "original_file_path": "macros/utils/table_operations/create_temp_table.sql", "unique_id": "macro.elementary.create_temp_table", "macro_sql": "{% macro create_temp_table(database_name, schema_name, table_name, sql_query) %}\n    {% set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                               schema=schema_name,\n                                                                               identifier=table_name,\n                                                                               type='table') -%}\n    {% if temp_table_exists %}\n        {% do adapter.drop_relation(temp_table_relation) %}\n        {% do run_query(dbt.create_table_as(True, temp_table_relation, sql_query)) %}\n    {% else %}\n        {% do run_query(dbt.create_table_as(True, temp_table_relation, sql_query)) %}\n    {% endif %}\n    {{ return(temp_table_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.3923686, "supported_languages": null}, "macro.elementary.delete_and_insert": {"name": "delete_and_insert", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/delete_and_insert.sql", "original_file_path": "macros/utils/table_operations/delete_and_insert.sql", "unique_id": "macro.elementary.delete_and_insert", "macro_sql": "{% macro delete_and_insert(relation, insert_rows=none, delete_values=none, delete_column_key=none) %}\n    {% do elementary.file_log(\"Deleting from and inserting to: {}\".format(relation)) %}\n    {% set delete_rows = [] %}\n    {% for delete_val in delete_values %}\n        {% do delete_rows.append({delete_column_key: delete_val}) %}\n    {% endfor %}\n\n    {% if delete_values %}\n        {% set delete_relation = elementary.create_intermediate_relation(relation, delete_rows, temporary=True, like_columns=[delete_column_key]) %}\n    {% endif %}\n\n    {% if insert_rows %}\n        {% set insert_relation = elementary.create_intermediate_relation(relation, insert_rows, temporary=True) %}\n    {% endif %}\n\n    {% if not insert_relation and not delete_relation %}\n        {% do return(none) %}\n    {% endif %}\n\n    {% set queries = elementary.get_delete_and_insert_queries(relation, insert_relation, delete_relation, delete_column_key) %}\n    {% for query in queries %}\n        {% do elementary.run_query(query) %}\n    {% endfor %}\n    {% do elementary.file_log(\"Finished deleting from and inserting to: {}\".format(relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.file_log", "macro.elementary.create_intermediate_relation", "macro.elementary.get_delete_and_insert_queries", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4008894, "supported_languages": null}, "macro.elementary.get_delete_and_insert_queries": {"name": "get_delete_and_insert_queries", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/delete_and_insert.sql", "original_file_path": "macros/utils/table_operations/delete_and_insert.sql", "unique_id": "macro.elementary.get_delete_and_insert_queries", "macro_sql": "{% macro get_delete_and_insert_queries(relation, insert_relation, delete_relation, delete_column_key) %}\n    {% do return(adapter.dispatch(\"get_delete_and_insert_queries\", \"elementary\")(relation, insert_relation, delete_relation, delete_column_key)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__get_delete_and_insert_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4018805, "supported_languages": null}, "macro.elementary.default__get_delete_and_insert_queries": {"name": "default__get_delete_and_insert_queries", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/delete_and_insert.sql", "original_file_path": "macros/utils/table_operations/delete_and_insert.sql", "unique_id": "macro.elementary.default__get_delete_and_insert_queries", "macro_sql": "{% macro default__get_delete_and_insert_queries(relation, insert_relation, delete_relation, delete_column_key) %}\n    {% set query %}\n        begin transaction;\n        {% if delete_relation %}\n            delete from {{ relation }} where {{ delete_column_key }} in (select {{ delete_column_key }} from {{ delete_relation }});\n        {% endif %}\n        {% if insert_relation %}\n            insert into {{ relation }} select * from {{ insert_relation }};\n        {% endif %}\n        commit;\n    {% endset %}\n    {% do return([query]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4034898, "supported_languages": null}, "macro.elementary.spark__get_delete_and_insert_queries": {"name": "spark__get_delete_and_insert_queries", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/delete_and_insert.sql", "original_file_path": "macros/utils/table_operations/delete_and_insert.sql", "unique_id": "macro.elementary.spark__get_delete_and_insert_queries", "macro_sql": "{% macro spark__get_delete_and_insert_queries(relation, insert_relation, delete_relation, delete_column_key) %}\n    {% set queries = [] %}\n\n    {% if delete_relation %}\n        {% set delete_query %}\n            delete from {{ relation }} where {{ delete_column_key }} in (select {{ delete_column_key }} from {{ delete_relation }});\n        {% endset %}\n        {% do queries.append(delete_query) %}\n    {% endif %}\n\n    {% if insert_relation %}\n        {% set insert_query %}\n            insert into {{ relation }} select * from {{ insert_relation }};\n        {% endset %}\n        {% do queries.append(insert_query) %}\n    {% endif %}\n\n    {% do return(queries) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4056823, "supported_languages": null}, "macro.elementary.delete_if_incremental": {"name": "delete_if_incremental", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/delete_if_incremental.sql", "original_file_path": "macros/utils/table_operations/delete_if_incremental.sql", "unique_id": "macro.elementary.delete_if_incremental", "macro_sql": "{% macro delete_if_incremental(where_clause) %}\n\n    {% set query%}\n        delete from {{ this }}\n        where {{ where_clause }}\n    {% endset %}\n\n    {% if is_incremental() %}\n        {% do run_query(query) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4069886, "supported_languages": null}, "macro.elementary.get_column_in_relation": {"name": "get_column_in_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_column_in_relation.sql", "original_file_path": "macros/utils/table_operations/get_column_in_relation.sql", "unique_id": "macro.elementary.get_column_in_relation", "macro_sql": "{% macro get_column_in_relation(relation, column_name) %}\n    {% set columns = adapter.get_columns_in_relation(relation) %}\n    {% for column in columns %}\n        {% if column.name == column_name %}\n            {% do return(column) %}\n        {% endif %}\n    {% endfor %}\n    {% do return(none) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.408599, "supported_languages": null}, "macro.elementary.get_columns_and_types": {"name": "get_columns_and_types", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_columns_and_types.sql", "original_file_path": "macros/utils/table_operations/get_columns_and_types.sql", "unique_id": "macro.elementary.get_columns_and_types", "macro_sql": "{% macro get_columns_and_types(table_name, schema_name = none, database_name = none) %}\n\n    {# dbt models can be found with identifier only #}\n    {# for non-dbt tables database_name and schema_name are required #}\n\n    {%- if not database_name %}\n        {%- set database_name = elementary.target_database() %}\n    {%- endif %}\n    {%- if not schema_name %}\n        {%- set schema_name = target.schema %}\n    {%- endif %}\n\n    {%- set columns = [] %}\n\n    {%- set relation = adapter.get_relation(\n          database=database_name,\n          schema=schema_name,\n          identifier=table_name) -%}\n\n    {%- set columns_from_relation = adapter.get_columns_in_relation(relation) -%}\n\n    {% for column in columns_from_relation %}\n        {%- set column_item = {'column_name': column['column'], 'data_type': elementary.normalize_data_type(column['dtype'])} %}\n        {%- do columns.append(column_item) -%}\n    {% endfor %}\n\n    {{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.target_database", "macro.elementary.normalize_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4121413, "supported_languages": null}, "macro.elementary.get_relation_max_name_length": {"name": "get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.get_relation_max_name_length", "macro_sql": "{% macro get_relation_max_name_length() %}\n    {{ return(adapter.dispatch('get_relation_max_name_length', 'elementary')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__get_relation_max_name_length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4132862, "supported_languages": null}, "macro.elementary.default__get_relation_max_name_length": {"name": "default__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.default__get_relation_max_name_length", "macro_sql": "{% macro default__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4138188, "supported_languages": null}, "macro.elementary.redshift__get_relation_max_name_length": {"name": "redshift__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.redshift__get_relation_max_name_length", "macro_sql": "{% macro redshift__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(127) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4143558, "supported_languages": null}, "macro.elementary.postgres__get_relation_max_name_length": {"name": "postgres__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.postgres__get_relation_max_name_length", "macro_sql": "{% macro postgres__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(63) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4148827, "supported_languages": null}, "macro.elementary.spark__get_relation_max_name_length": {"name": "spark__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.spark__get_relation_max_name_length", "macro_sql": "{% macro spark__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(127) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4154174, "supported_languages": null}, "macro.elementary.get_row_count": {"name": "get_row_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_row_count.sql", "original_file_path": "macros/utils/table_operations/get_row_count.sql", "unique_id": "macro.elementary.get_row_count", "macro_sql": "{% macro get_row_count(full_table_name) %}\n\n    {% set query_row_count %}\n        select count(*) from {{ full_table_name }}\n    {% endset %}\n    {% if execute %}\n        {% set result = run_query(query_row_count).columns[0].values()[0] %}\n    {% endif %}\n    {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4169676, "supported_languages": null}, "macro.elementary.has_temp_table_support": {"name": "has_temp_table_support", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/has_temp_table_support.sql", "original_file_path": "macros/utils/table_operations/has_temp_table_support.sql", "unique_id": "macro.elementary.has_temp_table_support", "macro_sql": "{% macro has_temp_table_support() %}\n    {% do return(adapter.dispatch(\"has_temp_table_support\", \"elementary\")()) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__has_temp_table_support"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4179008, "supported_languages": null}, "macro.elementary.default__has_temp_table_support": {"name": "default__has_temp_table_support", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/has_temp_table_support.sql", "original_file_path": "macros/utils/table_operations/has_temp_table_support.sql", "unique_id": "macro.elementary.default__has_temp_table_support", "macro_sql": "{% macro default__has_temp_table_support() %}\n    {% do return(true) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4185286, "supported_languages": null}, "macro.elementary.spark__has_temp_table_support": {"name": "spark__has_temp_table_support", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/has_temp_table_support.sql", "original_file_path": "macros/utils/table_operations/has_temp_table_support.sql", "unique_id": "macro.elementary.spark__has_temp_table_support", "macro_sql": "{% macro spark__has_temp_table_support() %}\n    {% do return(false) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4190428, "supported_languages": null}, "macro.elementary.insert_as_select": {"name": "insert_as_select", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_as_select.sql", "original_file_path": "macros/utils/table_operations/insert_as_select.sql", "unique_id": "macro.elementary.insert_as_select", "macro_sql": "{% macro insert_as_select(table_relation, select_query) %}\n    {# when calling this macro, you need to add depends on ref comment #}\n    {# ref_model and select_query need to have the same columns #}\n\n    {%- set insert_query %}\n        insert into {{ table_relation }}\n        with tmp_table as (\n            {{ select_query }}\n        )\n        select * from tmp_table\n    {%- endset %}\n\n    {{ return(insert_query) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4201667, "supported_languages": null}, "macro.elementary.insert_rows": {"name": "insert_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.insert_rows", "macro_sql": "{% macro insert_rows(table_relation, rows, should_commit=false, chunk_size=5000) %}\n    {% if not rows %}\n      {{ return(none) }}\n    {% endif %}\n\n    {% if not table_relation %}\n        {{ elementary.edr_log('Unable to insert rows to non-existent table. Please run \"dbt run -s elementary\".') }}\n        {{ return(none) }}\n    {% endif %}\n\n    {% set columns = adapter.get_columns_in_relation(table_relation) -%}\n    {% if not columns %}\n        {% set table_name = elementary.relation_to_full_name(table_relation) %}\n        {{ elementary.edr_log('Could not extract columns for table - ' ~ table_name ~ ' (might be a permissions issue)') }}\n        {{ return(none) }}\n    {% endif %}\n\n    {{ elementary.file_log('Inserting {} rows to table {}'.format(rows | length, table_relation)) }}\n    {% set insert_rows_method = elementary.get_config_var('insert_rows_method') %}\n    {% if insert_rows_method == 'max_query_size' %}\n      {% set insert_rows_queries = elementary.get_insert_rows_queries(table_relation, columns, rows) %}\n      {% set queries_len = insert_rows_queries | length %}\n      {% for insert_query in insert_rows_queries %}\n        {% do elementary.file_log(\"[{}/{}] Running insert query.\".format(loop.index, queries_len)) %}\n        {% do elementary.run_query(insert_query) %}\n      {% endfor %}\n    {% elif insert_rows_method == 'chunk' %}\n      {% set rows_chunks = elementary.split_list_to_chunks(rows, chunk_size) %}\n      {% for rows_chunk in rows_chunks %}\n        {% set insert_rows_query = elementary.get_chunk_insert_query(table_relation, columns, rows_chunk) %}\n        {% do run_query(insert_rows_query) %}\n      {% endfor %}\n    {% else %}\n      {% do exceptions.raise_compiler_error(\"Specified invalid value for 'insert_rows_method' var.\") %}\n    {% endif %}\n\n    {% if should_commit %}\n      {% do adapter.commit() %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_log", "macro.elementary.relation_to_full_name", "macro.elementary.file_log", "macro.elementary.get_config_var", "macro.elementary.get_insert_rows_queries", "macro.elementary.run_query", "macro.elementary.split_list_to_chunks", "macro.elementary.get_chunk_insert_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4361358, "supported_languages": null}, "macro.elementary.get_insert_rows_queries": {"name": "get_insert_rows_queries", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.get_insert_rows_queries", "macro_sql": "{% macro get_insert_rows_queries(table_relation, columns, rows, query_max_size=elementary.get_config_var('query_max_size')) -%}\n    {% set insert_queries = [] %}\n    {% set insert_query %}\n       insert into {{ table_relation }}\n         ({%- for column in columns -%}\n           {{- column.name -}} {{- \",\" if not loop.last else \"\" -}}\n         {%- endfor -%}) values\n    {% endset %}\n\n    {% set current_query = namespace(data=insert_query) %}\n    {% for row in rows %}\n      {% set rendered_column_values = [] %}\n      {% for column in columns %}\n        {% set column_value = elementary.insensitive_get_dict_value(row, column.name) %}\n        {% do rendered_column_values.append(elementary.render_value(column_value)) %}\n      {% endfor %}\n      {% set row_sql = \"({})\".format(rendered_column_values | join(\",\")) %}\n      {% set query_with_row = current_query.data + (\",\" if not loop.first else \"\") + row_sql %}\n\n      {% if query_with_row | length > query_max_size %}\n        {% set new_insert_query = insert_query + row_sql %}\n        {# Check if row is too large to fit into an insert query. #}\n        {% if new_insert_query | length > query_max_size %}\n          {% do elementary.file_log(\"Oversized row for insert_rows: {}\".format(query_with_row)) %}\n          {% do exceptions.raise_compiler_error(\"Row to be inserted exceeds var('query_max_size'). Consider increasing its value.\") %}\n        {% endif %}\n        {% do insert_queries.append(current_query.data) %}\n        {% set current_query.data = new_insert_query %}\n      {% else %}\n        {% set current_query.data = query_with_row %}\n      {% endif %}\n      {% if loop.last %}\n        {% do insert_queries.append(current_query.data) %}\n      {% endif %}\n    {% endfor %}\n\n    {{ return(insert_queries) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.insensitive_get_dict_value", "macro.elementary.render_value", "macro.elementary.file_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4419403, "supported_languages": null}, "macro.elementary.get_chunk_insert_query": {"name": "get_chunk_insert_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.get_chunk_insert_query", "macro_sql": "{% macro get_chunk_insert_query(table_relation, columns, rows) -%}\n    {% set insert_rows_query %}\n        insert into {{ table_relation }}\n            ({%- for column in columns -%}\n                {{- column.name -}} {{- \",\" if not loop.last else \"\" -}}\n            {%- endfor -%}) values\n            {% for row in rows -%}\n                ({%- for column in columns -%}\n                    {%- set column_value = elementary.insensitive_get_dict_value(row, column.name, none) -%}\n                    {{ elementary.render_value(column_value) }}\n                    {{- \",\" if not loop.last else \"\" -}}\n                 {%- endfor -%}) {{- \",\" if not loop.last else \"\" -}}\n            {%- endfor -%}\n    {% endset %}\n    {{ return(insert_rows_query) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.insensitive_get_dict_value", "macro.elementary.render_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4443867, "supported_languages": null}, "macro.elementary.escape_special_chars": {"name": "escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.escape_special_chars", "macro_sql": "{% macro escape_special_chars(string_value) %}\n    {{ return(adapter.dispatch('escape_special_chars', 'elementary')(string_value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__escape_special_chars"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4451122, "supported_languages": null}, "macro.elementary.default__escape_special_chars": {"name": "default__escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.default__escape_special_chars", "macro_sql": "\n\n{%- macro default__escape_special_chars(string_value) -%}\n    {{- return(string_value | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace(\"\\n\", \"\\\\n\") | replace(\"\\r\", \"\\\\r\")) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4460773, "supported_languages": null}, "macro.elementary.redshift__escape_special_chars": {"name": "redshift__escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.redshift__escape_special_chars", "macro_sql": "{%- macro redshift__escape_special_chars(string_value) -%}\n    {{- return(string_value | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace(\"\\n\", \"\\\\n\") | replace(\"\\r\", \"\\\\r\")) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.447027, "supported_languages": null}, "macro.elementary.postgres__escape_special_chars": {"name": "postgres__escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.postgres__escape_special_chars", "macro_sql": "{%- macro postgres__escape_special_chars(string_value) -%}\n    {{- return(string_value | replace(\"'\", \"''\")) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4476025, "supported_languages": null}, "macro.elementary.render_value": {"name": "render_value", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.render_value", "macro_sql": "{%- macro render_value(value) -%}\n    {%- if value is defined and value is not none -%}\n        {%- if value is number -%}\n            {{- value -}}\n        {%- elif value is string -%}\n            '{{- elementary.escape_special_chars(value) -}}'\n        {%- elif value is mapping or value is sequence -%}\n            '{{- elementary.escape_special_chars(tojson(value)) -}}'\n        {%- else -%}\n            NULL\n        {%- endif -%}\n    {%- else -%}\n        NULL\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.elementary.escape_special_chars"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.449238, "supported_languages": null}, "macro.elementary.merge_sql": {"name": "merge_sql", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "unique_id": "macro.elementary.merge_sql", "macro_sql": "{% macro merge_sql(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates=none) -%}\n    {{ return(adapter.dispatch('merge_sql', 'elementary')(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4509265, "supported_languages": null}, "macro.elementary.default__merge_sql": {"name": "default__merge_sql", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "unique_id": "macro.elementary.default__merge_sql", "macro_sql": "{% macro default__merge_sql(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates) %}\n    {% set macro = dbt.get_merge_sql %}\n    {% if \"incremental_predicates\" in macro.get_macro().arguments %}\n      {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates)) %}\n    {% endif %}\n    {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4525301, "supported_languages": null}, "macro.elementary.postgres__merge_sql": {"name": "postgres__merge_sql", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "unique_id": "macro.elementary.postgres__merge_sql", "macro_sql": "{% macro postgres__merge_sql(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates) %}\n    {% set macro = dbt.get_delete_insert_merge_sql %}\n    {% if \"incremental_predicates\" in macro.get_macro().arguments %}\n      {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates)) %}\n    {% endif %}\n    {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns)) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4543052, "supported_languages": null}, "macro.elementary.relation_exists": {"name": "relation_exists", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/relation_exists.sql", "original_file_path": "macros/utils/table_operations/relation_exists.sql", "unique_id": "macro.elementary.relation_exists", "macro_sql": "{% macro relation_exists(relation) %}\n    {%- set loaded_relation = load_relation(relation) -%}\n    {% if loaded_relation is not none %}\n        {{ return(True) }}\n    {% endif %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4554813, "supported_languages": null}, "macro.elementary.remove_rows": {"name": "remove_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/remove_rows.sql", "original_file_path": "macros/utils/table_operations/remove_rows.sql", "unique_id": "macro.elementary.remove_rows", "macro_sql": "{% macro remove_rows(table_name) %}\n\n    {% set remove_rows_query %}\n        delete from {{ table_name }}\n    {% endset %}\n    {% do run_query(remove_rows_query) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.45637, "supported_languages": null}, "macro.elementary.replace_table_data": {"name": "replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.replace_table_data", "macro_sql": "{% macro replace_table_data(relation, rows) %}\n    {{ return(adapter.dispatch('replace_table_data', 'elementary')(relation, rows)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__replace_table_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4578032, "supported_languages": null}, "macro.elementary.default__replace_table_data": {"name": "default__replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.default__replace_table_data", "macro_sql": "{% macro default__replace_table_data(relation, rows) %}\n    {% set intermediate_relation = elementary.create_intermediate_relation(relation, rows, temporary=True) %}\n    {% do elementary.run_query(dbt.create_table_as(False, relation, 'select * from {}'.format(intermediate_relation))) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.create_intermediate_relation", "macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.458922, "supported_languages": null}, "macro.elementary.spark__replace_table_data": {"name": "spark__replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.spark__replace_table_data", "macro_sql": "{% macro spark__replace_table_data(relation, rows) %}\n    {% do dbt.truncate_relation(relation) %}\n    {% do elementary.insert_rows(relation, rows, should_commit=false, chunk_size=elementary.get_config_var('dbt_artifacts_chunk_size')) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.truncate_relation", "macro.elementary.insert_rows", "macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4599006, "supported_languages": null}, "macro.elementary.postgres__replace_table_data": {"name": "postgres__replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.postgres__replace_table_data", "macro_sql": "{% macro postgres__replace_table_data(relation, rows) %}\n    {% set intermediate_relation = elementary.create_intermediate_relation(relation, rows, temporary=True) %}\n\n    {% set query %}\n        begin transaction;\n        delete from {{ relation }};   -- truncate supported in Redshift transactions, but causes an immediate commit\n        insert into {{ relation }} select * from {{ intermediate_relation }};\n        commit;\n    {% endset %}\n    {% do elementary.run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.create_intermediate_relation", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4611819, "supported_languages": null}, "macro.elementary.table_name_with_suffix": {"name": "table_name_with_suffix", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/table_name_with_suffix.sql", "original_file_path": "macros/utils/table_operations/table_name_with_suffix.sql", "unique_id": "macro.elementary.table_name_with_suffix", "macro_sql": "{% macro table_name_with_suffix(table_name, suffix) %}\n    {% set relation_max_name_length = elementary.get_relation_max_name_length()  %}\n    {% if relation_max_name_length %}\n        {% set suffix_length = suffix | length %}\n        {% set table_name_with_suffix = table_name[:relation_max_name_length - suffix_length] ~ suffix %}\n    {% else %}\n        {% set table_name_with_suffix = table_name ~ suffix %}\n    {% endif %}\n    {{ return(table_name_with_suffix) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_relation_max_name_length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720749444.4630532, "supported_languages": null}, "macro.datapai.snowflake_date_parts": {"name": "snowflake_date_parts", "resource_type": "macro", "package_name": "datapai", "path": "macros/date_macros.sql", "original_file_path": "macros/date_macros.sql", "unique_id": "macro.datapai.snowflake_date_parts", "macro_sql": "{% macro snowflake_date_parts(date_key) %}\n    SELECT\n        DATE_PART('dayofyear', {{ date_key }}) AS day_of_year,\n        DATE_PART('week', {{ date_key }}) AS week_key,\n        DATE_PART('weekofyear', {{ date_key }}) AS week_of_year,\n        DATE_PART('dayofweek', {{ date_key }}) AS day_of_week,\n        TO_NUMBER(TO_VARCHAR({{ date_key }}, 'ID')) AS iso_day_of_week,\n        DAYNAME({{ date_key }}) AS day_name,\n        DATE_TRUNC('week', {{ date_key }}) AS first_day_of_week,\n        DATEADD('DAY', 6, DATE_TRUNC('week', {{ date_key }})) AS last_day_of_week,\n        TO_VARCHAR(YEAR({{ date_key }}), 'YYYYMM') AS month_key,\n        MONTH({{ date_key }}) AS month_of_year,\n        DAYOFMONTH({{ date_key }}) AS day_of_month,\n        LEFT(TO_VARCHAR({{ date_key }}, 'Month'), 3) AS month_name_short,\n        TO_VARCHAR({{ date_key }}, 'Month') AS month_name,\n        DATE_TRUNC('month', {{ date_key }}) AS first_day_of_month,\n        LAST_DAY({{ date_key }}) AS last_day_of_month,\n        QUARTER({{ date_key }}) AS quarter_of_year,\n        DATEDIFF('day', DATE_TRUNC('quarter', {{ date_key }}), {{ date_key }}) + 1 AS day_of_quarter,\n        'Q' || TO_VARCHAR(QUARTER({{ date_key }})) AS quarter_desc_short,\n        'Quarter ' || TO_VARCHAR(QUARTER({{ date_key }})) AS quarter_desc,\n        DATE_TRUNC('quarter', {{ date_key }}) AS first_day_of_quarter,\n        LAST_DAY(DATEADD('MONTH', 2, DATE_TRUNC('quarter', {{ date_key }}))) AS last_day_of_quarter,\n        YEAR({{ date_key }}) AS year_key,\n        DATE_TRUNC('year', {{ date_key }}) AS first_day_of_year,\n        DATEADD('YEAR', 1, DATE_TRUNC('year', {{ date_key }})) - 1 AS last_day_of_year\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720754084.4325402, "supported_languages": null}}, "docs": {"doc.datapai.orders_status": {"name": "orders_status", "resource_type": "doc", "package_name": "datapai", "path": "full-jaffle-shop/docs.md", "original_file_path": "models/full-jaffle-shop/docs.md", "unique_id": "doc.datapai.orders_status", "block_contents": "# Order Status\n\nOrders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"}, "doc.datapai.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "datapai", "path": "full-jaffle-shop/overview.md", "original_file_path": "models/full-jaffle-shop/overview.md", "unique_id": "doc.datapai.__overview__", "block_contents": "## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for testing out code.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop)."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {"exposure.datapai.ld_project_3675b69e_8324_4110_bdca_059031aa8da3": {"name": "ld_project_3675b69e_8324_4110_bdca_059031aa8da3", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_project_3675b69e_8324_4110_bdca_059031aa8da3", "fqn": ["datapai", "full-jaffle-shop", "ld_project_3675b69e_8324_4110_bdca_059031aa8da3"], "type": "application", "owner": {"email": "demo@lightdash.com", "name": "David Attenborough"}, "description": "Lightdash project", "label": "Lightdash - Jaffle shop", "maturity": null, "meta": {}, "tags": ["lightdash", "project"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/home", "depends_on": {"macros": [], "nodes": ["model.datapai.plan", "model.datapai.customers", "model.datapai.membership", "model.datapai.orders", "model.datapai.payments"]}, "refs": [{"name": "plan", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}, {"name": "membership", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}, {"name": "payments", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.4130337}, "exposure.datapai.ld_chart_01962af0_d72a_4428_913b_2673298d752d": {"name": "ld_chart_01962af0_d72a_4428_913b_2673298d752d", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_chart_01962af0_d72a_4428_913b_2673298d752d", "fqn": ["datapai", "full-jaffle-shop", "ld_chart_01962af0_d72a_4428_913b_2673298d752d"], "type": "analysis", "owner": {"email": "", "name": "David Attenborough"}, "description": "A pivot table sample", "label": "How many users were created each month ?", "maturity": null, "meta": {}, "tags": ["lightdash", "chart"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/saved/01962af0-d72a-4428-913b-2673298d752d/view", "depends_on": {"macros": [], "nodes": ["model.datapai.plan", "model.datapai.customers", "model.datapai.membership"]}, "refs": [{"name": "plan", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}, {"name": "membership", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.4220502}, "exposure.datapai.ld_chart_c53c4c5b_10d3_4b79_a616_0f7797c8fc21": {"name": "ld_chart_c53c4c5b_10d3_4b79_a616_0f7797c8fc21", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_chart_c53c4c5b_10d3_4b79_a616_0f7797c8fc21", "fqn": ["datapai", "full-jaffle-shop", "ld_chart_c53c4c5b_10d3_4b79_a616_0f7797c8fc21"], "type": "analysis", "owner": {"email": "", "name": "David Attenborough"}, "description": "A single number showing the sum of all historical revenue", "label": "What's our total revenue to date?", "maturity": null, "meta": {}, "tags": ["lightdash", "chart"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/saved/c53c4c5b-10d3-4b79-a616-0f7797c8fc21/view", "depends_on": {"macros": [], "nodes": ["model.datapai.orders", "model.datapai.payments", "model.datapai.customers"]}, "refs": [{"name": "orders", "package": null, "version": null}, {"name": "payments", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.43026}, "exposure.datapai.ld_chart_be15e7e2_2ad4_49c7_b1fe_40d334e17373": {"name": "ld_chart_be15e7e2_2ad4_49c7_b1fe_40d334e17373", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_chart_be15e7e2_2ad4_49c7_b1fe_40d334e17373", "fqn": ["datapai", "full-jaffle-shop", "ld_chart_be15e7e2_2ad4_49c7_b1fe_40d334e17373"], "type": "analysis", "owner": {"email": "", "name": "David Attenborough"}, "description": "A single value of the total number of orders received in February", "label": "How many orders did we get on February?", "maturity": null, "meta": {}, "tags": ["lightdash", "chart"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/saved/be15e7e2-2ad4-49c7-b1fe-40d334e17373/view", "depends_on": {"macros": [], "nodes": ["model.datapai.orders", "model.datapai.customers"]}, "refs": [{"name": "orders", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.4375465}, "exposure.datapai.ld_chart_d801d67d_2852_4a94_a6cc_ac32e5a089bf": {"name": "ld_chart_d801d67d_2852_4a94_a6cc_ac32e5a089bf", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_chart_d801d67d_2852_4a94_a6cc_ac32e5a089bf", "fqn": ["datapai", "full-jaffle-shop", "ld_chart_d801d67d_2852_4a94_a6cc_ac32e5a089bf"], "type": "analysis", "owner": {"email": "", "name": "David Attenborough"}, "description": "A pivot table sample", "label": "How much revenue do we have per payment method each month?", "maturity": null, "meta": {}, "tags": ["lightdash", "chart"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/saved/d801d67d-2852-4a94-a6cc-ac32e5a089bf/view", "depends_on": {"macros": [], "nodes": ["model.datapai.orders", "model.datapai.payments", "model.datapai.customers"]}, "refs": [{"name": "orders", "package": null, "version": null}, {"name": "payments", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.4456546}, "exposure.datapai.ld_chart_3dc53928_60a1_450f_a351_9f443b87d988": {"name": "ld_chart_3dc53928_60a1_450f_a351_9f443b87d988", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_chart_3dc53928_60a1_450f_a351_9f443b87d988", "fqn": ["datapai", "full-jaffle-shop", "ld_chart_3dc53928_60a1_450f_a351_9f443b87d988"], "type": "analysis", "owner": {"email": "", "name": "David Attenborough"}, "description": "Total revenue received via coupons, gift cards, bank transfers, and credit cards", "label": "How much revenue do we have per payment method?", "maturity": null, "meta": {}, "tags": ["lightdash", "chart"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/saved/3dc53928-60a1-450f-a351-9f443b87d988/view", "depends_on": {"macros": [], "nodes": ["model.datapai.orders", "model.datapai.payments", "model.datapai.customers"]}, "refs": [{"name": "orders", "package": null, "version": null}, {"name": "payments", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.4535413}, "exposure.datapai.ld_chart_66d48c9a_4b09_45b2_a38b_09750abc569b": {"name": "ld_chart_66d48c9a_4b09_45b2_a38b_09750abc569b", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_chart_66d48c9a_4b09_45b2_a38b_09750abc569b", "fqn": ["datapai", "full-jaffle-shop", "ld_chart_66d48c9a_4b09_45b2_a38b_09750abc569b"], "type": "analysis", "owner": {"email": "", "name": "David Attenborough"}, "description": "Time series of orders received per day and total orders over time", "label": "How many orders we have over time ?", "maturity": null, "meta": {}, "tags": ["lightdash", "chart"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/saved/66d48c9a-4b09-45b2-a38b-09750abc569b/view", "depends_on": {"macros": [], "nodes": ["model.datapai.orders", "model.datapai.customers"]}, "refs": [{"name": "orders", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.4612167}, "exposure.datapai.ld_chart_28287c81_c608_42c3_9fa5_af4dec1e574b": {"name": "ld_chart_28287c81_c608_42c3_9fa5_af4dec1e574b", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_chart_28287c81_c608_42c3_9fa5_af4dec1e574b", "fqn": ["datapai", "full-jaffle-shop", "ld_chart_28287c81_c608_42c3_9fa5_af4dec1e574b"], "type": "analysis", "owner": {"email": "", "name": "David Attenborough"}, "description": "Average order size for each customer id", "label": "What's the average spend per customer?", "maturity": null, "meta": {}, "tags": ["lightdash", "chart"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/saved/28287c81-c608-42c3-9fa5-af4dec1e574b/view", "depends_on": {"macros": [], "nodes": ["model.datapai.orders", "model.datapai.customers"]}, "refs": [{"name": "orders", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.468267}, "exposure.datapai.ld_chart_2eac20e1_e391_46a9_901e_73ee5e453e78": {"name": "ld_chart_2eac20e1_e391_46a9_901e_73ee5e453e78", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_chart_2eac20e1_e391_46a9_901e_73ee5e453e78", "fqn": ["datapai", "full-jaffle-shop", "ld_chart_2eac20e1_e391_46a9_901e_73ee5e453e78"], "type": "analysis", "owner": {"email": "", "name": "David Attenborough"}, "description": "Payment range by amount", "label": "How do payment methods vary across different amount ranges?\"", "maturity": null, "meta": {}, "tags": ["lightdash", "chart"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/saved/2eac20e1-e391-46a9-901e-73ee5e453e78/view", "depends_on": {"macros": [], "nodes": ["model.datapai.orders", "model.datapai.payments", "model.datapai.customers"]}, "refs": [{"name": "orders", "package": null, "version": null}, {"name": "payments", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.4761689}, "exposure.datapai.ld_chart_3cc86d58_4031_4587_bfdd_bc59a11c24b5": {"name": "ld_chart_3cc86d58_4031_4587_bfdd_bc59a11c24b5", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_chart_3cc86d58_4031_4587_bfdd_bc59a11c24b5", "fqn": ["datapai", "full-jaffle-shop", "ld_chart_3cc86d58_4031_4587_bfdd_bc59a11c24b5"], "type": "analysis", "owner": {"email": "", "name": "David Attenborough"}, "description": "A table of the 20 customers that least recently placed an order with us", "label": "Which customers have not recently ordered an item?", "maturity": null, "meta": {}, "tags": ["lightdash", "chart"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/saved/3cc86d58-4031-4587-bfdd-bc59a11c24b5/view", "depends_on": {"macros": [], "nodes": ["model.datapai.orders", "model.datapai.payments", "model.datapai.customers"]}, "refs": [{"name": "orders", "package": null, "version": null}, {"name": "payments", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.4840539}, "exposure.datapai.ld_dashboard_a2a53dfe_2743_4bb6_b636_2b94a470a3da": {"name": "ld_dashboard_a2a53dfe_2743_4bb6_b636_2b94a470a3da", "resource_type": "exposure", "package_name": "datapai", "path": "full-jaffle-shop/lightdash_exposures.yml", "original_file_path": "models/full-jaffle-shop/lightdash_exposures.yml", "unique_id": "exposure.datapai.ld_dashboard_a2a53dfe_2743_4bb6_b636_2b94a470a3da", "fqn": ["datapai", "full-jaffle-shop", "ld_dashboard_a2a53dfe_2743_4bb6_b636_2b94a470a3da"], "type": "dashboard", "owner": {"email": "", "name": "David Attenborough"}, "description": "n/a", "label": "Jaffle dashboard", "maturity": null, "meta": {}, "tags": ["lightdash", "dashboard"], "config": {"enabled": true}, "unrendered_config": {}, "url": "http://localhost:3000/projects/3675b69e-8324-4110-bdca-059031aa8da3/dashboards/a2a53dfe-2743-4bb6-b636-2b94a470a3da/view", "depends_on": {"macros": [], "nodes": ["model.datapai.orders", "model.datapai.payments", "model.datapai.customers"]}, "refs": [{"name": "orders", "package": null, "version": null}, {"name": "payments", "package": null, "version": null}, {"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1720749448.4922242}}, "metrics": {"metric.datapai.unique_customer_count": {"name": "unique_customer_count", "resource_type": "metric", "package_name": "datapai", "path": "full-jaffle-shop/metrics.yml", "original_file_path": "models/full-jaffle-shop/metrics.yml", "unique_id": "metric.datapai.unique_customer_count", "fqn": ["datapai", "full-jaffle-shop", "unique_customer_count"], "description": "Total number of customers", "label": "Unique customer count", "calculation_method": "count_distinct", "expression": "customer_id", "filters": [], "time_grains": ["day", "week", "month", "quarter", "year"], "dimensions": [], "timestamp": "created", "window": null, "model": "ref('customers')", "model_unique_id": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["model.datapai.customers"]}, "refs": [{"name": "customers", "package": null, "version": null}], "metrics": [], "created_at": 1720749448.5151913, "group": null}, "metric.datapai.completed_order_count": {"name": "completed_order_count", "resource_type": "metric", "package_name": "datapai", "path": "full-jaffle-shop/metrics.yml", "original_file_path": "models/full-jaffle-shop/metrics.yml", "unique_id": "metric.datapai.completed_order_count", "fqn": ["datapai", "full-jaffle-shop", "completed_order_count"], "description": "Total number of completed orders", "label": "Completed order count", "calculation_method": "count_distinct", "expression": "order_id", "filters": [{"field": "is_completed", "operator": "=", "value": "true"}], "time_grains": ["day", "week", "month", "quarter", "year"], "dimensions": [], "timestamp": "order_date", "window": null, "model": "ref('orders')", "model_unique_id": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["model.datapai.orders"]}, "refs": [{"name": "orders", "package": null, "version": null}], "metrics": [], "created_at": 1720749448.5240507, "group": null}, "metric.datapai.dbt_expression": {"name": "dbt_expression", "resource_type": "metric", "package_name": "datapai", "path": "full-jaffle-shop/metrics.yml", "original_file_path": "models/full-jaffle-shop/metrics.yml", "unique_id": "metric.datapai.dbt_expression", "fqn": ["datapai", "full-jaffle-shop", "dbt_expression"], "description": "derived metric in v1.2 ( deprecated )", "label": "dbt_expression", "calculation_method": "derived", "expression": "unique_customer_count / unique_customer_count", "filters": [], "time_grains": ["day", "week", "month", "quarter", "year"], "dimensions": [], "timestamp": "created", "window": null, "model": null, "model_unique_id": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["metric.datapai.unique_customer_count", "metric.datapai.unique_customer_count"]}, "refs": [], "metrics": [["unique_customer_count"], ["unique_customer_count"]], "created_at": 1720749448.5301936, "group": null}, "metric.datapai.dbt_derived": {"name": "dbt_derived", "resource_type": "metric", "package_name": "datapai", "path": "full-jaffle-shop/metrics.yml", "original_file_path": "models/full-jaffle-shop/metrics.yml", "unique_id": "metric.datapai.dbt_derived", "fqn": ["datapai", "full-jaffle-shop", "dbt_derived"], "description": "", "label": "dbt_derived", "calculation_method": "derived", "expression": "unique_customer_count / unique_customer_count", "filters": [], "time_grains": ["day", "week", "month", "quarter", "year"], "dimensions": [], "timestamp": "created", "window": null, "model": null, "model_unique_id": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["metric.datapai.unique_customer_count", "metric.datapai.unique_customer_count"]}, "refs": [], "metrics": [["unique_customer_count"], ["unique_customer_count"]], "created_at": 1720749448.5368838, "group": null}}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.datapai.events": ["seed.datapai.raw_events"], "model.datapai.generated_a": ["seed.datapai.raw_generated"], "model.datapai.generated_b": ["seed.datapai.raw_generated"], "model.datapai.membership": ["seed.datapai.raw_membership"], "model.datapai.orders": ["model.datapai.stg_orders", "model.datapai.stg_payments"], "model.datapai.payments": ["model.datapai.stg_payments"], "model.datapai.plan": ["seed.datapai.raw_plan"], "model.datapai.tracks": ["seed.datapai.raw_tracks"], "model.datapai.users": ["model.datapai.stg_customers"], "model.datapai.customers": ["model.datapai.stg_customers", "model.datapai.stg_orders", "model.datapai.stg_payments"], "model.datapai.stg_customers": ["seed.datapai.raw_customers"], "model.datapai.stg_orders": ["seed.datapai.raw_orders"], "model.datapai.stg_payments": ["seed.datapai.raw_payments"], "model.datapai.dim_customer": ["model.datapai.stg_customer", "model.datapai.stg_employee"], "model.datapai.fct_invoice": ["model.datapai.stg_invoice"], "seed.datapai.raw_customers": [], "seed.datapai.raw_events": [], "seed.datapai.raw_generated": [], "seed.datapai.raw_membership": [], "seed.datapai.raw_orders": [], "seed.datapai.raw_payments": [], "seed.datapai.raw_plan": [], "seed.datapai.raw_tracks": [], "model.elementary.alerts_anomaly_detection": ["model.elementary.elementary_test_results"], "model.elementary.alerts_dbt_models": ["model.elementary.model_run_results", "model.elementary.snapshot_run_results"], "model.elementary.alerts_dbt_source_freshness": ["model.elementary.dbt_source_freshness_results", "model.elementary.dbt_sources"], "model.elementary.alerts_dbt_tests": ["model.elementary.elementary_test_results"], "model.elementary.alerts_schema_changes": ["model.elementary.elementary_test_results"], "model.elementary.anomaly_threshold_sensitivity": ["model.elementary.metrics_anomaly_score"], "model.elementary.metrics_anomaly_score": ["model.elementary.data_monitoring_metrics"], "model.elementary.data_monitoring_metrics": [], "model.elementary.schema_columns_snapshot": [], "model.elementary.dbt_artifacts_hashes": ["model.elementary.dbt_exposures", "model.elementary.dbt_metrics", "model.elementary.dbt_models", "model.elementary.dbt_seeds", "model.elementary.dbt_snapshots", "model.elementary.dbt_sources", "model.elementary.dbt_tests"], "model.elementary.dbt_exposures": [], "model.elementary.dbt_invocations": [], "model.elementary.dbt_metrics": [], "model.elementary.dbt_models": [], "model.elementary.dbt_run_results": [], "model.elementary.dbt_seeds": [], "model.elementary.dbt_snapshots": [], "model.elementary.dbt_sources": [], "model.elementary.dbt_tests": [], "model.elementary.filtered_information_schema_columns": [], "model.elementary.filtered_information_schema_tables": [], "model.elementary.dbt_source_freshness_results": [], "model.elementary.elementary_test_results": [], "model.elementary.job_run_results": ["model.elementary.dbt_invocations"], "model.elementary.model_run_results": ["model.elementary.dbt_models", "model.elementary.dbt_run_results"], "model.elementary.snapshot_run_results": ["model.elementary.dbt_run_results", "model.elementary.dbt_snapshots"], "model.elementary.test_result_rows": ["model.elementary.elementary_test_results", "model.elementary.elementary_test_results", "model.elementary.elementary_test_results"], "model.elementary.metadata": [], "model.elementary.monitors_runs": ["model.elementary.data_monitoring_metrics"], "operation.elementary.elementary-on-run-start-0": [], "operation.elementary.elementary-on-run-end-0": [], "test.datapai.unique_customers_customer_id.c5af1ff4b1": ["model.datapai.customers"], "test.datapai.not_null_customers_customer_id.5c9bf9911d": ["model.datapai.customers"], "test.datapai.unique_orders_order_id.fed79b3a6e": ["model.datapai.orders"], "test.datapai.not_null_orders_order_id.cf6c17daed": ["model.datapai.orders"], "test.datapai.not_null_orders_customer_id.c5f02694af": ["model.datapai.orders"], "test.datapai.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": ["model.datapai.customers", "model.datapai.orders"], "test.datapai.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": ["model.datapai.orders"], "test.datapai.not_null_orders_amount.106140f9fd": ["model.datapai.orders"], "test.datapai.not_null_orders_credit_card_amount.d3ca593b59": ["model.datapai.orders"], "test.datapai.not_null_orders_coupon_amount.ab90c90625": ["model.datapai.orders"], "test.datapai.not_null_orders_bank_transfer_amount.7743500c49": ["model.datapai.orders"], "test.datapai.not_null_orders_gift_card_amount.413a0d2d7a": ["model.datapai.orders"], "test.datapai.unique_stg_customers_customer_id.c7614daada": ["model.datapai.stg_customers"], "test.datapai.not_null_stg_customers_customer_id.e2cfb1f9aa": ["model.datapai.stg_customers"], "test.datapai.unique_stg_orders_order_id.e3b841c71a": ["model.datapai.stg_orders"], "test.datapai.not_null_stg_orders_order_id.81cfe2fe64": ["model.datapai.stg_orders"], "test.datapai.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": ["model.datapai.stg_orders"], "test.datapai.unique_stg_payments_payment_id.3744510712": ["model.datapai.stg_payments"], "test.datapai.not_null_stg_payments_payment_id.c19cc50075": ["model.datapai.stg_payments"], "test.datapai.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": ["model.datapai.stg_payments"], "model.datapai.stg_genre": ["seed.datapai.genre"], "model.datapai.stg_invoice": ["seed.datapai.invoice"], "model.datapai.stg_playlist": ["seed.datapai.playlist"], "model.datapai.stg_album": ["seed.datapai.album"], "model.datapai.stg_employee": ["seed.datapai.employee"], "model.datapai.stg_track": ["seed.datapai.track"], "model.datapai.stg_artist": ["seed.datapai.artist"], "model.datapai.stg_customer": ["seed.datapai.customer"], "seed.datapai.artist": [], "seed.datapai.album": [], "seed.datapai.playlist": [], "seed.datapai.invoice": [], "seed.datapai.track": [], "seed.datapai.customer": [], "seed.datapai.employee": [], "seed.datapai.genre": [], "test.datapai.not_null_stg_genre_genre_id.5f523677de": ["model.datapai.stg_genre"], "test.datapai.unique_stg_genre_genre_id.afd28bdf4f": ["model.datapai.stg_genre"], "test.datapai.not_null_stg_genre_genre_name.fd5fe8d5db": ["model.datapai.stg_genre"], "test.datapai.not_null_stg_invoice_invoice_id.01df371aae": ["model.datapai.stg_invoice"], "test.datapai.unique_stg_invoice_invoice_id.ff62a93d3b": ["model.datapai.stg_invoice"], "test.datapai.not_null_stg_invoice_customer_id.ad43fc527b": ["model.datapai.stg_invoice"], "test.datapai.not_null_stg_invoice_invoice_date.b071eb8986": ["model.datapai.stg_invoice"], "test.datapai.not_null_stg_invoice_invoice_billing_address.9f742a461f": ["model.datapai.stg_invoice"], "test.datapai.not_null_stg_invoice_invoice_billing_city.8a10b5ac4d": ["model.datapai.stg_invoice"], "test.datapai.not_null_stg_invoice_invoice_billing_country.f58eed528f": ["model.datapai.stg_invoice"], "test.datapai.not_null_stg_invoice_invoice_total.9f7574ef23": ["model.datapai.stg_invoice"], "test.datapai.not_null_stg_playlist_playlist_id.ce164d9d24": ["model.datapai.stg_playlist"], "test.datapai.unique_stg_playlist_playlist_id.6f899c44f6": ["model.datapai.stg_playlist"], "test.datapai.not_null_stg_playlist_playlist_name.ee2cc91336": ["model.datapai.stg_playlist"], "test.datapai.not_null_stg_album_album_id.5b25d99261": ["model.datapai.stg_album"], "test.datapai.unique_stg_album_album_id.d12f7c9e1f": ["model.datapai.stg_album"], "test.datapai.not_null_stg_album_album_title.1ecdc1080a": ["model.datapai.stg_album"], "test.datapai.not_null_stg_album_artist_id.4a798deacb": ["model.datapai.stg_album"], "test.datapai.not_null_stg_employee_employee_id.102880b2ef": ["model.datapai.stg_employee"], "test.datapai.unique_stg_employee_employee_id.756815244f": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_first_name.321f1468a0": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_last_name.4f5cf3091b": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_title.0728ddb0bb": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_birth_date.0ad7e2d6b1": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_hire_date.3dc5845e12": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_country.56ae97c8ed": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_phone.b595dd7454": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_postal_code.5963c5a4fa": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_fax.5e0929e06a": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_email.31c182658d": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_employee_employee_address.9b407327ef": ["model.datapai.stg_employee"], "test.datapai.not_null_stg_track_track_id.176bd09265": ["model.datapai.stg_track"], "test.datapai.unique_stg_track_track_id.39ecf945cc": ["model.datapai.stg_track"], "test.datapai.not_null_stg_track_track_name.9190c61d6c": ["model.datapai.stg_track"], "test.datapai.not_null_stg_track_album_id.8e679e40b6": ["model.datapai.stg_track"], "test.datapai.not_null_stg_track_media_type_id.8d676c31f1": ["model.datapai.stg_track"], "test.datapai.not_null_stg_track_genre_id.cf83941793": ["model.datapai.stg_track"], "test.datapai.not_null_stg_track_track_milliseconds.578ce7a180": ["model.datapai.stg_track"], "test.datapai.not_null_stg_track_track_bytes.0f9f9470d9": ["model.datapai.stg_track"], "test.datapai.not_null_stg_track_track_unit_price.3541e4453d": ["model.datapai.stg_track"], "test.datapai.not_null_stg_artist_artist_id.a7b197e381": ["model.datapai.stg_artist"], "test.datapai.unique_stg_artist_artist_id.be6d44e19a": ["model.datapai.stg_artist"], "test.datapai.not_null_stg_artist_artist_name.96f41e5e0a": ["model.datapai.stg_artist"], "test.datapai.not_null_stg_customer_customer_id.4721d3b88d": ["model.datapai.stg_customer"], "test.datapai.unique_stg_customer_customer_id.310773d0ea": ["model.datapai.stg_customer"], "test.datapai.not_null_stg_customer_customer_first_name.0f590c04e3": ["model.datapai.stg_customer"], "test.datapai.not_null_stg_customer_customer_last_name.15080c06e8": ["model.datapai.stg_customer"], "test.datapai.not_null_stg_customer_customer_address.852191b5ef": ["model.datapai.stg_customer"], "test.datapai.not_null_stg_customer_customer_city.07d3671de3": ["model.datapai.stg_customer"], "test.datapai.not_null_stg_customer_customer_country.3917a1df1f": ["model.datapai.stg_customer"], "test.datapai.not_null_stg_customer_customer_email.2a1ad070ed": ["model.datapai.stg_customer"], "test.datapai.not_null_stg_customer_employee_id.01436fa1bd": ["model.datapai.stg_customer"], "model.datapai.fct_invoice_line": ["model.datapai.stg_invoice_line"], "model.datapai.stg_invoice_line": ["seed.datapai.invoiceline"], "model.datapai.obt_playlist_track": ["model.datapai.fct_playlist_track", "model.datapai.stg_playlist"], "model.datapai.fct_playlist_track": ["model.datapai.dim_track", "model.datapai.stg_playlist_track"], "model.datapai.stg_playlist_track": ["seed.datapai.playlisttrack"], "model.datapai.dim_track": ["model.datapai.stg_album", "model.datapai.stg_artist", "model.datapai.stg_genre", "model.datapai.stg_media_type", "model.datapai.stg_track"], "model.datapai.stg_media_type": ["seed.datapai.mediatype"], "seed.datapai.playlisttrack": [], "seed.datapai.mediatype": [], "seed.datapai.invoiceline": [], "test.datapai.not_null_stg_invoice_line_invoice_line_id.c9cc6cb0b8": ["model.datapai.stg_invoice_line"], "test.datapai.unique_stg_invoice_line_invoice_line_id.77928a3e6b": ["model.datapai.stg_invoice_line"], "test.datapai.not_null_stg_invoice_line_invoice_id.50f6562bf0": ["model.datapai.stg_invoice_line"], "test.datapai.not_null_stg_invoice_line_track_id.5d35924e21": ["model.datapai.stg_invoice_line"], "test.datapai.not_null_stg_invoice_line_track_unit_price.12de227af6": ["model.datapai.stg_invoice_line"], "test.datapai.not_null_stg_invoice_line_track_quantity.ae23361304": ["model.datapai.stg_invoice_line"], "test.datapai.not_null_stg_playlist_track_playlist_id.a509a68ada": ["model.datapai.stg_playlist_track"], "test.datapai.not_null_stg_playlist_track_track_id.971e5c3ed1": ["model.datapai.stg_playlist_track"], "test.datapai.not_null_stg_media_type_media_type_id.7826e42fc1": ["model.datapai.stg_media_type"], "test.datapai.unique_stg_media_type_media_type_id.6cc267ef44": ["model.datapai.stg_media_type"], "test.datapai.not_null_stg_media_type_media_type_name.13041c7733": ["model.datapai.stg_media_type"], "model.datapai.dim_date": [], "model.datapai.obt_invoice": ["model.datapai.dim_customer", "model.datapai.dim_date", "model.datapai.fct_invoice"], "source.datapai.csv.album": [], "source.datapai.csv.artist": [], "source.datapai.csv.customer": [], "source.datapai.csv.employee": [], "source.datapai.csv.genre": [], "source.datapai.csv.invoice_line": [], "source.datapai.csv.invoice": [], "source.datapai.csv.media_type": [], "source.datapai.csv.playlist_track": [], "source.datapai.csv.playlist": [], "source.datapai.csv.track": [], "exposure.datapai.ld_project_3675b69e_8324_4110_bdca_059031aa8da3": ["model.datapai.customers", "model.datapai.membership", "model.datapai.orders", "model.datapai.payments", "model.datapai.plan"], "exposure.datapai.ld_chart_01962af0_d72a_4428_913b_2673298d752d": ["model.datapai.customers", "model.datapai.membership", "model.datapai.plan"], "exposure.datapai.ld_chart_c53c4c5b_10d3_4b79_a616_0f7797c8fc21": ["model.datapai.customers", "model.datapai.orders", "model.datapai.payments"], "exposure.datapai.ld_chart_be15e7e2_2ad4_49c7_b1fe_40d334e17373": ["model.datapai.customers", "model.datapai.orders"], "exposure.datapai.ld_chart_d801d67d_2852_4a94_a6cc_ac32e5a089bf": ["model.datapai.customers", "model.datapai.orders", "model.datapai.payments"], "exposure.datapai.ld_chart_3dc53928_60a1_450f_a351_9f443b87d988": ["model.datapai.customers", "model.datapai.orders", "model.datapai.payments"], "exposure.datapai.ld_chart_66d48c9a_4b09_45b2_a38b_09750abc569b": ["model.datapai.customers", "model.datapai.orders"], "exposure.datapai.ld_chart_28287c81_c608_42c3_9fa5_af4dec1e574b": ["model.datapai.customers", "model.datapai.orders"], "exposure.datapai.ld_chart_2eac20e1_e391_46a9_901e_73ee5e453e78": ["model.datapai.customers", "model.datapai.orders", "model.datapai.payments"], "exposure.datapai.ld_chart_3cc86d58_4031_4587_bfdd_bc59a11c24b5": ["model.datapai.customers", "model.datapai.orders", "model.datapai.payments"], "exposure.datapai.ld_dashboard_a2a53dfe_2743_4bb6_b636_2b94a470a3da": ["model.datapai.customers", "model.datapai.orders", "model.datapai.payments"], "metric.datapai.unique_customer_count": ["model.datapai.customers"], "metric.datapai.completed_order_count": ["model.datapai.orders"], "metric.datapai.dbt_expression": ["metric.datapai.unique_customer_count", "metric.datapai.unique_customer_count"], "metric.datapai.dbt_derived": ["metric.datapai.unique_customer_count", "metric.datapai.unique_customer_count"]}, "child_map": {"model.datapai.events": [], "model.datapai.generated_a": [], "model.datapai.generated_b": [], "model.datapai.membership": ["exposure.datapai.ld_chart_01962af0_d72a_4428_913b_2673298d752d", "exposure.datapai.ld_project_3675b69e_8324_4110_bdca_059031aa8da3"], "model.datapai.orders": ["exposure.datapai.ld_chart_28287c81_c608_42c3_9fa5_af4dec1e574b", "exposure.datapai.ld_chart_2eac20e1_e391_46a9_901e_73ee5e453e78", "exposure.datapai.ld_chart_3cc86d58_4031_4587_bfdd_bc59a11c24b5", "exposure.datapai.ld_chart_3dc53928_60a1_450f_a351_9f443b87d988", "exposure.datapai.ld_chart_66d48c9a_4b09_45b2_a38b_09750abc569b", "exposure.datapai.ld_chart_be15e7e2_2ad4_49c7_b1fe_40d334e17373", "exposure.datapai.ld_chart_c53c4c5b_10d3_4b79_a616_0f7797c8fc21", "exposure.datapai.ld_chart_d801d67d_2852_4a94_a6cc_ac32e5a089bf", "exposure.datapai.ld_dashboard_a2a53dfe_2743_4bb6_b636_2b94a470a3da", "exposure.datapai.ld_project_3675b69e_8324_4110_bdca_059031aa8da3", "metric.datapai.completed_order_count", "test.datapai.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3", "test.datapai.not_null_orders_amount.106140f9fd", "test.datapai.not_null_orders_bank_transfer_amount.7743500c49", "test.datapai.not_null_orders_coupon_amount.ab90c90625", "test.datapai.not_null_orders_credit_card_amount.d3ca593b59", "test.datapai.not_null_orders_customer_id.c5f02694af", "test.datapai.not_null_orders_gift_card_amount.413a0d2d7a", "test.datapai.not_null_orders_order_id.cf6c17daed", "test.datapai.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "test.datapai.unique_orders_order_id.fed79b3a6e"], "model.datapai.payments": ["exposure.datapai.ld_chart_2eac20e1_e391_46a9_901e_73ee5e453e78", "exposure.datapai.ld_chart_3cc86d58_4031_4587_bfdd_bc59a11c24b5", "exposure.datapai.ld_chart_3dc53928_60a1_450f_a351_9f443b87d988", "exposure.datapai.ld_chart_c53c4c5b_10d3_4b79_a616_0f7797c8fc21", "exposure.datapai.ld_chart_d801d67d_2852_4a94_a6cc_ac32e5a089bf", "exposure.datapai.ld_dashboard_a2a53dfe_2743_4bb6_b636_2b94a470a3da", "exposure.datapai.ld_project_3675b69e_8324_4110_bdca_059031aa8da3"], "model.datapai.plan": ["exposure.datapai.ld_chart_01962af0_d72a_4428_913b_2673298d752d", "exposure.datapai.ld_project_3675b69e_8324_4110_bdca_059031aa8da3"], "model.datapai.tracks": [], "model.datapai.users": [], "model.datapai.customers": ["exposure.datapai.ld_chart_01962af0_d72a_4428_913b_2673298d752d", "exposure.datapai.ld_chart_28287c81_c608_42c3_9fa5_af4dec1e574b", "exposure.datapai.ld_chart_2eac20e1_e391_46a9_901e_73ee5e453e78", "exposure.datapai.ld_chart_3cc86d58_4031_4587_bfdd_bc59a11c24b5", "exposure.datapai.ld_chart_3dc53928_60a1_450f_a351_9f443b87d988", "exposure.datapai.ld_chart_66d48c9a_4b09_45b2_a38b_09750abc569b", "exposure.datapai.ld_chart_be15e7e2_2ad4_49c7_b1fe_40d334e17373", "exposure.datapai.ld_chart_c53c4c5b_10d3_4b79_a616_0f7797c8fc21", "exposure.datapai.ld_chart_d801d67d_2852_4a94_a6cc_ac32e5a089bf", "exposure.datapai.ld_dashboard_a2a53dfe_2743_4bb6_b636_2b94a470a3da", "exposure.datapai.ld_project_3675b69e_8324_4110_bdca_059031aa8da3", "metric.datapai.unique_customer_count", "test.datapai.not_null_customers_customer_id.5c9bf9911d", "test.datapai.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "test.datapai.unique_customers_customer_id.c5af1ff4b1"], "model.datapai.stg_customers": ["model.datapai.customers", "model.datapai.users", "test.datapai.not_null_stg_customers_customer_id.e2cfb1f9aa", "test.datapai.unique_stg_customers_customer_id.c7614daada"], "model.datapai.stg_orders": ["model.datapai.customers", "model.datapai.orders", "test.datapai.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "test.datapai.not_null_stg_orders_order_id.81cfe2fe64", "test.datapai.unique_stg_orders_order_id.e3b841c71a"], "model.datapai.stg_payments": ["model.datapai.customers", "model.datapai.orders", "model.datapai.payments", "test.datapai.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278", "test.datapai.not_null_stg_payments_payment_id.c19cc50075", "test.datapai.unique_stg_payments_payment_id.3744510712"], "model.datapai.dim_customer": ["model.datapai.obt_invoice"], "model.datapai.fct_invoice": ["model.datapai.obt_invoice"], "seed.datapai.raw_customers": ["model.datapai.stg_customers"], "seed.datapai.raw_events": ["model.datapai.events"], "seed.datapai.raw_generated": ["model.datapai.generated_a", "model.datapai.generated_b"], "seed.datapai.raw_membership": ["model.datapai.membership"], "seed.datapai.raw_orders": ["model.datapai.stg_orders"], "seed.datapai.raw_payments": ["model.datapai.stg_payments"], "seed.datapai.raw_plan": ["model.datapai.plan"], "seed.datapai.raw_tracks": ["model.datapai.tracks"], "model.elementary.alerts_anomaly_detection": [], "model.elementary.alerts_dbt_models": [], "model.elementary.alerts_dbt_source_freshness": [], "model.elementary.alerts_dbt_tests": [], "model.elementary.alerts_schema_changes": [], "model.elementary.anomaly_threshold_sensitivity": [], "model.elementary.metrics_anomaly_score": ["model.elementary.anomaly_threshold_sensitivity"], "model.elementary.data_monitoring_metrics": ["model.elementary.metrics_anomaly_score", "model.elementary.monitors_runs"], "model.elementary.schema_columns_snapshot": [], "model.elementary.dbt_artifacts_hashes": [], "model.elementary.dbt_exposures": ["model.elementary.dbt_artifacts_hashes"], "model.elementary.dbt_invocations": ["model.elementary.job_run_results"], "model.elementary.dbt_metrics": ["model.elementary.dbt_artifacts_hashes"], "model.elementary.dbt_models": ["model.elementary.dbt_artifacts_hashes", "model.elementary.model_run_results"], "model.elementary.dbt_run_results": ["model.elementary.model_run_results", "model.elementary.snapshot_run_results"], "model.elementary.dbt_seeds": ["model.elementary.dbt_artifacts_hashes"], "model.elementary.dbt_snapshots": ["model.elementary.dbt_artifacts_hashes", "model.elementary.snapshot_run_results"], "model.elementary.dbt_sources": ["model.elementary.alerts_dbt_source_freshness", "model.elementary.dbt_artifacts_hashes"], "model.elementary.dbt_tests": ["model.elementary.dbt_artifacts_hashes"], "model.elementary.filtered_information_schema_columns": [], "model.elementary.filtered_information_schema_tables": [], "model.elementary.dbt_source_freshness_results": ["model.elementary.alerts_dbt_source_freshness"], "model.elementary.elementary_test_results": ["model.elementary.alerts_anomaly_detection", "model.elementary.alerts_dbt_tests", "model.elementary.alerts_schema_changes", "model.elementary.test_result_rows", "model.elementary.test_result_rows", "model.elementary.test_result_rows"], "model.elementary.job_run_results": [], "model.elementary.model_run_results": ["model.elementary.alerts_dbt_models"], "model.elementary.snapshot_run_results": ["model.elementary.alerts_dbt_models"], "model.elementary.test_result_rows": [], "model.elementary.metadata": [], "model.elementary.monitors_runs": [], "operation.elementary.elementary-on-run-start-0": [], "operation.elementary.elementary-on-run-end-0": [], "test.datapai.unique_customers_customer_id.c5af1ff4b1": [], "test.datapai.not_null_customers_customer_id.5c9bf9911d": [], "test.datapai.unique_orders_order_id.fed79b3a6e": [], "test.datapai.not_null_orders_order_id.cf6c17daed": [], "test.datapai.not_null_orders_customer_id.c5f02694af": [], "test.datapai.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": [], "test.datapai.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": [], "test.datapai.not_null_orders_amount.106140f9fd": [], "test.datapai.not_null_orders_credit_card_amount.d3ca593b59": [], "test.datapai.not_null_orders_coupon_amount.ab90c90625": [], "test.datapai.not_null_orders_bank_transfer_amount.7743500c49": [], "test.datapai.not_null_orders_gift_card_amount.413a0d2d7a": [], "test.datapai.unique_stg_customers_customer_id.c7614daada": [], "test.datapai.not_null_stg_customers_customer_id.e2cfb1f9aa": [], "test.datapai.unique_stg_orders_order_id.e3b841c71a": [], "test.datapai.not_null_stg_orders_order_id.81cfe2fe64": [], "test.datapai.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [], "test.datapai.unique_stg_payments_payment_id.3744510712": [], "test.datapai.not_null_stg_payments_payment_id.c19cc50075": [], "test.datapai.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": [], "model.datapai.stg_genre": ["model.datapai.dim_track", "test.datapai.not_null_stg_genre_genre_id.5f523677de", "test.datapai.not_null_stg_genre_genre_name.fd5fe8d5db", "test.datapai.unique_stg_genre_genre_id.afd28bdf4f"], "model.datapai.stg_invoice": ["model.datapai.fct_invoice", "test.datapai.not_null_stg_invoice_customer_id.ad43fc527b", "test.datapai.not_null_stg_invoice_invoice_billing_address.9f742a461f", "test.datapai.not_null_stg_invoice_invoice_billing_city.8a10b5ac4d", "test.datapai.not_null_stg_invoice_invoice_billing_country.f58eed528f", "test.datapai.not_null_stg_invoice_invoice_date.b071eb8986", "test.datapai.not_null_stg_invoice_invoice_id.01df371aae", "test.datapai.not_null_stg_invoice_invoice_total.9f7574ef23", "test.datapai.unique_stg_invoice_invoice_id.ff62a93d3b"], "model.datapai.stg_playlist": ["model.datapai.obt_playlist_track", "test.datapai.not_null_stg_playlist_playlist_id.ce164d9d24", "test.datapai.not_null_stg_playlist_playlist_name.ee2cc91336", "test.datapai.unique_stg_playlist_playlist_id.6f899c44f6"], "model.datapai.stg_album": ["model.datapai.dim_track", "test.datapai.not_null_stg_album_album_id.5b25d99261", "test.datapai.not_null_stg_album_album_title.1ecdc1080a", "test.datapai.not_null_stg_album_artist_id.4a798deacb", "test.datapai.unique_stg_album_album_id.d12f7c9e1f"], "model.datapai.stg_employee": ["model.datapai.dim_customer", "test.datapai.not_null_stg_employee_employee_address.9b407327ef", "test.datapai.not_null_stg_employee_employee_birth_date.0ad7e2d6b1", "test.datapai.not_null_stg_employee_employee_country.56ae97c8ed", "test.datapai.not_null_stg_employee_employee_email.31c182658d", "test.datapai.not_null_stg_employee_employee_fax.5e0929e06a", "test.datapai.not_null_stg_employee_employee_first_name.321f1468a0", "test.datapai.not_null_stg_employee_employee_hire_date.3dc5845e12", "test.datapai.not_null_stg_employee_employee_id.102880b2ef", "test.datapai.not_null_stg_employee_employee_last_name.4f5cf3091b", "test.datapai.not_null_stg_employee_employee_phone.b595dd7454", "test.datapai.not_null_stg_employee_employee_postal_code.5963c5a4fa", "test.datapai.not_null_stg_employee_employee_title.0728ddb0bb", "test.datapai.unique_stg_employee_employee_id.756815244f"], "model.datapai.stg_track": ["model.datapai.dim_track", "test.datapai.not_null_stg_track_album_id.8e679e40b6", "test.datapai.not_null_stg_track_genre_id.cf83941793", "test.datapai.not_null_stg_track_media_type_id.8d676c31f1", "test.datapai.not_null_stg_track_track_bytes.0f9f9470d9", "test.datapai.not_null_stg_track_track_id.176bd09265", "test.datapai.not_null_stg_track_track_milliseconds.578ce7a180", "test.datapai.not_null_stg_track_track_name.9190c61d6c", "test.datapai.not_null_stg_track_track_unit_price.3541e4453d", "test.datapai.unique_stg_track_track_id.39ecf945cc"], "model.datapai.stg_artist": ["model.datapai.dim_track", "test.datapai.not_null_stg_artist_artist_id.a7b197e381", "test.datapai.not_null_stg_artist_artist_name.96f41e5e0a", "test.datapai.unique_stg_artist_artist_id.be6d44e19a"], "model.datapai.stg_customer": ["model.datapai.dim_customer", "test.datapai.not_null_stg_customer_customer_address.852191b5ef", "test.datapai.not_null_stg_customer_customer_city.07d3671de3", "test.datapai.not_null_stg_customer_customer_country.3917a1df1f", "test.datapai.not_null_stg_customer_customer_email.2a1ad070ed", "test.datapai.not_null_stg_customer_customer_first_name.0f590c04e3", "test.datapai.not_null_stg_customer_customer_id.4721d3b88d", "test.datapai.not_null_stg_customer_customer_last_name.15080c06e8", "test.datapai.not_null_stg_customer_employee_id.01436fa1bd", "test.datapai.unique_stg_customer_customer_id.310773d0ea"], "seed.datapai.artist": ["model.datapai.stg_artist"], "seed.datapai.album": ["model.datapai.stg_album"], "seed.datapai.playlist": ["model.datapai.stg_playlist"], "seed.datapai.invoice": ["model.datapai.stg_invoice"], "seed.datapai.track": ["model.datapai.stg_track"], "seed.datapai.customer": ["model.datapai.stg_customer"], "seed.datapai.employee": ["model.datapai.stg_employee"], "seed.datapai.genre": ["model.datapai.stg_genre"], "test.datapai.not_null_stg_genre_genre_id.5f523677de": [], "test.datapai.unique_stg_genre_genre_id.afd28bdf4f": [], "test.datapai.not_null_stg_genre_genre_name.fd5fe8d5db": [], "test.datapai.not_null_stg_invoice_invoice_id.01df371aae": [], "test.datapai.unique_stg_invoice_invoice_id.ff62a93d3b": [], "test.datapai.not_null_stg_invoice_customer_id.ad43fc527b": [], "test.datapai.not_null_stg_invoice_invoice_date.b071eb8986": [], "test.datapai.not_null_stg_invoice_invoice_billing_address.9f742a461f": [], "test.datapai.not_null_stg_invoice_invoice_billing_city.8a10b5ac4d": [], "test.datapai.not_null_stg_invoice_invoice_billing_country.f58eed528f": [], "test.datapai.not_null_stg_invoice_invoice_total.9f7574ef23": [], "test.datapai.not_null_stg_playlist_playlist_id.ce164d9d24": [], "test.datapai.unique_stg_playlist_playlist_id.6f899c44f6": [], "test.datapai.not_null_stg_playlist_playlist_name.ee2cc91336": [], "test.datapai.not_null_stg_album_album_id.5b25d99261": [], "test.datapai.unique_stg_album_album_id.d12f7c9e1f": [], "test.datapai.not_null_stg_album_album_title.1ecdc1080a": [], "test.datapai.not_null_stg_album_artist_id.4a798deacb": [], "test.datapai.not_null_stg_employee_employee_id.102880b2ef": [], "test.datapai.unique_stg_employee_employee_id.756815244f": [], "test.datapai.not_null_stg_employee_employee_first_name.321f1468a0": [], "test.datapai.not_null_stg_employee_employee_last_name.4f5cf3091b": [], "test.datapai.not_null_stg_employee_employee_title.0728ddb0bb": [], "test.datapai.not_null_stg_employee_employee_birth_date.0ad7e2d6b1": [], "test.datapai.not_null_stg_employee_employee_hire_date.3dc5845e12": [], "test.datapai.not_null_stg_employee_employee_country.56ae97c8ed": [], "test.datapai.not_null_stg_employee_employee_phone.b595dd7454": [], "test.datapai.not_null_stg_employee_employee_postal_code.5963c5a4fa": [], "test.datapai.not_null_stg_employee_employee_fax.5e0929e06a": [], "test.datapai.not_null_stg_employee_employee_email.31c182658d": [], "test.datapai.not_null_stg_employee_employee_address.9b407327ef": [], "test.datapai.not_null_stg_track_track_id.176bd09265": [], "test.datapai.unique_stg_track_track_id.39ecf945cc": [], "test.datapai.not_null_stg_track_track_name.9190c61d6c": [], "test.datapai.not_null_stg_track_album_id.8e679e40b6": [], "test.datapai.not_null_stg_track_media_type_id.8d676c31f1": [], "test.datapai.not_null_stg_track_genre_id.cf83941793": [], "test.datapai.not_null_stg_track_track_milliseconds.578ce7a180": [], "test.datapai.not_null_stg_track_track_bytes.0f9f9470d9": [], "test.datapai.not_null_stg_track_track_unit_price.3541e4453d": [], "test.datapai.not_null_stg_artist_artist_id.a7b197e381": [], "test.datapai.unique_stg_artist_artist_id.be6d44e19a": [], "test.datapai.not_null_stg_artist_artist_name.96f41e5e0a": [], "test.datapai.not_null_stg_customer_customer_id.4721d3b88d": [], "test.datapai.unique_stg_customer_customer_id.310773d0ea": [], "test.datapai.not_null_stg_customer_customer_first_name.0f590c04e3": [], "test.datapai.not_null_stg_customer_customer_last_name.15080c06e8": [], "test.datapai.not_null_stg_customer_customer_address.852191b5ef": [], "test.datapai.not_null_stg_customer_customer_city.07d3671de3": [], "test.datapai.not_null_stg_customer_customer_country.3917a1df1f": [], "test.datapai.not_null_stg_customer_customer_email.2a1ad070ed": [], "test.datapai.not_null_stg_customer_employee_id.01436fa1bd": [], "model.datapai.fct_invoice_line": [], "model.datapai.stg_invoice_line": ["model.datapai.fct_invoice_line", "test.datapai.not_null_stg_invoice_line_invoice_id.50f6562bf0", "test.datapai.not_null_stg_invoice_line_invoice_line_id.c9cc6cb0b8", "test.datapai.not_null_stg_invoice_line_track_id.5d35924e21", "test.datapai.not_null_stg_invoice_line_track_quantity.ae23361304", "test.datapai.not_null_stg_invoice_line_track_unit_price.12de227af6", "test.datapai.unique_stg_invoice_line_invoice_line_id.77928a3e6b"], "model.datapai.obt_playlist_track": [], "model.datapai.fct_playlist_track": ["model.datapai.obt_playlist_track"], "model.datapai.stg_playlist_track": ["model.datapai.fct_playlist_track", "test.datapai.not_null_stg_playlist_track_playlist_id.a509a68ada", "test.datapai.not_null_stg_playlist_track_track_id.971e5c3ed1"], "model.datapai.dim_track": ["model.datapai.fct_playlist_track"], "model.datapai.stg_media_type": ["model.datapai.dim_track", "test.datapai.not_null_stg_media_type_media_type_id.7826e42fc1", "test.datapai.not_null_stg_media_type_media_type_name.13041c7733", "test.datapai.unique_stg_media_type_media_type_id.6cc267ef44"], "seed.datapai.playlisttrack": ["model.datapai.stg_playlist_track"], "seed.datapai.mediatype": ["model.datapai.stg_media_type"], "seed.datapai.invoiceline": ["model.datapai.stg_invoice_line"], "test.datapai.not_null_stg_invoice_line_invoice_line_id.c9cc6cb0b8": [], "test.datapai.unique_stg_invoice_line_invoice_line_id.77928a3e6b": [], "test.datapai.not_null_stg_invoice_line_invoice_id.50f6562bf0": [], "test.datapai.not_null_stg_invoice_line_track_id.5d35924e21": [], "test.datapai.not_null_stg_invoice_line_track_unit_price.12de227af6": [], "test.datapai.not_null_stg_invoice_line_track_quantity.ae23361304": [], "test.datapai.not_null_stg_playlist_track_playlist_id.a509a68ada": [], "test.datapai.not_null_stg_playlist_track_track_id.971e5c3ed1": [], "test.datapai.not_null_stg_media_type_media_type_id.7826e42fc1": [], "test.datapai.unique_stg_media_type_media_type_id.6cc267ef44": [], "test.datapai.not_null_stg_media_type_media_type_name.13041c7733": [], "model.datapai.dim_date": ["model.datapai.obt_invoice"], "model.datapai.obt_invoice": [], "source.datapai.csv.album": [], "source.datapai.csv.artist": [], "source.datapai.csv.customer": [], "source.datapai.csv.employee": [], "source.datapai.csv.genre": [], "source.datapai.csv.invoice_line": [], "source.datapai.csv.invoice": [], "source.datapai.csv.media_type": [], "source.datapai.csv.playlist_track": [], "source.datapai.csv.playlist": [], "source.datapai.csv.track": [], "exposure.datapai.ld_project_3675b69e_8324_4110_bdca_059031aa8da3": [], "exposure.datapai.ld_chart_01962af0_d72a_4428_913b_2673298d752d": [], "exposure.datapai.ld_chart_c53c4c5b_10d3_4b79_a616_0f7797c8fc21": [], "exposure.datapai.ld_chart_be15e7e2_2ad4_49c7_b1fe_40d334e17373": [], "exposure.datapai.ld_chart_d801d67d_2852_4a94_a6cc_ac32e5a089bf": [], "exposure.datapai.ld_chart_3dc53928_60a1_450f_a351_9f443b87d988": [], "exposure.datapai.ld_chart_66d48c9a_4b09_45b2_a38b_09750abc569b": [], "exposure.datapai.ld_chart_28287c81_c608_42c3_9fa5_af4dec1e574b": [], "exposure.datapai.ld_chart_2eac20e1_e391_46a9_901e_73ee5e453e78": [], "exposure.datapai.ld_chart_3cc86d58_4031_4587_bfdd_bc59a11c24b5": [], "exposure.datapai.ld_dashboard_a2a53dfe_2743_4bb6_b636_2b94a470a3da": [], "metric.datapai.unique_customer_count": ["metric.datapai.dbt_derived", "metric.datapai.dbt_derived", "metric.datapai.dbt_expression", "metric.datapai.dbt_expression"], "metric.datapai.completed_order_count": [], "metric.datapai.dbt_expression": [], "metric.datapai.dbt_derived": []}, "group_map": {}}